
CURT 2020 EVMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031a4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080032b4  080032b4  000132b4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003324  08003324  00013324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003328  08003328  00013328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  0800332c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000013c  20000070  0800339c  00020070  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200001ac  0800339c  000201ac  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  9 .debug_info   00010d7f  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000028ce  00000000  00000000  00030e18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008213  00000000  00000000  000336e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000b50  00000000  00000000  0003b900  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000e58  00000000  00000000  0003c450  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000069fe  00000000  00000000  0003d2a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000434c  00000000  00000000  00043ca6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00047ff2  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002690  00000000  00000000  00048070  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	0800329c 	.word	0x0800329c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	0800329c 	.word	0x0800329c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f092 0f00 	teq	r2, #0
 800043a:	bf14      	ite	ne
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000450:	e720      	b.n	8000294 <__adddf3+0x138>
 8000452:	bf00      	nop

08000454 <__aeabi_ul2d>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	b530      	push	{r4, r5, lr}
 800045e:	f04f 0500 	mov.w	r5, #0
 8000462:	e00a      	b.n	800047a <__aeabi_l2d+0x16>

08000464 <__aeabi_l2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000472:	d502      	bpl.n	800047a <__aeabi_l2d+0x16>
 8000474:	4240      	negs	r0, r0
 8000476:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000482:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000486:	f43f aedc 	beq.w	8000242 <__adddf3+0xe6>
 800048a:	f04f 0203 	mov.w	r2, #3
 800048e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000492:	bf18      	it	ne
 8000494:	3203      	addne	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a2:	f1c2 0320 	rsb	r3, r2, #32
 80004a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004aa:	fa20 f002 	lsr.w	r0, r0, r2
 80004ae:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b2:	ea40 000e 	orr.w	r0, r0, lr
 80004b6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ba:	4414      	add	r4, r2
 80004bc:	e6c1      	b.n	8000242 <__adddf3+0xe6>
 80004be:	bf00      	nop

080004c0 <__aeabi_dmul>:
 80004c0:	b570      	push	{r4, r5, r6, lr}
 80004c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ce:	bf1d      	ittte	ne
 80004d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d4:	ea94 0f0c 	teqne	r4, ip
 80004d8:	ea95 0f0c 	teqne	r5, ip
 80004dc:	f000 f8de 	bleq	800069c <__aeabi_dmul+0x1dc>
 80004e0:	442c      	add	r4, r5
 80004e2:	ea81 0603 	eor.w	r6, r1, r3
 80004e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f2:	bf18      	it	ne
 80004f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80004fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000500:	d038      	beq.n	8000574 <__aeabi_dmul+0xb4>
 8000502:	fba0 ce02 	umull	ip, lr, r0, r2
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800050e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000512:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000516:	f04f 0600 	mov.w	r6, #0
 800051a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800051e:	f09c 0f00 	teq	ip, #0
 8000522:	bf18      	it	ne
 8000524:	f04e 0e01 	orrne.w	lr, lr, #1
 8000528:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800052c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000530:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000534:	d204      	bcs.n	8000540 <__aeabi_dmul+0x80>
 8000536:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053a:	416d      	adcs	r5, r5
 800053c:	eb46 0606 	adc.w	r6, r6, r6
 8000540:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000544:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000548:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800054c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000550:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000554:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000558:	bf88      	it	hi
 800055a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800055e:	d81e      	bhi.n	800059e <__aeabi_dmul+0xde>
 8000560:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000564:	bf08      	it	eq
 8000566:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056a:	f150 0000 	adcs.w	r0, r0, #0
 800056e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000572:	bd70      	pop	{r4, r5, r6, pc}
 8000574:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000578:	ea46 0101 	orr.w	r1, r6, r1
 800057c:	ea40 0002 	orr.w	r0, r0, r2
 8000580:	ea81 0103 	eor.w	r1, r1, r3
 8000584:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000588:	bfc2      	ittt	gt
 800058a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800058e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000592:	bd70      	popgt	{r4, r5, r6, pc}
 8000594:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000598:	f04f 0e00 	mov.w	lr, #0
 800059c:	3c01      	subs	r4, #1
 800059e:	f300 80ab 	bgt.w	80006f8 <__aeabi_dmul+0x238>
 80005a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005a6:	bfde      	ittt	le
 80005a8:	2000      	movle	r0, #0
 80005aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ae:	bd70      	pople	{r4, r5, r6, pc}
 80005b0:	f1c4 0400 	rsb	r4, r4, #0
 80005b4:	3c20      	subs	r4, #32
 80005b6:	da35      	bge.n	8000624 <__aeabi_dmul+0x164>
 80005b8:	340c      	adds	r4, #12
 80005ba:	dc1b      	bgt.n	80005f4 <__aeabi_dmul+0x134>
 80005bc:	f104 0414 	add.w	r4, r4, #20
 80005c0:	f1c4 0520 	rsb	r5, r4, #32
 80005c4:	fa00 f305 	lsl.w	r3, r0, r5
 80005c8:	fa20 f004 	lsr.w	r0, r0, r4
 80005cc:	fa01 f205 	lsl.w	r2, r1, r5
 80005d0:	ea40 0002 	orr.w	r0, r0, r2
 80005d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e0:	fa21 f604 	lsr.w	r6, r1, r4
 80005e4:	eb42 0106 	adc.w	r1, r2, r6
 80005e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005ec:	bf08      	it	eq
 80005ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f1c4 040c 	rsb	r4, r4, #12
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000600:	fa20 f005 	lsr.w	r0, r0, r5
 8000604:	fa01 f204 	lsl.w	r2, r1, r4
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000610:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000614:	f141 0100 	adc.w	r1, r1, #0
 8000618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800061c:	bf08      	it	eq
 800061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f205 	lsl.w	r2, r0, r5
 800062c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000630:	fa20 f304 	lsr.w	r3, r0, r4
 8000634:	fa01 f205 	lsl.w	r2, r1, r5
 8000638:	ea43 0302 	orr.w	r3, r3, r2
 800063c:	fa21 f004 	lsr.w	r0, r1, r4
 8000640:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000644:	fa21 f204 	lsr.w	r2, r1, r4
 8000648:	ea20 0002 	bic.w	r0, r0, r2
 800064c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f094 0f00 	teq	r4, #0
 8000660:	d10f      	bne.n	8000682 <__aeabi_dmul+0x1c2>
 8000662:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000666:	0040      	lsls	r0, r0, #1
 8000668:	eb41 0101 	adc.w	r1, r1, r1
 800066c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000670:	bf08      	it	eq
 8000672:	3c01      	subeq	r4, #1
 8000674:	d0f7      	beq.n	8000666 <__aeabi_dmul+0x1a6>
 8000676:	ea41 0106 	orr.w	r1, r1, r6
 800067a:	f095 0f00 	teq	r5, #0
 800067e:	bf18      	it	ne
 8000680:	4770      	bxne	lr
 8000682:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000686:	0052      	lsls	r2, r2, #1
 8000688:	eb43 0303 	adc.w	r3, r3, r3
 800068c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000690:	bf08      	it	eq
 8000692:	3d01      	subeq	r5, #1
 8000694:	d0f7      	beq.n	8000686 <__aeabi_dmul+0x1c6>
 8000696:	ea43 0306 	orr.w	r3, r3, r6
 800069a:	4770      	bx	lr
 800069c:	ea94 0f0c 	teq	r4, ip
 80006a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a4:	bf18      	it	ne
 80006a6:	ea95 0f0c 	teqne	r5, ip
 80006aa:	d00c      	beq.n	80006c6 <__aeabi_dmul+0x206>
 80006ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b0:	bf18      	it	ne
 80006b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006b6:	d1d1      	bne.n	800065c <__aeabi_dmul+0x19c>
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd70      	pop	{r4, r5, r6, pc}
 80006c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ca:	bf06      	itte	eq
 80006cc:	4610      	moveq	r0, r2
 80006ce:	4619      	moveq	r1, r3
 80006d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d4:	d019      	beq.n	800070a <__aeabi_dmul+0x24a>
 80006d6:	ea94 0f0c 	teq	r4, ip
 80006da:	d102      	bne.n	80006e2 <__aeabi_dmul+0x222>
 80006dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e0:	d113      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006e2:	ea95 0f0c 	teq	r5, ip
 80006e6:	d105      	bne.n	80006f4 <__aeabi_dmul+0x234>
 80006e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006ec:	bf1c      	itt	ne
 80006ee:	4610      	movne	r0, r2
 80006f0:	4619      	movne	r1, r3
 80006f2:	d10a      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006f4:	ea81 0103 	eor.w	r1, r1, r3
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000700:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000704:	f04f 0000 	mov.w	r0, #0
 8000708:	bd70      	pop	{r4, r5, r6, pc}
 800070a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800070e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000712:	bd70      	pop	{r4, r5, r6, pc}

08000714 <__aeabi_ddiv>:
 8000714:	b570      	push	{r4, r5, r6, lr}
 8000716:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800071e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000722:	bf1d      	ittte	ne
 8000724:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000728:	ea94 0f0c 	teqne	r4, ip
 800072c:	ea95 0f0c 	teqne	r5, ip
 8000730:	f000 f8a7 	bleq	8000882 <__aeabi_ddiv+0x16e>
 8000734:	eba4 0405 	sub.w	r4, r4, r5
 8000738:	ea81 0e03 	eor.w	lr, r1, r3
 800073c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000740:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000744:	f000 8088 	beq.w	8000858 <__aeabi_ddiv+0x144>
 8000748:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800074c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000750:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000754:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000758:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800075c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000760:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000764:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000768:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800076c:	429d      	cmp	r5, r3
 800076e:	bf08      	it	eq
 8000770:	4296      	cmpeq	r6, r2
 8000772:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000776:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077a:	d202      	bcs.n	8000782 <__aeabi_ddiv+0x6e>
 800077c:	085b      	lsrs	r3, r3, #1
 800077e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000782:	1ab6      	subs	r6, r6, r2
 8000784:	eb65 0503 	sbc.w	r5, r5, r3
 8000788:	085b      	lsrs	r3, r3, #1
 800078a:	ea4f 0232 	mov.w	r2, r2, rrx
 800078e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000792:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000796:	ebb6 0e02 	subs.w	lr, r6, r2
 800079a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800079e:	bf22      	ittt	cs
 80007a0:	1ab6      	subcs	r6, r6, r2
 80007a2:	4675      	movcs	r5, lr
 80007a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f0:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f4:	d018      	beq.n	8000828 <__aeabi_ddiv+0x114>
 80007f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80007fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000802:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000806:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800080e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000812:	d1c0      	bne.n	8000796 <__aeabi_ddiv+0x82>
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	d10b      	bne.n	8000832 <__aeabi_ddiv+0x11e>
 800081a:	ea41 0100 	orr.w	r1, r1, r0
 800081e:	f04f 0000 	mov.w	r0, #0
 8000822:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000826:	e7b6      	b.n	8000796 <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800082c:	bf04      	itt	eq
 800082e:	4301      	orreq	r1, r0
 8000830:	2000      	moveq	r0, #0
 8000832:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000836:	bf88      	it	hi
 8000838:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800083c:	f63f aeaf 	bhi.w	800059e <__aeabi_dmul+0xde>
 8000840:	ebb5 0c03 	subs.w	ip, r5, r3
 8000844:	bf04      	itt	eq
 8000846:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800084e:	f150 0000 	adcs.w	r0, r0, #0
 8000852:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000856:	bd70      	pop	{r4, r5, r6, pc}
 8000858:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800085c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000860:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000864:	bfc2      	ittt	gt
 8000866:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800086e:	bd70      	popgt	{r4, r5, r6, pc}
 8000870:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000874:	f04f 0e00 	mov.w	lr, #0
 8000878:	3c01      	subs	r4, #1
 800087a:	e690      	b.n	800059e <__aeabi_dmul+0xde>
 800087c:	ea45 0e06 	orr.w	lr, r5, r6
 8000880:	e68d      	b.n	800059e <__aeabi_dmul+0xde>
 8000882:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000886:	ea94 0f0c 	teq	r4, ip
 800088a:	bf08      	it	eq
 800088c:	ea95 0f0c 	teqeq	r5, ip
 8000890:	f43f af3b 	beq.w	800070a <__aeabi_dmul+0x24a>
 8000894:	ea94 0f0c 	teq	r4, ip
 8000898:	d10a      	bne.n	80008b0 <__aeabi_ddiv+0x19c>
 800089a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800089e:	f47f af34 	bne.w	800070a <__aeabi_dmul+0x24a>
 80008a2:	ea95 0f0c 	teq	r5, ip
 80008a6:	f47f af25 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008aa:	4610      	mov	r0, r2
 80008ac:	4619      	mov	r1, r3
 80008ae:	e72c      	b.n	800070a <__aeabi_dmul+0x24a>
 80008b0:	ea95 0f0c 	teq	r5, ip
 80008b4:	d106      	bne.n	80008c4 <__aeabi_ddiv+0x1b0>
 80008b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ba:	f43f aefd 	beq.w	80006b8 <__aeabi_dmul+0x1f8>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e722      	b.n	800070a <__aeabi_dmul+0x24a>
 80008c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c8:	bf18      	it	ne
 80008ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ce:	f47f aec5 	bne.w	800065c <__aeabi_dmul+0x19c>
 80008d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008d6:	f47f af0d 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008de:	f47f aeeb 	bne.w	80006b8 <__aeabi_dmul+0x1f8>
 80008e2:	e712      	b.n	800070a <__aeabi_dmul+0x24a>

080008e4 <__gedf2>:
 80008e4:	f04f 3cff 	mov.w	ip, #4294967295
 80008e8:	e006      	b.n	80008f8 <__cmpdf2+0x4>
 80008ea:	bf00      	nop

080008ec <__ledf2>:
 80008ec:	f04f 0c01 	mov.w	ip, #1
 80008f0:	e002      	b.n	80008f8 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__cmpdf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80008fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000900:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000904:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800090e:	d01b      	beq.n	8000948 <__cmpdf2+0x54>
 8000910:	b001      	add	sp, #4
 8000912:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000916:	bf0c      	ite	eq
 8000918:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800091c:	ea91 0f03 	teqne	r1, r3
 8000920:	bf02      	ittt	eq
 8000922:	ea90 0f02 	teqeq	r0, r2
 8000926:	2000      	moveq	r0, #0
 8000928:	4770      	bxeq	lr
 800092a:	f110 0f00 	cmn.w	r0, #0
 800092e:	ea91 0f03 	teq	r1, r3
 8000932:	bf58      	it	pl
 8000934:	4299      	cmppl	r1, r3
 8000936:	bf08      	it	eq
 8000938:	4290      	cmpeq	r0, r2
 800093a:	bf2c      	ite	cs
 800093c:	17d8      	asrcs	r0, r3, #31
 800093e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000942:	f040 0001 	orr.w	r0, r0, #1
 8000946:	4770      	bx	lr
 8000948:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800094c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000950:	d102      	bne.n	8000958 <__cmpdf2+0x64>
 8000952:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000956:	d107      	bne.n	8000968 <__cmpdf2+0x74>
 8000958:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	d1d6      	bne.n	8000910 <__cmpdf2+0x1c>
 8000962:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000966:	d0d3      	beq.n	8000910 <__cmpdf2+0x1c>
 8000968:	f85d 0b04 	ldr.w	r0, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop

08000970 <__aeabi_cdrcmple>:
 8000970:	4684      	mov	ip, r0
 8000972:	4610      	mov	r0, r2
 8000974:	4662      	mov	r2, ip
 8000976:	468c      	mov	ip, r1
 8000978:	4619      	mov	r1, r3
 800097a:	4663      	mov	r3, ip
 800097c:	e000      	b.n	8000980 <__aeabi_cdcmpeq>
 800097e:	bf00      	nop

08000980 <__aeabi_cdcmpeq>:
 8000980:	b501      	push	{r0, lr}
 8000982:	f7ff ffb7 	bl	80008f4 <__cmpdf2>
 8000986:	2800      	cmp	r0, #0
 8000988:	bf48      	it	mi
 800098a:	f110 0f00 	cmnmi.w	r0, #0
 800098e:	bd01      	pop	{r0, pc}

08000990 <__aeabi_dcmpeq>:
 8000990:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000994:	f7ff fff4 	bl	8000980 <__aeabi_cdcmpeq>
 8000998:	bf0c      	ite	eq
 800099a:	2001      	moveq	r0, #1
 800099c:	2000      	movne	r0, #0
 800099e:	f85d fb08 	ldr.w	pc, [sp], #8
 80009a2:	bf00      	nop

080009a4 <__aeabi_dcmplt>:
 80009a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a8:	f7ff ffea 	bl	8000980 <__aeabi_cdcmpeq>
 80009ac:	bf34      	ite	cc
 80009ae:	2001      	movcc	r0, #1
 80009b0:	2000      	movcs	r0, #0
 80009b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b6:	bf00      	nop

080009b8 <__aeabi_dcmple>:
 80009b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009bc:	f7ff ffe0 	bl	8000980 <__aeabi_cdcmpeq>
 80009c0:	bf94      	ite	ls
 80009c2:	2001      	movls	r0, #1
 80009c4:	2000      	movhi	r0, #0
 80009c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ca:	bf00      	nop

080009cc <__aeabi_dcmpge>:
 80009cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d0:	f7ff ffce 	bl	8000970 <__aeabi_cdrcmple>
 80009d4:	bf94      	ite	ls
 80009d6:	2001      	movls	r0, #1
 80009d8:	2000      	movhi	r0, #0
 80009da:	f85d fb08 	ldr.w	pc, [sp], #8
 80009de:	bf00      	nop

080009e0 <__aeabi_dcmpgt>:
 80009e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e4:	f7ff ffc4 	bl	8000970 <__aeabi_cdrcmple>
 80009e8:	bf34      	ite	cc
 80009ea:	2001      	movcc	r0, #1
 80009ec:	2000      	movcs	r0, #0
 80009ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f2:	bf00      	nop

080009f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009f6:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <HAL_InitTick+0x3c>)
{
 80009f8:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009fa:	7818      	ldrb	r0, [r3, #0]
 80009fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a00:	fbb3 f3f0 	udiv	r3, r3, r0
 8000a04:	4a0b      	ldr	r2, [pc, #44]	; (8000a34 <HAL_InitTick+0x40>)
 8000a06:	6810      	ldr	r0, [r2, #0]
 8000a08:	fbb0 f0f3 	udiv	r0, r0, r3
 8000a0c:	f000 fac8 	bl	8000fa0 <HAL_SYSTICK_Config>
 8000a10:	4604      	mov	r4, r0
 8000a12:	b958      	cbnz	r0, 8000a2c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a14:	2d0f      	cmp	r5, #15
 8000a16:	d809      	bhi.n	8000a2c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a18:	4602      	mov	r2, r0
 8000a1a:	4629      	mov	r1, r5
 8000a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a20:	f000 fa7c 	bl	8000f1c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a24:	4b04      	ldr	r3, [pc, #16]	; (8000a38 <HAL_InitTick+0x44>)
 8000a26:	4620      	mov	r0, r4
 8000a28:	601d      	str	r5, [r3, #0]
 8000a2a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000a2c:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000a2e:	bd38      	pop	{r3, r4, r5, pc}
 8000a30:	20000000 	.word	0x20000000
 8000a34:	20000008 	.word	0x20000008
 8000a38:	20000004 	.word	0x20000004

08000a3c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a3c:	4a07      	ldr	r2, [pc, #28]	; (8000a5c <HAL_Init+0x20>)
{
 8000a3e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a40:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a42:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a44:	f043 0310 	orr.w	r3, r3, #16
 8000a48:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a4a:	f000 fa55 	bl	8000ef8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a4e:	2000      	movs	r0, #0
 8000a50:	f7ff ffd0 	bl	80009f4 <HAL_InitTick>
  HAL_MspInit();
 8000a54:	f001 fe82 	bl	800275c <HAL_MspInit>
}
 8000a58:	2000      	movs	r0, #0
 8000a5a:	bd08      	pop	{r3, pc}
 8000a5c:	40022000 	.word	0x40022000

08000a60 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000a60:	4a03      	ldr	r2, [pc, #12]	; (8000a70 <HAL_IncTick+0x10>)
 8000a62:	4b04      	ldr	r3, [pc, #16]	; (8000a74 <HAL_IncTick+0x14>)
 8000a64:	6811      	ldr	r1, [r2, #0]
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	440b      	add	r3, r1
 8000a6a:	6013      	str	r3, [r2, #0]
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	2000009c 	.word	0x2000009c
 8000a74:	20000000 	.word	0x20000000

08000a78 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000a78:	4b01      	ldr	r3, [pc, #4]	; (8000a80 <HAL_GetTick+0x8>)
 8000a7a:	6818      	ldr	r0, [r3, #0]
}
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	2000009c 	.word	0x2000009c

08000a84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a84:	b538      	push	{r3, r4, r5, lr}
 8000a86:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000a88:	f7ff fff6 	bl	8000a78 <HAL_GetTick>
 8000a8c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a8e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000a90:	bf1e      	ittt	ne
 8000a92:	4b04      	ldrne	r3, [pc, #16]	; (8000aa4 <HAL_Delay+0x20>)
 8000a94:	781b      	ldrbne	r3, [r3, #0]
 8000a96:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a98:	f7ff ffee 	bl	8000a78 <HAL_GetTick>
 8000a9c:	1b40      	subs	r0, r0, r5
 8000a9e:	4284      	cmp	r4, r0
 8000aa0:	d8fa      	bhi.n	8000a98 <HAL_Delay+0x14>
  {
  }
}
 8000aa2:	bd38      	pop	{r3, r4, r5, pc}
 8000aa4:	20000000 	.word	0x20000000

08000aa8 <HAL_ADC_ConvCpltCallback>:
 8000aa8:	4770      	bx	lr

08000aaa <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000aaa:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8000aac:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000aae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000ab0:	f012 0f50 	tst.w	r2, #80	; 0x50
 8000ab4:	d11b      	bne.n	8000aee <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000ab6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000ab8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000abc:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	6892      	ldr	r2, [r2, #8]
 8000ac2:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000ac6:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000aca:	d10c      	bne.n	8000ae6 <ADC_DMAConvCplt+0x3c>
 8000acc:	7b1a      	ldrb	r2, [r3, #12]
 8000ace:	b952      	cbnz	r2, 8000ae6 <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000ad0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000ad2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000ad6:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ad8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000ada:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000adc:	bf5e      	ittt	pl
 8000ade:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 8000ae0:	f042 0201 	orrpl.w	r2, r2, #1
 8000ae4:	629a      	strpl	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f7ff ffde 	bl	8000aa8 <HAL_ADC_ConvCpltCallback>
 8000aec:	bd10      	pop	{r4, pc}
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000aee:	6a1b      	ldr	r3, [r3, #32]
  }
}
 8000af0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4718      	bx	r3

08000af8 <HAL_ADC_ConvHalfCpltCallback>:
 8000af8:	4770      	bx	lr

08000afa <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000afa:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8000afc:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8000afe:	f7ff fffb 	bl	8000af8 <HAL_ADC_ConvHalfCpltCallback>
 8000b02:	bd08      	pop	{r3, pc}

08000b04 <HAL_ADC_ErrorCallback>:
{
 8000b04:	4770      	bx	lr

08000b06 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000b06:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8000b08:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000b0a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000b0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b10:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000b12:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000b14:	f043 0304 	orr.w	r3, r3, #4
 8000b18:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8000b1a:	f7ff fff3 	bl	8000b04 <HAL_ADC_ErrorCallback>
 8000b1e:	bd08      	pop	{r3, pc}

08000b20 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8000b20:	2300      	movs	r3, #0
{ 
 8000b22:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000b24:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000b26:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	d074      	beq.n	8000c18 <HAL_ADC_ConfigChannel+0xf8>
 8000b2e:	2301      	movs	r3, #1
  if (sConfig->Rank < 7U)
 8000b30:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 8000b32:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8000b36:	2d06      	cmp	r5, #6
 8000b38:	6802      	ldr	r2, [r0, #0]
 8000b3a:	ea4f 0385 	mov.w	r3, r5, lsl #2
 8000b3e:	680c      	ldr	r4, [r1, #0]
 8000b40:	d825      	bhi.n	8000b8e <HAL_ADC_ConfigChannel+0x6e>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000b42:	442b      	add	r3, r5
 8000b44:	251f      	movs	r5, #31
 8000b46:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8000b48:	3b05      	subs	r3, #5
 8000b4a:	409d      	lsls	r5, r3
 8000b4c:	ea26 0505 	bic.w	r5, r6, r5
 8000b50:	fa04 f303 	lsl.w	r3, r4, r3
 8000b54:	432b      	orrs	r3, r5
 8000b56:	6353      	str	r3, [r2, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000b58:	2c09      	cmp	r4, #9
 8000b5a:	ea4f 0344 	mov.w	r3, r4, lsl #1
 8000b5e:	688d      	ldr	r5, [r1, #8]
 8000b60:	d92f      	bls.n	8000bc2 <HAL_ADC_ConfigChannel+0xa2>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000b62:	2607      	movs	r6, #7
 8000b64:	4423      	add	r3, r4
 8000b66:	68d1      	ldr	r1, [r2, #12]
 8000b68:	3b1e      	subs	r3, #30
 8000b6a:	409e      	lsls	r6, r3
 8000b6c:	ea21 0106 	bic.w	r1, r1, r6
 8000b70:	fa05 f303 	lsl.w	r3, r5, r3
 8000b74:	430b      	orrs	r3, r1
 8000b76:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000b78:	f1a4 0310 	sub.w	r3, r4, #16
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d92b      	bls.n	8000bd8 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b80:	2300      	movs	r3, #0
  __HAL_UNLOCK(hadc);
 8000b82:	2200      	movs	r2, #0
 8000b84:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	b002      	add	sp, #8
 8000b8c:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8000b8e:	2d0c      	cmp	r5, #12
 8000b90:	d80b      	bhi.n	8000baa <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000b92:	442b      	add	r3, r5
 8000b94:	251f      	movs	r5, #31
 8000b96:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8000b98:	3b23      	subs	r3, #35	; 0x23
 8000b9a:	409d      	lsls	r5, r3
 8000b9c:	ea26 0505 	bic.w	r5, r6, r5
 8000ba0:	fa04 f303 	lsl.w	r3, r4, r3
 8000ba4:	432b      	orrs	r3, r5
 8000ba6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba8:	e7d6      	b.n	8000b58 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000baa:	442b      	add	r3, r5
 8000bac:	251f      	movs	r5, #31
 8000bae:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8000bb0:	3b41      	subs	r3, #65	; 0x41
 8000bb2:	409d      	lsls	r5, r3
 8000bb4:	ea26 0505 	bic.w	r5, r6, r5
 8000bb8:	fa04 f303 	lsl.w	r3, r4, r3
 8000bbc:	432b      	orrs	r3, r5
 8000bbe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000bc0:	e7ca      	b.n	8000b58 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000bc2:	2607      	movs	r6, #7
 8000bc4:	6911      	ldr	r1, [r2, #16]
 8000bc6:	4423      	add	r3, r4
 8000bc8:	409e      	lsls	r6, r3
 8000bca:	ea21 0106 	bic.w	r1, r1, r6
 8000bce:	fa05 f303 	lsl.w	r3, r5, r3
 8000bd2:	430b      	orrs	r3, r1
 8000bd4:	6113      	str	r3, [r2, #16]
 8000bd6:	e7cf      	b.n	8000b78 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 8000bd8:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <HAL_ADC_ConfigChannel+0xfc>)
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	d116      	bne.n	8000c0c <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000bde:	6893      	ldr	r3, [r2, #8]
 8000be0:	021b      	lsls	r3, r3, #8
 8000be2:	d4cd      	bmi.n	8000b80 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000be4:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000be6:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000be8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000bec:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000bee:	d1c7      	bne.n	8000b80 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000bf0:	4b0b      	ldr	r3, [pc, #44]	; (8000c20 <HAL_ADC_ConfigChannel+0x100>)
 8000bf2:	4a0c      	ldr	r2, [pc, #48]	; (8000c24 <HAL_ADC_ConfigChannel+0x104>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	fbb3 f2f2 	udiv	r2, r3, r2
 8000bfa:	230a      	movs	r3, #10
 8000bfc:	4353      	muls	r3, r2
            wait_loop_index--;
 8000bfe:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000c00:	9b01      	ldr	r3, [sp, #4]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d0bc      	beq.n	8000b80 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 8000c06:	9b01      	ldr	r3, [sp, #4]
 8000c08:	3b01      	subs	r3, #1
 8000c0a:	e7f8      	b.n	8000bfe <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c0c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000c0e:	f043 0320 	orr.w	r3, r3, #32
 8000c12:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8000c14:	2301      	movs	r3, #1
 8000c16:	e7b4      	b.n	8000b82 <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 8000c18:	2302      	movs	r3, #2
 8000c1a:	e7b5      	b.n	8000b88 <HAL_ADC_ConfigChannel+0x68>
 8000c1c:	40012400 	.word	0x40012400
 8000c20:	20000008 	.word	0x20000008
 8000c24:	000f4240 	.word	0x000f4240

08000c28 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 8000c28:	2300      	movs	r3, #0
{
 8000c2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000c2c:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000c2e:	6803      	ldr	r3, [r0, #0]
{
 8000c30:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000c32:	689a      	ldr	r2, [r3, #8]
 8000c34:	07d2      	lsls	r2, r2, #31
 8000c36:	d502      	bpl.n	8000c3e <ADC_Enable+0x16>
  return HAL_OK;
 8000c38:	2000      	movs	r0, #0
}
 8000c3a:	b002      	add	sp, #8
 8000c3c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 8000c3e:	689a      	ldr	r2, [r3, #8]
 8000c40:	f042 0201 	orr.w	r2, r2, #1
 8000c44:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000c46:	4b12      	ldr	r3, [pc, #72]	; (8000c90 <ADC_Enable+0x68>)
 8000c48:	4a12      	ldr	r2, [pc, #72]	; (8000c94 <ADC_Enable+0x6c>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8000c50:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8000c52:	9b01      	ldr	r3, [sp, #4]
 8000c54:	b9c3      	cbnz	r3, 8000c88 <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 8000c56:	f7ff ff0f 	bl	8000a78 <HAL_GetTick>
 8000c5a:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000c5c:	6823      	ldr	r3, [r4, #0]
 8000c5e:	689d      	ldr	r5, [r3, #8]
 8000c60:	f015 0501 	ands.w	r5, r5, #1
 8000c64:	d1e8      	bne.n	8000c38 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000c66:	f7ff ff07 	bl	8000a78 <HAL_GetTick>
 8000c6a:	1b80      	subs	r0, r0, r6
 8000c6c:	2802      	cmp	r0, #2
 8000c6e:	d9f5      	bls.n	8000c5c <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c70:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 8000c72:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c76:	f043 0310 	orr.w	r3, r3, #16
 8000c7a:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c7c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 8000c7e:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000c86:	e7d8      	b.n	8000c3a <ADC_Enable+0x12>
      wait_loop_index--;
 8000c88:	9b01      	ldr	r3, [sp, #4]
 8000c8a:	3b01      	subs	r3, #1
 8000c8c:	e7e0      	b.n	8000c50 <ADC_Enable+0x28>
 8000c8e:	bf00      	nop
 8000c90:	20000008 	.word	0x20000008
 8000c94:	000f4240 	.word	0x000f4240

08000c98 <HAL_ADC_Start_DMA>:
{
 8000c98:	e92d 41d8 	stmdb	sp!, {r3, r4, r6, r7, r8, lr}
 8000c9c:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000c9e:	4b40      	ldr	r3, [pc, #256]	; (8000da0 <HAL_ADC_Start_DMA+0x108>)
 8000ca0:	6802      	ldr	r2, [r0, #0]
{
 8000ca2:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000ca4:	429a      	cmp	r2, r3
{
 8000ca6:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000ca8:	d002      	beq.n	8000cb0 <HAL_ADC_Start_DMA+0x18>
 8000caa:	493e      	ldr	r1, [pc, #248]	; (8000da4 <HAL_ADC_Start_DMA+0x10c>)
 8000cac:	428a      	cmp	r2, r1
 8000cae:	d103      	bne.n	8000cb8 <HAL_ADC_Start_DMA+0x20>
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8000cb6:	d16e      	bne.n	8000d96 <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 8000cb8:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d06c      	beq.n	8000d9a <HAL_ADC_Start_DMA+0x102>
 8000cc0:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 8000cc2:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 8000cc4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8000cc8:	f7ff ffae 	bl	8000c28 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8000ccc:	4606      	mov	r6, r0
 8000cce:	2800      	cmp	r0, #0
 8000cd0:	d15d      	bne.n	8000d8e <HAL_ADC_Start_DMA+0xf6>
      ADC_STATE_CLR_SET(hadc->State,
 8000cd2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000cd4:	6821      	ldr	r1, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 8000cd6:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000cda:	4b32      	ldr	r3, [pc, #200]	; (8000da4 <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 8000cdc:	f020 0001 	bic.w	r0, r0, #1
 8000ce0:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000ce4:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 8000ce6:	62a0      	str	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000ce8:	d104      	bne.n	8000cf4 <HAL_ADC_Start_DMA+0x5c>
 8000cea:	4a2d      	ldr	r2, [pc, #180]	; (8000da0 <HAL_ADC_Start_DMA+0x108>)
 8000cec:	6853      	ldr	r3, [r2, #4]
 8000cee:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8000cf2:	d13e      	bne.n	8000d72 <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000cf4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000cf6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000cfa:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000cfc:	684b      	ldr	r3, [r1, #4]
 8000cfe:	055a      	lsls	r2, r3, #21
 8000d00:	d505      	bpl.n	8000d0e <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000d02:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000d04:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d0c:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d0e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000d10:	6a20      	ldr	r0, [r4, #32]
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d12:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000d16:	bf18      	it	ne
 8000d18:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000d1a:	463a      	mov	r2, r7
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000d1c:	bf18      	it	ne
 8000d1e:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8000d22:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 8000d24:	2300      	movs	r3, #0
 8000d26:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000d2a:	4b1f      	ldr	r3, [pc, #124]	; (8000da8 <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000d2c:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000d2e:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000d30:	4b1e      	ldr	r3, [pc, #120]	; (8000dac <HAL_ADC_Start_DMA+0x114>)
 8000d32:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000d34:	4b1e      	ldr	r3, [pc, #120]	; (8000db0 <HAL_ADC_Start_DMA+0x118>)
 8000d36:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000d38:	f06f 0302 	mvn.w	r3, #2
 8000d3c:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000d40:	f851 3c44 	ldr.w	r3, [r1, #-68]
 8000d44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d48:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000d4c:	4643      	mov	r3, r8
 8000d4e:	f000 f96d 	bl	800102c <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000d52:	6823      	ldr	r3, [r4, #0]
 8000d54:	689a      	ldr	r2, [r3, #8]
 8000d56:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000d5a:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000d5e:	689a      	ldr	r2, [r3, #8]
 8000d60:	bf0c      	ite	eq
 8000d62:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000d66:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 8000d6a:	609a      	str	r2, [r3, #8]
}
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	e8bd 81d8 	ldmia.w	sp!, {r3, r4, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d72:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000d74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000d78:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000d7a:	6853      	ldr	r3, [r2, #4]
 8000d7c:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000d7e:	bf41      	itttt	mi
 8000d80:	6aa0      	ldrmi	r0, [r4, #40]	; 0x28
 8000d82:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 8000d86:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 8000d8a:	62a0      	strmi	r0, [r4, #40]	; 0x28
 8000d8c:	e7bf      	b.n	8000d0e <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 8000d8e:	2300      	movs	r3, #0
 8000d90:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8000d94:	e7ea      	b.n	8000d6c <HAL_ADC_Start_DMA+0xd4>
    tmp_hal_status = HAL_ERROR;
 8000d96:	2601      	movs	r6, #1
 8000d98:	e7e8      	b.n	8000d6c <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 8000d9a:	2602      	movs	r6, #2
 8000d9c:	e7e6      	b.n	8000d6c <HAL_ADC_Start_DMA+0xd4>
 8000d9e:	bf00      	nop
 8000da0:	40012400 	.word	0x40012400
 8000da4:	40012800 	.word	0x40012800
 8000da8:	08000aab 	.word	0x08000aab
 8000dac:	08000afb 	.word	0x08000afb
 8000db0:	08000b07 	.word	0x08000b07

08000db4 <ADC_ConversionStop_Disable>:
{
 8000db4:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000db6:	6803      	ldr	r3, [r0, #0]
{
 8000db8:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000dba:	689a      	ldr	r2, [r3, #8]
 8000dbc:	07d2      	lsls	r2, r2, #31
 8000dbe:	d401      	bmi.n	8000dc4 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8000dc0:	2000      	movs	r0, #0
 8000dc2:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8000dc4:	689a      	ldr	r2, [r3, #8]
 8000dc6:	f022 0201 	bic.w	r2, r2, #1
 8000dca:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000dcc:	f7ff fe54 	bl	8000a78 <HAL_GetTick>
 8000dd0:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000dd2:	6823      	ldr	r3, [r4, #0]
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	07db      	lsls	r3, r3, #31
 8000dd8:	d5f2      	bpl.n	8000dc0 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000dda:	f7ff fe4d 	bl	8000a78 <HAL_GetTick>
 8000dde:	1b40      	subs	r0, r0, r5
 8000de0:	2802      	cmp	r0, #2
 8000de2:	d9f6      	bls.n	8000dd2 <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000de4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000de6:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000de8:	f043 0310 	orr.w	r3, r3, #16
 8000dec:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000df0:	f043 0301 	orr.w	r3, r3, #1
 8000df4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000df6:	bd38      	pop	{r3, r4, r5, pc}

08000df8 <HAL_ADC_Init>:
{
 8000df8:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 8000dfa:	4604      	mov	r4, r0
 8000dfc:	2800      	cmp	r0, #0
 8000dfe:	d071      	beq.n	8000ee4 <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e00:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000e02:	b923      	cbnz	r3, 8000e0e <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8000e04:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8000e06:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8000e0a:	f001 fcc9 	bl	80027a0 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000e0e:	4620      	mov	r0, r4
 8000e10:	f7ff ffd0 	bl	8000db4 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e14:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000e16:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 8000e1a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e1c:	d164      	bne.n	8000ee8 <HAL_ADC_Init+0xf0>
 8000e1e:	2800      	cmp	r0, #0
 8000e20:	d162      	bne.n	8000ee8 <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e22:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8000e24:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e28:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8000e2a:	f023 0302 	bic.w	r3, r3, #2
 8000e2e:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e32:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000e34:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8000e36:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000e38:	7b23      	ldrb	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000e3a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000e3e:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000e42:	d038      	beq.n	8000eb6 <HAL_ADC_Init+0xbe>
 8000e44:	2901      	cmp	r1, #1
 8000e46:	bf14      	ite	ne
 8000e48:	4606      	movne	r6, r0
 8000e4a:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e4e:	7d25      	ldrb	r5, [r4, #20]
 8000e50:	2d01      	cmp	r5, #1
 8000e52:	d107      	bne.n	8000e64 <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d130      	bne.n	8000eba <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000e58:	69a3      	ldr	r3, [r4, #24]
 8000e5a:	3b01      	subs	r3, #1
 8000e5c:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 8000e60:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8000e64:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000e66:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8000e6a:	685d      	ldr	r5, [r3, #4]
 8000e6c:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8000e70:	ea45 0506 	orr.w	r5, r5, r6
 8000e74:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8000e76:	689e      	ldr	r6, [r3, #8]
 8000e78:	4d1d      	ldr	r5, [pc, #116]	; (8000ef0 <HAL_ADC_Init+0xf8>)
 8000e7a:	ea05 0506 	and.w	r5, r5, r6
 8000e7e:	ea45 0502 	orr.w	r5, r5, r2
 8000e82:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000e84:	d001      	beq.n	8000e8a <HAL_ADC_Init+0x92>
 8000e86:	2901      	cmp	r1, #1
 8000e88:	d120      	bne.n	8000ecc <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000e8a:	6921      	ldr	r1, [r4, #16]
 8000e8c:	3901      	subs	r1, #1
 8000e8e:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8000e90:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8000e92:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8000e96:	4329      	orrs	r1, r5
 8000e98:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e9a:	6899      	ldr	r1, [r3, #8]
 8000e9c:	4b15      	ldr	r3, [pc, #84]	; (8000ef4 <HAL_ADC_Init+0xfc>)
 8000e9e:	400b      	ands	r3, r1
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	d115      	bne.n	8000ed0 <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8000ea8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000eaa:	f023 0303 	bic.w	r3, r3, #3
 8000eae:	f043 0301 	orr.w	r3, r3, #1
 8000eb2:	62a3      	str	r3, [r4, #40]	; 0x28
 8000eb4:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000eb6:	460e      	mov	r6, r1
 8000eb8:	e7c9      	b.n	8000e4e <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000eba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000ebc:	f043 0320 	orr.w	r3, r3, #32
 8000ec0:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ec2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000ec4:	f043 0301 	orr.w	r3, r3, #1
 8000ec8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000eca:	e7cb      	b.n	8000e64 <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 8000ecc:	2100      	movs	r1, #0
 8000ece:	e7df      	b.n	8000e90 <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 8000ed0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000ed2:	f023 0312 	bic.w	r3, r3, #18
 8000ed6:	f043 0310 	orr.w	r3, r3, #16
 8000eda:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000edc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000ede:	f043 0301 	orr.w	r3, r3, #1
 8000ee2:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8000ee4:	2001      	movs	r0, #1
}
 8000ee6:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ee8:	f043 0310 	orr.w	r3, r3, #16
 8000eec:	62a3      	str	r3, [r4, #40]	; 0x28
 8000eee:	e7f9      	b.n	8000ee4 <HAL_ADC_Init+0xec>
 8000ef0:	ffe1f7fd 	.word	0xffe1f7fd
 8000ef4:	ff1f0efe 	.word	0xff1f0efe

08000ef8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef8:	4a07      	ldr	r2, [pc, #28]	; (8000f18 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000efa:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000efc:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000efe:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f02:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f06:	041b      	lsls	r3, r3, #16
 8000f08:	0c1b      	lsrs	r3, r3, #16
 8000f0a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000f12:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000f14:	60d3      	str	r3, [r2, #12]
 8000f16:	4770      	bx	lr
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f1c:	4b17      	ldr	r3, [pc, #92]	; (8000f7c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f1e:	b530      	push	{r4, r5, lr}
 8000f20:	68dc      	ldr	r4, [r3, #12]
 8000f22:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f26:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f2a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f2c:	2b04      	cmp	r3, #4
 8000f2e:	bf28      	it	cs
 8000f30:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f32:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f34:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f38:	bf98      	it	ls
 8000f3a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f3c:	fa05 f303 	lsl.w	r3, r5, r3
 8000f40:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f44:	bf88      	it	hi
 8000f46:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f48:	4019      	ands	r1, r3
 8000f4a:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f4c:	fa05 f404 	lsl.w	r4, r5, r4
 8000f50:	3c01      	subs	r4, #1
 8000f52:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000f54:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f56:	ea42 0201 	orr.w	r2, r2, r1
 8000f5a:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5e:	bfa9      	itett	ge
 8000f60:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f64:	4b06      	ldrlt	r3, [pc, #24]	; (8000f80 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f66:	b2d2      	uxtbge	r2, r2
 8000f68:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6c:	bfbb      	ittet	lt
 8000f6e:	f000 000f 	andlt.w	r0, r0, #15
 8000f72:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f74:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f78:	541a      	strblt	r2, [r3, r0]
 8000f7a:	bd30      	pop	{r4, r5, pc}
 8000f7c:	e000ed00 	.word	0xe000ed00
 8000f80:	e000ed14 	.word	0xe000ed14

08000f84 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000f84:	2800      	cmp	r0, #0
 8000f86:	db08      	blt.n	8000f9a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f88:	2301      	movs	r3, #1
 8000f8a:	0942      	lsrs	r2, r0, #5
 8000f8c:	f000 001f 	and.w	r0, r0, #31
 8000f90:	fa03 f000 	lsl.w	r0, r3, r0
 8000f94:	4b01      	ldr	r3, [pc, #4]	; (8000f9c <HAL_NVIC_EnableIRQ+0x18>)
 8000f96:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000f9a:	4770      	bx	lr
 8000f9c:	e000e100 	.word	0xe000e100

08000fa0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fa0:	3801      	subs	r0, #1
 8000fa2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000fa6:	d20a      	bcs.n	8000fbe <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa8:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000faa:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fac:	4a06      	ldr	r2, [pc, #24]	; (8000fc8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fae:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fb4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fb6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fb8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000fbe:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	e000e010 	.word	0xe000e010
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000fcc:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000fce:	b330      	cbz	r0, 800101e <HAL_DMA_Init+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000fd0:	2214      	movs	r2, #20
 8000fd2:	6801      	ldr	r1, [r0, #0]
 8000fd4:	4b13      	ldr	r3, [pc, #76]	; (8001024 <HAL_DMA_Init+0x58>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000fd6:	6884      	ldr	r4, [r0, #8]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000fd8:	440b      	add	r3, r1
 8000fda:	fbb3 f3f2 	udiv	r3, r3, r2
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000fe2:	4b11      	ldr	r3, [pc, #68]	; (8001028 <HAL_DMA_Init+0x5c>)
  tmp = hdma->Instance->CCR;
 8000fe4:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 8000fe6:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp |=  hdma->Init.Direction        |
 8000fe8:	6843      	ldr	r3, [r0, #4]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000fea:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
  tmp |=  hdma->Init.Direction        |
 8000fee:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ff0:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000ff2:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ff6:	4323      	orrs	r3, r4
 8000ff8:	6904      	ldr	r4, [r0, #16]
 8000ffa:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ffc:	6944      	ldr	r4, [r0, #20]
 8000ffe:	4323      	orrs	r3, r4
 8001000:	6984      	ldr	r4, [r0, #24]
 8001002:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8001004:	69c4      	ldr	r4, [r0, #28]
 8001006:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8001008:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800100a:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800100c:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800100e:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001010:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001014:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001016:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 800101a:	4618      	mov	r0, r3
 800101c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800101e:	2001      	movs	r0, #1
}
 8001020:	bd10      	pop	{r4, pc}
 8001022:	bf00      	nop
 8001024:	bffdfff8 	.word	0xbffdfff8
 8001028:	40020000 	.word	0x40020000

0800102c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800102c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800102e:	f890 4020 	ldrb.w	r4, [r0, #32]
 8001032:	2c01      	cmp	r4, #1
 8001034:	d035      	beq.n	80010a2 <HAL_DMA_Start_IT+0x76>
 8001036:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001038:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 800103c:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001040:	42a5      	cmp	r5, r4
 8001042:	f04f 0600 	mov.w	r6, #0
 8001046:	f04f 0402 	mov.w	r4, #2
 800104a:	d128      	bne.n	800109e <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800104c:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001050:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001052:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8001054:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001056:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 8001058:	f026 0601 	bic.w	r6, r6, #1
 800105c:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800105e:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 8001060:	40bd      	lsls	r5, r7
 8001062:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001064:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001066:	6843      	ldr	r3, [r0, #4]
 8001068:	6805      	ldr	r5, [r0, #0]
 800106a:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 800106c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800106e:	bf0b      	itete	eq
 8001070:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001072:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001074:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001076:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8001078:	b14b      	cbz	r3, 800108e <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800107a:	6823      	ldr	r3, [r4, #0]
 800107c:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001080:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001082:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001084:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8001086:	f043 0301 	orr.w	r3, r3, #1
 800108a:	602b      	str	r3, [r5, #0]
 800108c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800108e:	6823      	ldr	r3, [r4, #0]
 8001090:	f023 0304 	bic.w	r3, r3, #4
 8001094:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001096:	6823      	ldr	r3, [r4, #0]
 8001098:	f043 030a 	orr.w	r3, r3, #10
 800109c:	e7f0      	b.n	8001080 <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 800109e:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 80010a2:	2002      	movs	r0, #2
}
 80010a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080010a8 <HAL_DMA_IRQHandler>:
{
 80010a8:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80010aa:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80010ac:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80010ae:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80010b0:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80010b2:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80010b4:	4095      	lsls	r5, r2
 80010b6:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 80010b8:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80010ba:	d032      	beq.n	8001122 <HAL_DMA_IRQHandler+0x7a>
 80010bc:	074d      	lsls	r5, r1, #29
 80010be:	d530      	bpl.n	8001122 <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80010c4:	bf5e      	ittt	pl
 80010c6:	681a      	ldrpl	r2, [r3, #0]
 80010c8:	f022 0204 	bicpl.w	r2, r2, #4
 80010cc:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80010ce:	4a3e      	ldr	r2, [pc, #248]	; (80011c8 <HAL_DMA_IRQHandler+0x120>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d019      	beq.n	8001108 <HAL_DMA_IRQHandler+0x60>
 80010d4:	3214      	adds	r2, #20
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d018      	beq.n	800110c <HAL_DMA_IRQHandler+0x64>
 80010da:	3214      	adds	r2, #20
 80010dc:	4293      	cmp	r3, r2
 80010de:	d017      	beq.n	8001110 <HAL_DMA_IRQHandler+0x68>
 80010e0:	3214      	adds	r2, #20
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d017      	beq.n	8001116 <HAL_DMA_IRQHandler+0x6e>
 80010e6:	3214      	adds	r2, #20
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d017      	beq.n	800111c <HAL_DMA_IRQHandler+0x74>
 80010ec:	3214      	adds	r2, #20
 80010ee:	4293      	cmp	r3, r2
 80010f0:	bf0c      	ite	eq
 80010f2:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 80010f6:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 80010fa:	4a34      	ldr	r2, [pc, #208]	; (80011cc <HAL_DMA_IRQHandler+0x124>)
 80010fc:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 80010fe:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8001100:	2b00      	cmp	r3, #0
 8001102:	d05e      	beq.n	80011c2 <HAL_DMA_IRQHandler+0x11a>
}
 8001104:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8001106:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001108:	2304      	movs	r3, #4
 800110a:	e7f6      	b.n	80010fa <HAL_DMA_IRQHandler+0x52>
 800110c:	2340      	movs	r3, #64	; 0x40
 800110e:	e7f4      	b.n	80010fa <HAL_DMA_IRQHandler+0x52>
 8001110:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001114:	e7f1      	b.n	80010fa <HAL_DMA_IRQHandler+0x52>
 8001116:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800111a:	e7ee      	b.n	80010fa <HAL_DMA_IRQHandler+0x52>
 800111c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001120:	e7eb      	b.n	80010fa <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001122:	2502      	movs	r5, #2
 8001124:	4095      	lsls	r5, r2
 8001126:	4225      	tst	r5, r4
 8001128:	d035      	beq.n	8001196 <HAL_DMA_IRQHandler+0xee>
 800112a:	078d      	lsls	r5, r1, #30
 800112c:	d533      	bpl.n	8001196 <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	0694      	lsls	r4, r2, #26
 8001132:	d406      	bmi.n	8001142 <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	f022 020a 	bic.w	r2, r2, #10
 800113a:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800113c:	2201      	movs	r2, #1
 800113e:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001142:	4a21      	ldr	r2, [pc, #132]	; (80011c8 <HAL_DMA_IRQHandler+0x120>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d019      	beq.n	800117c <HAL_DMA_IRQHandler+0xd4>
 8001148:	3214      	adds	r2, #20
 800114a:	4293      	cmp	r3, r2
 800114c:	d018      	beq.n	8001180 <HAL_DMA_IRQHandler+0xd8>
 800114e:	3214      	adds	r2, #20
 8001150:	4293      	cmp	r3, r2
 8001152:	d017      	beq.n	8001184 <HAL_DMA_IRQHandler+0xdc>
 8001154:	3214      	adds	r2, #20
 8001156:	4293      	cmp	r3, r2
 8001158:	d017      	beq.n	800118a <HAL_DMA_IRQHandler+0xe2>
 800115a:	3214      	adds	r2, #20
 800115c:	4293      	cmp	r3, r2
 800115e:	d017      	beq.n	8001190 <HAL_DMA_IRQHandler+0xe8>
 8001160:	3214      	adds	r2, #20
 8001162:	4293      	cmp	r3, r2
 8001164:	bf0c      	ite	eq
 8001166:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 800116a:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 800116e:	4a17      	ldr	r2, [pc, #92]	; (80011cc <HAL_DMA_IRQHandler+0x124>)
 8001170:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8001172:	2300      	movs	r3, #0
 8001174:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8001178:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800117a:	e7c1      	b.n	8001100 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800117c:	2302      	movs	r3, #2
 800117e:	e7f6      	b.n	800116e <HAL_DMA_IRQHandler+0xc6>
 8001180:	2320      	movs	r3, #32
 8001182:	e7f4      	b.n	800116e <HAL_DMA_IRQHandler+0xc6>
 8001184:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001188:	e7f1      	b.n	800116e <HAL_DMA_IRQHandler+0xc6>
 800118a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800118e:	e7ee      	b.n	800116e <HAL_DMA_IRQHandler+0xc6>
 8001190:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001194:	e7eb      	b.n	800116e <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001196:	2508      	movs	r5, #8
 8001198:	4095      	lsls	r5, r2
 800119a:	4225      	tst	r5, r4
 800119c:	d011      	beq.n	80011c2 <HAL_DMA_IRQHandler+0x11a>
 800119e:	0709      	lsls	r1, r1, #28
 80011a0:	d50f      	bpl.n	80011c2 <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011a2:	6819      	ldr	r1, [r3, #0]
 80011a4:	f021 010e 	bic.w	r1, r1, #14
 80011a8:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80011aa:	2301      	movs	r3, #1
 80011ac:	fa03 f202 	lsl.w	r2, r3, r2
 80011b0:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80011b2:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 80011b4:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80011b8:	2300      	movs	r3, #0
 80011ba:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 80011be:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80011c0:	e79e      	b.n	8001100 <HAL_DMA_IRQHandler+0x58>
}
 80011c2:	bc70      	pop	{r4, r5, r6}
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	40020008 	.word	0x40020008
 80011cc:	40020000 	.word	0x40020000

080011d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011d4:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 80011d6:	4626      	mov	r6, r4
 80011d8:	4b66      	ldr	r3, [pc, #408]	; (8001374 <HAL_GPIO_Init+0x1a4>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011da:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 8001384 <HAL_GPIO_Init+0x1b4>
 80011de:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 8001388 <HAL_GPIO_Init+0x1b8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011e2:	680a      	ldr	r2, [r1, #0]
 80011e4:	fa32 f506 	lsrs.w	r5, r2, r6
 80011e8:	d102      	bne.n	80011f0 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 80011ea:	b003      	add	sp, #12
 80011ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80011f0:	f04f 0801 	mov.w	r8, #1
 80011f4:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011f8:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 80011fc:	4590      	cmp	r8, r2
 80011fe:	d17f      	bne.n	8001300 <HAL_GPIO_Init+0x130>
      switch (GPIO_Init->Mode)
 8001200:	684d      	ldr	r5, [r1, #4]
 8001202:	2d12      	cmp	r5, #18
 8001204:	f000 80aa 	beq.w	800135c <HAL_GPIO_Init+0x18c>
 8001208:	f200 8083 	bhi.w	8001312 <HAL_GPIO_Init+0x142>
 800120c:	2d02      	cmp	r5, #2
 800120e:	f000 80a2 	beq.w	8001356 <HAL_GPIO_Init+0x186>
 8001212:	d877      	bhi.n	8001304 <HAL_GPIO_Init+0x134>
 8001214:	2d00      	cmp	r5, #0
 8001216:	f000 8089 	beq.w	800132c <HAL_GPIO_Init+0x15c>
 800121a:	2d01      	cmp	r5, #1
 800121c:	f000 8099 	beq.w	8001352 <HAL_GPIO_Init+0x182>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001220:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001224:	2aff      	cmp	r2, #255	; 0xff
 8001226:	bf93      	iteet	ls
 8001228:	4682      	movls	sl, r0
 800122a:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 800122e:	3d08      	subhi	r5, #8
 8001230:	f8d0 b000 	ldrls.w	fp, [r0]
 8001234:	bf92      	itee	ls
 8001236:	00b5      	lslls	r5, r6, #2
 8001238:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 800123c:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800123e:	fa09 f805 	lsl.w	r8, r9, r5
 8001242:	ea2b 0808 	bic.w	r8, fp, r8
 8001246:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800124a:	bf88      	it	hi
 800124c:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001250:	ea48 0505 	orr.w	r5, r8, r5
 8001254:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001258:	f8d1 a004 	ldr.w	sl, [r1, #4]
 800125c:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001260:	d04e      	beq.n	8001300 <HAL_GPIO_Init+0x130>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001262:	4d45      	ldr	r5, [pc, #276]	; (8001378 <HAL_GPIO_Init+0x1a8>)
 8001264:	4f44      	ldr	r7, [pc, #272]	; (8001378 <HAL_GPIO_Init+0x1a8>)
 8001266:	69ad      	ldr	r5, [r5, #24]
 8001268:	f026 0803 	bic.w	r8, r6, #3
 800126c:	f045 0501 	orr.w	r5, r5, #1
 8001270:	61bd      	str	r5, [r7, #24]
 8001272:	69bd      	ldr	r5, [r7, #24]
 8001274:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8001278:	f005 0501 	and.w	r5, r5, #1
 800127c:	9501      	str	r5, [sp, #4]
 800127e:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001282:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001286:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001288:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 800128c:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001290:	fa09 f90b 	lsl.w	r9, r9, fp
 8001294:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001298:	4d38      	ldr	r5, [pc, #224]	; (800137c <HAL_GPIO_Init+0x1ac>)
 800129a:	42a8      	cmp	r0, r5
 800129c:	d063      	beq.n	8001366 <HAL_GPIO_Init+0x196>
 800129e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80012a2:	42a8      	cmp	r0, r5
 80012a4:	d061      	beq.n	800136a <HAL_GPIO_Init+0x19a>
 80012a6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80012aa:	42a8      	cmp	r0, r5
 80012ac:	d05f      	beq.n	800136e <HAL_GPIO_Init+0x19e>
 80012ae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80012b2:	42a8      	cmp	r0, r5
 80012b4:	bf0c      	ite	eq
 80012b6:	2503      	moveq	r5, #3
 80012b8:	2504      	movne	r5, #4
 80012ba:	fa05 f50b 	lsl.w	r5, r5, fp
 80012be:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80012c2:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80012c6:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012c8:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80012cc:	bf14      	ite	ne
 80012ce:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012d0:	4395      	biceq	r5, r2
 80012d2:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80012d4:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012d6:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80012da:	bf14      	ite	ne
 80012dc:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012de:	4395      	biceq	r5, r2
 80012e0:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80012e2:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012e4:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80012e8:	bf14      	ite	ne
 80012ea:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012ec:	4395      	biceq	r5, r2
 80012ee:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 80012f0:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012f2:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80012f6:	bf14      	ite	ne
 80012f8:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012fa:	ea25 0202 	biceq.w	r2, r5, r2
 80012fe:	60da      	str	r2, [r3, #12]
	position++;
 8001300:	3601      	adds	r6, #1
 8001302:	e76e      	b.n	80011e2 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 8001304:	2d03      	cmp	r5, #3
 8001306:	d022      	beq.n	800134e <HAL_GPIO_Init+0x17e>
 8001308:	2d11      	cmp	r5, #17
 800130a:	d189      	bne.n	8001220 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800130c:	68cc      	ldr	r4, [r1, #12]
 800130e:	3404      	adds	r4, #4
          break;
 8001310:	e786      	b.n	8001220 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8001312:	4f1b      	ldr	r7, [pc, #108]	; (8001380 <HAL_GPIO_Init+0x1b0>)
 8001314:	42bd      	cmp	r5, r7
 8001316:	d009      	beq.n	800132c <HAL_GPIO_Init+0x15c>
 8001318:	d812      	bhi.n	8001340 <HAL_GPIO_Init+0x170>
 800131a:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800138c <HAL_GPIO_Init+0x1bc>
 800131e:	454d      	cmp	r5, r9
 8001320:	d004      	beq.n	800132c <HAL_GPIO_Init+0x15c>
 8001322:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001326:	454d      	cmp	r5, r9
 8001328:	f47f af7a 	bne.w	8001220 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800132c:	688c      	ldr	r4, [r1, #8]
 800132e:	b1c4      	cbz	r4, 8001362 <HAL_GPIO_Init+0x192>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001330:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 8001332:	bf0c      	ite	eq
 8001334:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8001338:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800133c:	2408      	movs	r4, #8
 800133e:	e76f      	b.n	8001220 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8001340:	4575      	cmp	r5, lr
 8001342:	d0f3      	beq.n	800132c <HAL_GPIO_Init+0x15c>
 8001344:	4565      	cmp	r5, ip
 8001346:	d0f1      	beq.n	800132c <HAL_GPIO_Init+0x15c>
 8001348:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8001390 <HAL_GPIO_Init+0x1c0>
 800134c:	e7eb      	b.n	8001326 <HAL_GPIO_Init+0x156>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800134e:	2400      	movs	r4, #0
 8001350:	e766      	b.n	8001220 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001352:	68cc      	ldr	r4, [r1, #12]
          break;
 8001354:	e764      	b.n	8001220 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001356:	68cc      	ldr	r4, [r1, #12]
 8001358:	3408      	adds	r4, #8
          break;
 800135a:	e761      	b.n	8001220 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800135c:	68cc      	ldr	r4, [r1, #12]
 800135e:	340c      	adds	r4, #12
          break;
 8001360:	e75e      	b.n	8001220 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001362:	2404      	movs	r4, #4
 8001364:	e75c      	b.n	8001220 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001366:	2500      	movs	r5, #0
 8001368:	e7a7      	b.n	80012ba <HAL_GPIO_Init+0xea>
 800136a:	2501      	movs	r5, #1
 800136c:	e7a5      	b.n	80012ba <HAL_GPIO_Init+0xea>
 800136e:	2502      	movs	r5, #2
 8001370:	e7a3      	b.n	80012ba <HAL_GPIO_Init+0xea>
 8001372:	bf00      	nop
 8001374:	40010400 	.word	0x40010400
 8001378:	40021000 	.word	0x40021000
 800137c:	40010800 	.word	0x40010800
 8001380:	10210000 	.word	0x10210000
 8001384:	10310000 	.word	0x10310000
 8001388:	10320000 	.word	0x10320000
 800138c:	10110000 	.word	0x10110000
 8001390:	10220000 	.word	0x10220000

08001394 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001394:	6883      	ldr	r3, [r0, #8]
 8001396:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001398:	bf14      	ite	ne
 800139a:	2001      	movne	r0, #1
 800139c:	2000      	moveq	r0, #0
 800139e:	4770      	bx	lr

080013a0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013a0:	b10a      	cbz	r2, 80013a6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013a2:	6101      	str	r1, [r0, #16]
 80013a4:	4770      	bx	lr
 80013a6:	0409      	lsls	r1, r1, #16
 80013a8:	e7fb      	b.n	80013a2 <HAL_GPIO_WritePin+0x2>
	...

080013ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013b0:	4605      	mov	r5, r0
 80013b2:	b908      	cbnz	r0, 80013b8 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 80013b4:	2001      	movs	r0, #1
 80013b6:	e03c      	b.n	8001432 <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013b8:	6803      	ldr	r3, [r0, #0]
 80013ba:	07db      	lsls	r3, r3, #31
 80013bc:	d410      	bmi.n	80013e0 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013be:	682b      	ldr	r3, [r5, #0]
 80013c0:	079f      	lsls	r7, r3, #30
 80013c2:	d45d      	bmi.n	8001480 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013c4:	682b      	ldr	r3, [r5, #0]
 80013c6:	0719      	lsls	r1, r3, #28
 80013c8:	f100 8094 	bmi.w	80014f4 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013cc:	682b      	ldr	r3, [r5, #0]
 80013ce:	075a      	lsls	r2, r3, #29
 80013d0:	f100 80be 	bmi.w	8001550 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013d4:	69e8      	ldr	r0, [r5, #28]
 80013d6:	2800      	cmp	r0, #0
 80013d8:	f040 812c 	bne.w	8001634 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 80013dc:	2000      	movs	r0, #0
 80013de:	e028      	b.n	8001432 <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013e0:	4c8f      	ldr	r4, [pc, #572]	; (8001620 <HAL_RCC_OscConfig+0x274>)
 80013e2:	6863      	ldr	r3, [r4, #4]
 80013e4:	f003 030c 	and.w	r3, r3, #12
 80013e8:	2b04      	cmp	r3, #4
 80013ea:	d007      	beq.n	80013fc <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013ec:	6863      	ldr	r3, [r4, #4]
 80013ee:	f003 030c 	and.w	r3, r3, #12
 80013f2:	2b08      	cmp	r3, #8
 80013f4:	d109      	bne.n	800140a <HAL_RCC_OscConfig+0x5e>
 80013f6:	6863      	ldr	r3, [r4, #4]
 80013f8:	03de      	lsls	r6, r3, #15
 80013fa:	d506      	bpl.n	800140a <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013fc:	6823      	ldr	r3, [r4, #0]
 80013fe:	039c      	lsls	r4, r3, #14
 8001400:	d5dd      	bpl.n	80013be <HAL_RCC_OscConfig+0x12>
 8001402:	686b      	ldr	r3, [r5, #4]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d1da      	bne.n	80013be <HAL_RCC_OscConfig+0x12>
 8001408:	e7d4      	b.n	80013b4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800140a:	686b      	ldr	r3, [r5, #4]
 800140c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001410:	d112      	bne.n	8001438 <HAL_RCC_OscConfig+0x8c>
 8001412:	6823      	ldr	r3, [r4, #0]
 8001414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001418:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800141a:	f7ff fb2d 	bl	8000a78 <HAL_GetTick>
 800141e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001420:	6823      	ldr	r3, [r4, #0]
 8001422:	0398      	lsls	r0, r3, #14
 8001424:	d4cb      	bmi.n	80013be <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001426:	f7ff fb27 	bl	8000a78 <HAL_GetTick>
 800142a:	1b80      	subs	r0, r0, r6
 800142c:	2864      	cmp	r0, #100	; 0x64
 800142e:	d9f7      	bls.n	8001420 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8001430:	2003      	movs	r0, #3
}
 8001432:	b002      	add	sp, #8
 8001434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001438:	b99b      	cbnz	r3, 8001462 <HAL_RCC_OscConfig+0xb6>
 800143a:	6823      	ldr	r3, [r4, #0]
 800143c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001440:	6023      	str	r3, [r4, #0]
 8001442:	6823      	ldr	r3, [r4, #0]
 8001444:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001448:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800144a:	f7ff fb15 	bl	8000a78 <HAL_GetTick>
 800144e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001450:	6823      	ldr	r3, [r4, #0]
 8001452:	0399      	lsls	r1, r3, #14
 8001454:	d5b3      	bpl.n	80013be <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001456:	f7ff fb0f 	bl	8000a78 <HAL_GetTick>
 800145a:	1b80      	subs	r0, r0, r6
 800145c:	2864      	cmp	r0, #100	; 0x64
 800145e:	d9f7      	bls.n	8001450 <HAL_RCC_OscConfig+0xa4>
 8001460:	e7e6      	b.n	8001430 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001462:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001466:	6823      	ldr	r3, [r4, #0]
 8001468:	d103      	bne.n	8001472 <HAL_RCC_OscConfig+0xc6>
 800146a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800146e:	6023      	str	r3, [r4, #0]
 8001470:	e7cf      	b.n	8001412 <HAL_RCC_OscConfig+0x66>
 8001472:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001476:	6023      	str	r3, [r4, #0]
 8001478:	6823      	ldr	r3, [r4, #0]
 800147a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800147e:	e7cb      	b.n	8001418 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001480:	4c67      	ldr	r4, [pc, #412]	; (8001620 <HAL_RCC_OscConfig+0x274>)
 8001482:	6863      	ldr	r3, [r4, #4]
 8001484:	f013 0f0c 	tst.w	r3, #12
 8001488:	d007      	beq.n	800149a <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800148a:	6863      	ldr	r3, [r4, #4]
 800148c:	f003 030c 	and.w	r3, r3, #12
 8001490:	2b08      	cmp	r3, #8
 8001492:	d110      	bne.n	80014b6 <HAL_RCC_OscConfig+0x10a>
 8001494:	6863      	ldr	r3, [r4, #4]
 8001496:	03da      	lsls	r2, r3, #15
 8001498:	d40d      	bmi.n	80014b6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800149a:	6823      	ldr	r3, [r4, #0]
 800149c:	079b      	lsls	r3, r3, #30
 800149e:	d502      	bpl.n	80014a6 <HAL_RCC_OscConfig+0xfa>
 80014a0:	692b      	ldr	r3, [r5, #16]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d186      	bne.n	80013b4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014a6:	6823      	ldr	r3, [r4, #0]
 80014a8:	696a      	ldr	r2, [r5, #20]
 80014aa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80014ae:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80014b2:	6023      	str	r3, [r4, #0]
 80014b4:	e786      	b.n	80013c4 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014b6:	692a      	ldr	r2, [r5, #16]
 80014b8:	4b5a      	ldr	r3, [pc, #360]	; (8001624 <HAL_RCC_OscConfig+0x278>)
 80014ba:	b16a      	cbz	r2, 80014d8 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 80014bc:	2201      	movs	r2, #1
 80014be:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80014c0:	f7ff fada 	bl	8000a78 <HAL_GetTick>
 80014c4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c6:	6823      	ldr	r3, [r4, #0]
 80014c8:	079f      	lsls	r7, r3, #30
 80014ca:	d4ec      	bmi.n	80014a6 <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014cc:	f7ff fad4 	bl	8000a78 <HAL_GetTick>
 80014d0:	1b80      	subs	r0, r0, r6
 80014d2:	2802      	cmp	r0, #2
 80014d4:	d9f7      	bls.n	80014c6 <HAL_RCC_OscConfig+0x11a>
 80014d6:	e7ab      	b.n	8001430 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80014d8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80014da:	f7ff facd 	bl	8000a78 <HAL_GetTick>
 80014de:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014e0:	6823      	ldr	r3, [r4, #0]
 80014e2:	0798      	lsls	r0, r3, #30
 80014e4:	f57f af6e 	bpl.w	80013c4 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014e8:	f7ff fac6 	bl	8000a78 <HAL_GetTick>
 80014ec:	1b80      	subs	r0, r0, r6
 80014ee:	2802      	cmp	r0, #2
 80014f0:	d9f6      	bls.n	80014e0 <HAL_RCC_OscConfig+0x134>
 80014f2:	e79d      	b.n	8001430 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014f4:	69aa      	ldr	r2, [r5, #24]
 80014f6:	4c4a      	ldr	r4, [pc, #296]	; (8001620 <HAL_RCC_OscConfig+0x274>)
 80014f8:	4b4b      	ldr	r3, [pc, #300]	; (8001628 <HAL_RCC_OscConfig+0x27c>)
 80014fa:	b1da      	cbz	r2, 8001534 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 80014fc:	2201      	movs	r2, #1
 80014fe:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001500:	f7ff faba 	bl	8000a78 <HAL_GetTick>
 8001504:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001506:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001508:	079b      	lsls	r3, r3, #30
 800150a:	d50d      	bpl.n	8001528 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800150c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001510:	4b46      	ldr	r3, [pc, #280]	; (800162c <HAL_RCC_OscConfig+0x280>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	fbb3 f3f2 	udiv	r3, r3, r2
 8001518:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800151a:	bf00      	nop
  }
  while (Delay --);
 800151c:	9b01      	ldr	r3, [sp, #4]
 800151e:	1e5a      	subs	r2, r3, #1
 8001520:	9201      	str	r2, [sp, #4]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1f9      	bne.n	800151a <HAL_RCC_OscConfig+0x16e>
 8001526:	e751      	b.n	80013cc <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001528:	f7ff faa6 	bl	8000a78 <HAL_GetTick>
 800152c:	1b80      	subs	r0, r0, r6
 800152e:	2802      	cmp	r0, #2
 8001530:	d9e9      	bls.n	8001506 <HAL_RCC_OscConfig+0x15a>
 8001532:	e77d      	b.n	8001430 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8001534:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001536:	f7ff fa9f 	bl	8000a78 <HAL_GetTick>
 800153a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800153c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800153e:	079f      	lsls	r7, r3, #30
 8001540:	f57f af44 	bpl.w	80013cc <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001544:	f7ff fa98 	bl	8000a78 <HAL_GetTick>
 8001548:	1b80      	subs	r0, r0, r6
 800154a:	2802      	cmp	r0, #2
 800154c:	d9f6      	bls.n	800153c <HAL_RCC_OscConfig+0x190>
 800154e:	e76f      	b.n	8001430 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001550:	4c33      	ldr	r4, [pc, #204]	; (8001620 <HAL_RCC_OscConfig+0x274>)
 8001552:	69e3      	ldr	r3, [r4, #28]
 8001554:	00d8      	lsls	r0, r3, #3
 8001556:	d424      	bmi.n	80015a2 <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8001558:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800155a:	69e3      	ldr	r3, [r4, #28]
 800155c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001560:	61e3      	str	r3, [r4, #28]
 8001562:	69e3      	ldr	r3, [r4, #28]
 8001564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001568:	9300      	str	r3, [sp, #0]
 800156a:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800156c:	4e30      	ldr	r6, [pc, #192]	; (8001630 <HAL_RCC_OscConfig+0x284>)
 800156e:	6833      	ldr	r3, [r6, #0]
 8001570:	05d9      	lsls	r1, r3, #23
 8001572:	d518      	bpl.n	80015a6 <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001574:	68eb      	ldr	r3, [r5, #12]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d126      	bne.n	80015c8 <HAL_RCC_OscConfig+0x21c>
 800157a:	6a23      	ldr	r3, [r4, #32]
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001582:	f7ff fa79 	bl	8000a78 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001586:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800158a:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800158c:	6a23      	ldr	r3, [r4, #32]
 800158e:	079b      	lsls	r3, r3, #30
 8001590:	d53f      	bpl.n	8001612 <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 8001592:	2f00      	cmp	r7, #0
 8001594:	f43f af1e 	beq.w	80013d4 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001598:	69e3      	ldr	r3, [r4, #28]
 800159a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800159e:	61e3      	str	r3, [r4, #28]
 80015a0:	e718      	b.n	80013d4 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 80015a2:	2700      	movs	r7, #0
 80015a4:	e7e2      	b.n	800156c <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015a6:	6833      	ldr	r3, [r6, #0]
 80015a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ac:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80015ae:	f7ff fa63 	bl	8000a78 <HAL_GetTick>
 80015b2:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b4:	6833      	ldr	r3, [r6, #0]
 80015b6:	05da      	lsls	r2, r3, #23
 80015b8:	d4dc      	bmi.n	8001574 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015ba:	f7ff fa5d 	bl	8000a78 <HAL_GetTick>
 80015be:	eba0 0008 	sub.w	r0, r0, r8
 80015c2:	2864      	cmp	r0, #100	; 0x64
 80015c4:	d9f6      	bls.n	80015b4 <HAL_RCC_OscConfig+0x208>
 80015c6:	e733      	b.n	8001430 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015c8:	b9ab      	cbnz	r3, 80015f6 <HAL_RCC_OscConfig+0x24a>
 80015ca:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015cc:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015d0:	f023 0301 	bic.w	r3, r3, #1
 80015d4:	6223      	str	r3, [r4, #32]
 80015d6:	6a23      	ldr	r3, [r4, #32]
 80015d8:	f023 0304 	bic.w	r3, r3, #4
 80015dc:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80015de:	f7ff fa4b 	bl	8000a78 <HAL_GetTick>
 80015e2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015e4:	6a23      	ldr	r3, [r4, #32]
 80015e6:	0798      	lsls	r0, r3, #30
 80015e8:	d5d3      	bpl.n	8001592 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015ea:	f7ff fa45 	bl	8000a78 <HAL_GetTick>
 80015ee:	1b80      	subs	r0, r0, r6
 80015f0:	4540      	cmp	r0, r8
 80015f2:	d9f7      	bls.n	80015e4 <HAL_RCC_OscConfig+0x238>
 80015f4:	e71c      	b.n	8001430 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015f6:	2b05      	cmp	r3, #5
 80015f8:	6a23      	ldr	r3, [r4, #32]
 80015fa:	d103      	bne.n	8001604 <HAL_RCC_OscConfig+0x258>
 80015fc:	f043 0304 	orr.w	r3, r3, #4
 8001600:	6223      	str	r3, [r4, #32]
 8001602:	e7ba      	b.n	800157a <HAL_RCC_OscConfig+0x1ce>
 8001604:	f023 0301 	bic.w	r3, r3, #1
 8001608:	6223      	str	r3, [r4, #32]
 800160a:	6a23      	ldr	r3, [r4, #32]
 800160c:	f023 0304 	bic.w	r3, r3, #4
 8001610:	e7b6      	b.n	8001580 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001612:	f7ff fa31 	bl	8000a78 <HAL_GetTick>
 8001616:	eba0 0008 	sub.w	r0, r0, r8
 800161a:	42b0      	cmp	r0, r6
 800161c:	d9b6      	bls.n	800158c <HAL_RCC_OscConfig+0x1e0>
 800161e:	e707      	b.n	8001430 <HAL_RCC_OscConfig+0x84>
 8001620:	40021000 	.word	0x40021000
 8001624:	42420000 	.word	0x42420000
 8001628:	42420480 	.word	0x42420480
 800162c:	20000008 	.word	0x20000008
 8001630:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001634:	4b2a      	ldr	r3, [pc, #168]	; (80016e0 <HAL_RCC_OscConfig+0x334>)
 8001636:	685a      	ldr	r2, [r3, #4]
 8001638:	461c      	mov	r4, r3
 800163a:	f002 020c 	and.w	r2, r2, #12
 800163e:	2a08      	cmp	r2, #8
 8001640:	d03d      	beq.n	80016be <HAL_RCC_OscConfig+0x312>
 8001642:	2300      	movs	r3, #0
 8001644:	4e27      	ldr	r6, [pc, #156]	; (80016e4 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001646:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001648:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800164a:	d12b      	bne.n	80016a4 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 800164c:	f7ff fa14 	bl	8000a78 <HAL_GetTick>
 8001650:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001652:	6823      	ldr	r3, [r4, #0]
 8001654:	0199      	lsls	r1, r3, #6
 8001656:	d41f      	bmi.n	8001698 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001658:	6a2b      	ldr	r3, [r5, #32]
 800165a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800165e:	d105      	bne.n	800166c <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001660:	6862      	ldr	r2, [r4, #4]
 8001662:	68a9      	ldr	r1, [r5, #8]
 8001664:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001668:	430a      	orrs	r2, r1
 800166a:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800166c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800166e:	6862      	ldr	r2, [r4, #4]
 8001670:	430b      	orrs	r3, r1
 8001672:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001676:	4313      	orrs	r3, r2
 8001678:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800167a:	2301      	movs	r3, #1
 800167c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800167e:	f7ff f9fb 	bl	8000a78 <HAL_GetTick>
 8001682:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001684:	6823      	ldr	r3, [r4, #0]
 8001686:	019a      	lsls	r2, r3, #6
 8001688:	f53f aea8 	bmi.w	80013dc <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800168c:	f7ff f9f4 	bl	8000a78 <HAL_GetTick>
 8001690:	1b40      	subs	r0, r0, r5
 8001692:	2802      	cmp	r0, #2
 8001694:	d9f6      	bls.n	8001684 <HAL_RCC_OscConfig+0x2d8>
 8001696:	e6cb      	b.n	8001430 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001698:	f7ff f9ee 	bl	8000a78 <HAL_GetTick>
 800169c:	1bc0      	subs	r0, r0, r7
 800169e:	2802      	cmp	r0, #2
 80016a0:	d9d7      	bls.n	8001652 <HAL_RCC_OscConfig+0x2a6>
 80016a2:	e6c5      	b.n	8001430 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 80016a4:	f7ff f9e8 	bl	8000a78 <HAL_GetTick>
 80016a8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016aa:	6823      	ldr	r3, [r4, #0]
 80016ac:	019b      	lsls	r3, r3, #6
 80016ae:	f57f ae95 	bpl.w	80013dc <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016b2:	f7ff f9e1 	bl	8000a78 <HAL_GetTick>
 80016b6:	1b40      	subs	r0, r0, r5
 80016b8:	2802      	cmp	r0, #2
 80016ba:	d9f6      	bls.n	80016aa <HAL_RCC_OscConfig+0x2fe>
 80016bc:	e6b8      	b.n	8001430 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016be:	2801      	cmp	r0, #1
 80016c0:	f43f aeb7 	beq.w	8001432 <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 80016c4:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016c6:	6a2b      	ldr	r3, [r5, #32]
 80016c8:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 80016cc:	429a      	cmp	r2, r3
 80016ce:	f47f ae71 	bne.w	80013b4 <HAL_RCC_OscConfig+0x8>
 80016d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80016d4:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 80016d8:	1ac0      	subs	r0, r0, r3
 80016da:	bf18      	it	ne
 80016dc:	2001      	movne	r0, #1
 80016de:	e6a8      	b.n	8001432 <HAL_RCC_OscConfig+0x86>
 80016e0:	40021000 	.word	0x40021000
 80016e4:	42420060 	.word	0x42420060

080016e8 <HAL_RCC_GetSysClockFreq>:
{
 80016e8:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80016ea:	4b19      	ldr	r3, [pc, #100]	; (8001750 <HAL_RCC_GetSysClockFreq+0x68>)
{
 80016ec:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80016ee:	ac02      	add	r4, sp, #8
 80016f0:	f103 0510 	add.w	r5, r3, #16
 80016f4:	4622      	mov	r2, r4
 80016f6:	6818      	ldr	r0, [r3, #0]
 80016f8:	6859      	ldr	r1, [r3, #4]
 80016fa:	3308      	adds	r3, #8
 80016fc:	c203      	stmia	r2!, {r0, r1}
 80016fe:	42ab      	cmp	r3, r5
 8001700:	4614      	mov	r4, r2
 8001702:	d1f7      	bne.n	80016f4 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001704:	2301      	movs	r3, #1
 8001706:	f88d 3004 	strb.w	r3, [sp, #4]
 800170a:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 800170c:	4911      	ldr	r1, [pc, #68]	; (8001754 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800170e:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8001712:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001714:	f003 020c 	and.w	r2, r3, #12
 8001718:	2a08      	cmp	r2, #8
 800171a:	d117      	bne.n	800174c <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800171c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001720:	a806      	add	r0, sp, #24
 8001722:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001724:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001726:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800172a:	d50c      	bpl.n	8001746 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800172c:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800172e:	480a      	ldr	r0, [pc, #40]	; (8001758 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001730:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001734:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001736:	aa06      	add	r2, sp, #24
 8001738:	4413      	add	r3, r2
 800173a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800173e:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001742:	b007      	add	sp, #28
 8001744:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001746:	4805      	ldr	r0, [pc, #20]	; (800175c <HAL_RCC_GetSysClockFreq+0x74>)
 8001748:	4350      	muls	r0, r2
 800174a:	e7fa      	b.n	8001742 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 800174c:	4802      	ldr	r0, [pc, #8]	; (8001758 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 800174e:	e7f8      	b.n	8001742 <HAL_RCC_GetSysClockFreq+0x5a>
 8001750:	080032b4 	.word	0x080032b4
 8001754:	40021000 	.word	0x40021000
 8001758:	007a1200 	.word	0x007a1200
 800175c:	003d0900 	.word	0x003d0900

08001760 <HAL_RCC_ClockConfig>:
{
 8001760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001764:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001766:	4604      	mov	r4, r0
 8001768:	b910      	cbnz	r0, 8001770 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800176a:	2001      	movs	r0, #1
 800176c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001770:	4a45      	ldr	r2, [pc, #276]	; (8001888 <HAL_RCC_ClockConfig+0x128>)
 8001772:	6813      	ldr	r3, [r2, #0]
 8001774:	f003 0307 	and.w	r3, r3, #7
 8001778:	428b      	cmp	r3, r1
 800177a:	d329      	bcc.n	80017d0 <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800177c:	6821      	ldr	r1, [r4, #0]
 800177e:	078e      	lsls	r6, r1, #30
 8001780:	d431      	bmi.n	80017e6 <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001782:	07ca      	lsls	r2, r1, #31
 8001784:	d444      	bmi.n	8001810 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001786:	4a40      	ldr	r2, [pc, #256]	; (8001888 <HAL_RCC_ClockConfig+0x128>)
 8001788:	6813      	ldr	r3, [r2, #0]
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	429d      	cmp	r5, r3
 8001790:	d367      	bcc.n	8001862 <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001792:	6822      	ldr	r2, [r4, #0]
 8001794:	4d3d      	ldr	r5, [pc, #244]	; (800188c <HAL_RCC_ClockConfig+0x12c>)
 8001796:	f012 0f04 	tst.w	r2, #4
 800179a:	d16e      	bne.n	800187a <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800179c:	0713      	lsls	r3, r2, #28
 800179e:	d506      	bpl.n	80017ae <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017a0:	686b      	ldr	r3, [r5, #4]
 80017a2:	6922      	ldr	r2, [r4, #16]
 80017a4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80017a8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80017ac:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017ae:	f7ff ff9b 	bl	80016e8 <HAL_RCC_GetSysClockFreq>
 80017b2:	686b      	ldr	r3, [r5, #4]
 80017b4:	4a36      	ldr	r2, [pc, #216]	; (8001890 <HAL_RCC_ClockConfig+0x130>)
 80017b6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80017ba:	5cd3      	ldrb	r3, [r2, r3]
 80017bc:	40d8      	lsrs	r0, r3
 80017be:	4b35      	ldr	r3, [pc, #212]	; (8001894 <HAL_RCC_ClockConfig+0x134>)
 80017c0:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80017c2:	4b35      	ldr	r3, [pc, #212]	; (8001898 <HAL_RCC_ClockConfig+0x138>)
 80017c4:	6818      	ldr	r0, [r3, #0]
 80017c6:	f7ff f915 	bl	80009f4 <HAL_InitTick>
  return HAL_OK;
 80017ca:	2000      	movs	r0, #0
 80017cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017d0:	6813      	ldr	r3, [r2, #0]
 80017d2:	f023 0307 	bic.w	r3, r3, #7
 80017d6:	430b      	orrs	r3, r1
 80017d8:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017da:	6813      	ldr	r3, [r2, #0]
 80017dc:	f003 0307 	and.w	r3, r3, #7
 80017e0:	4299      	cmp	r1, r3
 80017e2:	d1c2      	bne.n	800176a <HAL_RCC_ClockConfig+0xa>
 80017e4:	e7ca      	b.n	800177c <HAL_RCC_ClockConfig+0x1c>
 80017e6:	4b29      	ldr	r3, [pc, #164]	; (800188c <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017e8:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017ec:	bf1e      	ittt	ne
 80017ee:	685a      	ldrne	r2, [r3, #4]
 80017f0:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80017f4:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017f6:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017f8:	bf42      	ittt	mi
 80017fa:	685a      	ldrmi	r2, [r3, #4]
 80017fc:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8001800:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001802:	685a      	ldr	r2, [r3, #4]
 8001804:	68a0      	ldr	r0, [r4, #8]
 8001806:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800180a:	4302      	orrs	r2, r0
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	e7b8      	b.n	8001782 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001810:	6862      	ldr	r2, [r4, #4]
 8001812:	4e1e      	ldr	r6, [pc, #120]	; (800188c <HAL_RCC_ClockConfig+0x12c>)
 8001814:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001816:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001818:	d11b      	bne.n	8001852 <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800181a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800181e:	d0a4      	beq.n	800176a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001820:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001822:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001826:	f023 0303 	bic.w	r3, r3, #3
 800182a:	4313      	orrs	r3, r2
 800182c:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800182e:	f7ff f923 	bl	8000a78 <HAL_GetTick>
 8001832:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001834:	6873      	ldr	r3, [r6, #4]
 8001836:	6862      	ldr	r2, [r4, #4]
 8001838:	f003 030c 	and.w	r3, r3, #12
 800183c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001840:	d0a1      	beq.n	8001786 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001842:	f7ff f919 	bl	8000a78 <HAL_GetTick>
 8001846:	1bc0      	subs	r0, r0, r7
 8001848:	4540      	cmp	r0, r8
 800184a:	d9f3      	bls.n	8001834 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 800184c:	2003      	movs	r0, #3
}
 800184e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001852:	2a02      	cmp	r2, #2
 8001854:	d102      	bne.n	800185c <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001856:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800185a:	e7e0      	b.n	800181e <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800185c:	f013 0f02 	tst.w	r3, #2
 8001860:	e7dd      	b.n	800181e <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001862:	6813      	ldr	r3, [r2, #0]
 8001864:	f023 0307 	bic.w	r3, r3, #7
 8001868:	432b      	orrs	r3, r5
 800186a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800186c:	6813      	ldr	r3, [r2, #0]
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	429d      	cmp	r5, r3
 8001874:	f47f af79 	bne.w	800176a <HAL_RCC_ClockConfig+0xa>
 8001878:	e78b      	b.n	8001792 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800187a:	686b      	ldr	r3, [r5, #4]
 800187c:	68e1      	ldr	r1, [r4, #12]
 800187e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001882:	430b      	orrs	r3, r1
 8001884:	606b      	str	r3, [r5, #4]
 8001886:	e789      	b.n	800179c <HAL_RCC_ClockConfig+0x3c>
 8001888:	40022000 	.word	0x40022000
 800188c:	40021000 	.word	0x40021000
 8001890:	080032d6 	.word	0x080032d6
 8001894:	20000008 	.word	0x20000008
 8001898:	20000004 	.word	0x20000004

0800189c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800189c:	4b04      	ldr	r3, [pc, #16]	; (80018b0 <HAL_RCC_GetPCLK1Freq+0x14>)
 800189e:	4a05      	ldr	r2, [pc, #20]	; (80018b4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80018a6:	5cd3      	ldrb	r3, [r2, r3]
 80018a8:	4a03      	ldr	r2, [pc, #12]	; (80018b8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80018aa:	6810      	ldr	r0, [r2, #0]
}
 80018ac:	40d8      	lsrs	r0, r3
 80018ae:	4770      	bx	lr
 80018b0:	40021000 	.word	0x40021000
 80018b4:	080032e6 	.word	0x080032e6
 80018b8:	20000008 	.word	0x20000008

080018bc <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80018bc:	4b04      	ldr	r3, [pc, #16]	; (80018d0 <HAL_RCC_GetPCLK2Freq+0x14>)
 80018be:	4a05      	ldr	r2, [pc, #20]	; (80018d4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80018c6:	5cd3      	ldrb	r3, [r2, r3]
 80018c8:	4a03      	ldr	r2, [pc, #12]	; (80018d8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80018ca:	6810      	ldr	r0, [r2, #0]
}
 80018cc:	40d8      	lsrs	r0, r3
 80018ce:	4770      	bx	lr
 80018d0:	40021000 	.word	0x40021000
 80018d4:	080032e6 	.word	0x080032e6
 80018d8:	20000008 	.word	0x20000008

080018dc <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80018dc:	6803      	ldr	r3, [r0, #0]
{
 80018de:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80018e2:	07d9      	lsls	r1, r3, #31
{
 80018e4:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80018e6:	d520      	bpl.n	800192a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018e8:	4c35      	ldr	r4, [pc, #212]	; (80019c0 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80018ea:	69e3      	ldr	r3, [r4, #28]
 80018ec:	00da      	lsls	r2, r3, #3
 80018ee:	d432      	bmi.n	8001956 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80018f0:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80018f2:	69e3      	ldr	r3, [r4, #28]
 80018f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f8:	61e3      	str	r3, [r4, #28]
 80018fa:	69e3      	ldr	r3, [r4, #28]
 80018fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001900:	9301      	str	r3, [sp, #4]
 8001902:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001904:	4e2f      	ldr	r6, [pc, #188]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001906:	6833      	ldr	r3, [r6, #0]
 8001908:	05db      	lsls	r3, r3, #23
 800190a:	d526      	bpl.n	800195a <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800190c:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800190e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001912:	d136      	bne.n	8001982 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001914:	6a23      	ldr	r3, [r4, #32]
 8001916:	686a      	ldr	r2, [r5, #4]
 8001918:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800191c:	4313      	orrs	r3, r2
 800191e:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001920:	b11f      	cbz	r7, 800192a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001922:	69e3      	ldr	r3, [r4, #28]
 8001924:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001928:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800192a:	6828      	ldr	r0, [r5, #0]
 800192c:	0783      	lsls	r3, r0, #30
 800192e:	d506      	bpl.n	800193e <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001930:	4a23      	ldr	r2, [pc, #140]	; (80019c0 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001932:	68a9      	ldr	r1, [r5, #8]
 8001934:	6853      	ldr	r3, [r2, #4]
 8001936:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800193a:	430b      	orrs	r3, r1
 800193c:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800193e:	f010 0010 	ands.w	r0, r0, #16
 8001942:	d01b      	beq.n	800197c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001944:	4a1e      	ldr	r2, [pc, #120]	; (80019c0 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001946:	68e9      	ldr	r1, [r5, #12]
 8001948:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800194a:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800194c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001950:	430b      	orrs	r3, r1
 8001952:	6053      	str	r3, [r2, #4]
 8001954:	e012      	b.n	800197c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8001956:	2700      	movs	r7, #0
 8001958:	e7d4      	b.n	8001904 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800195a:	6833      	ldr	r3, [r6, #0]
 800195c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001960:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001962:	f7ff f889 	bl	8000a78 <HAL_GetTick>
 8001966:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001968:	6833      	ldr	r3, [r6, #0]
 800196a:	05d8      	lsls	r0, r3, #23
 800196c:	d4ce      	bmi.n	800190c <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800196e:	f7ff f883 	bl	8000a78 <HAL_GetTick>
 8001972:	eba0 0008 	sub.w	r0, r0, r8
 8001976:	2864      	cmp	r0, #100	; 0x64
 8001978:	d9f6      	bls.n	8001968 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 800197a:	2003      	movs	r0, #3
}
 800197c:	b002      	add	sp, #8
 800197e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001982:	686a      	ldr	r2, [r5, #4]
 8001984:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001988:	4293      	cmp	r3, r2
 800198a:	d0c3      	beq.n	8001914 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 800198c:	2001      	movs	r0, #1
 800198e:	4a0e      	ldr	r2, [pc, #56]	; (80019c8 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001990:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001992:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001994:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001996:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 800199a:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 800199c:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800199e:	07d9      	lsls	r1, r3, #31
 80019a0:	d5b8      	bpl.n	8001914 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 80019a2:	f7ff f869 	bl	8000a78 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019a6:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80019aa:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019ac:	6a23      	ldr	r3, [r4, #32]
 80019ae:	079a      	lsls	r2, r3, #30
 80019b0:	d4b0      	bmi.n	8001914 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019b2:	f7ff f861 	bl	8000a78 <HAL_GetTick>
 80019b6:	1b80      	subs	r0, r0, r6
 80019b8:	4540      	cmp	r0, r8
 80019ba:	d9f7      	bls.n	80019ac <HAL_RCCEx_PeriphCLKConfig+0xd0>
 80019bc:	e7dd      	b.n	800197a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80019be:	bf00      	nop
 80019c0:	40021000 	.word	0x40021000
 80019c4:	40007000 	.word	0x40007000
 80019c8:	42420440 	.word	0x42420440

080019cc <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80019cc:	6a03      	ldr	r3, [r0, #32]
{
 80019ce:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80019d0:	f023 0301 	bic.w	r3, r3, #1
 80019d4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80019d6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80019d8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80019da:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80019dc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80019de:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80019e2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80019e4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80019e6:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80019ea:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80019ec:	4d0a      	ldr	r5, [pc, #40]	; (8001a18 <TIM_OC1_SetConfig+0x4c>)
 80019ee:	42a8      	cmp	r0, r5
 80019f0:	d10b      	bne.n	8001a0a <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80019f2:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80019f4:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80019f8:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80019fa:	698e      	ldr	r6, [r1, #24]
 80019fc:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80019fe:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8001a02:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8001a04:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001a08:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001a0a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001a0c:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001a0e:	684a      	ldr	r2, [r1, #4]
 8001a10:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001a12:	6203      	str	r3, [r0, #32]
 8001a14:	bd70      	pop	{r4, r5, r6, pc}
 8001a16:	bf00      	nop
 8001a18:	40012c00 	.word	0x40012c00

08001a1c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001a1c:	6a03      	ldr	r3, [r0, #32]
{
 8001a1e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001a20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a24:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001a26:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001a28:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001a2a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001a2c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001a2e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001a32:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001a34:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001a36:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001a3a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001a3e:	4d0b      	ldr	r5, [pc, #44]	; (8001a6c <TIM_OC3_SetConfig+0x50>)
 8001a40:	42a8      	cmp	r0, r5
 8001a42:	d10d      	bne.n	8001a60 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001a44:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001a46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001a4a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001a4e:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001a50:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001a52:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001a56:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8001a58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001a5c:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001a60:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001a62:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001a64:	684a      	ldr	r2, [r1, #4]
 8001a66:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001a68:	6203      	str	r3, [r0, #32]
 8001a6a:	bd70      	pop	{r4, r5, r6, pc}
 8001a6c:	40012c00 	.word	0x40012c00

08001a70 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001a70:	6a03      	ldr	r3, [r0, #32]
{
 8001a72:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001a74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a78:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001a7a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001a7c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001a7e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001a80:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001a82:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001a86:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001a8a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001a8c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001a90:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001a94:	4d06      	ldr	r5, [pc, #24]	; (8001ab0 <TIM_OC4_SetConfig+0x40>)
 8001a96:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001a98:	bf02      	ittt	eq
 8001a9a:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001a9c:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001aa0:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001aa4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001aa6:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001aa8:	684a      	ldr	r2, [r1, #4]
 8001aaa:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001aac:	6203      	str	r3, [r0, #32]
 8001aae:	bd30      	pop	{r4, r5, pc}
 8001ab0:	40012c00 	.word	0x40012c00

08001ab4 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8001ab4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d11c      	bne.n	8001af6 <HAL_TIM_Base_Start+0x42>
  htim->State = HAL_TIM_STATE_BUSY;
 8001abc:	2302      	movs	r3, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001abe:	4a0f      	ldr	r2, [pc, #60]	; (8001afc <HAL_TIM_Base_Start+0x48>)
  htim->State = HAL_TIM_STATE_BUSY;
 8001ac0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ac4:	6803      	ldr	r3, [r0, #0]
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d00a      	beq.n	8001ae0 <HAL_TIM_Base_Start+0x2c>
 8001aca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ace:	d007      	beq.n	8001ae0 <HAL_TIM_Base_Start+0x2c>
 8001ad0:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d003      	beq.n	8001ae0 <HAL_TIM_Base_Start+0x2c>
 8001ad8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d104      	bne.n	8001aea <HAL_TIM_Base_Start+0x36>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ae0:	689a      	ldr	r2, [r3, #8]
 8001ae2:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ae6:	2a06      	cmp	r2, #6
 8001ae8:	d003      	beq.n	8001af2 <HAL_TIM_Base_Start+0x3e>
    __HAL_TIM_ENABLE(htim);
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	f042 0201 	orr.w	r2, r2, #1
 8001af0:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001af2:	2000      	movs	r0, #0
}
 8001af4:	4770      	bx	lr
    return HAL_ERROR;
 8001af6:	2001      	movs	r0, #1
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	40012c00 	.word	0x40012c00

08001b00 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b00:	4a1a      	ldr	r2, [pc, #104]	; (8001b6c <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8001b02:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b04:	4290      	cmp	r0, r2
 8001b06:	d00a      	beq.n	8001b1e <TIM_Base_SetConfig+0x1e>
 8001b08:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001b0c:	d007      	beq.n	8001b1e <TIM_Base_SetConfig+0x1e>
 8001b0e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001b12:	4290      	cmp	r0, r2
 8001b14:	d003      	beq.n	8001b1e <TIM_Base_SetConfig+0x1e>
 8001b16:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b1a:	4290      	cmp	r0, r2
 8001b1c:	d115      	bne.n	8001b4a <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8001b1e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001b24:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b26:	4a11      	ldr	r2, [pc, #68]	; (8001b6c <TIM_Base_SetConfig+0x6c>)
 8001b28:	4290      	cmp	r0, r2
 8001b2a:	d00a      	beq.n	8001b42 <TIM_Base_SetConfig+0x42>
 8001b2c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001b30:	d007      	beq.n	8001b42 <TIM_Base_SetConfig+0x42>
 8001b32:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001b36:	4290      	cmp	r0, r2
 8001b38:	d003      	beq.n	8001b42 <TIM_Base_SetConfig+0x42>
 8001b3a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b3e:	4290      	cmp	r0, r2
 8001b40:	d103      	bne.n	8001b4a <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b42:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b48:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b4a:	694a      	ldr	r2, [r1, #20]
 8001b4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b50:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001b52:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b54:	688b      	ldr	r3, [r1, #8]
 8001b56:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001b58:	680b      	ldr	r3, [r1, #0]
 8001b5a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b5c:	4b03      	ldr	r3, [pc, #12]	; (8001b6c <TIM_Base_SetConfig+0x6c>)
 8001b5e:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8001b60:	bf04      	itt	eq
 8001b62:	690b      	ldreq	r3, [r1, #16]
 8001b64:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001b66:	2301      	movs	r3, #1
 8001b68:	6143      	str	r3, [r0, #20]
 8001b6a:	4770      	bx	lr
 8001b6c:	40012c00 	.word	0x40012c00

08001b70 <HAL_TIM_PWM_Init>:
{
 8001b70:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001b72:	4604      	mov	r4, r0
 8001b74:	b330      	cbz	r0, 8001bc4 <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001b76:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001b7a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001b7e:	b91b      	cbnz	r3, 8001b88 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001b80:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8001b84:	f000 fe58 	bl	8002838 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001b88:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b8a:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001b8c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b90:	1d21      	adds	r1, r4, #4
 8001b92:	f7ff ffb5 	bl	8001b00 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b96:	2301      	movs	r3, #1
  return HAL_OK;
 8001b98:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b9a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b9e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8001ba2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8001ba6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001baa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001bb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001bb6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8001bba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8001bbe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001bc2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001bc4:	2001      	movs	r0, #1
}
 8001bc6:	bd10      	pop	{r4, pc}

08001bc8 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001bc8:	6a03      	ldr	r3, [r0, #32]
{
 8001bca:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001bcc:	f023 0310 	bic.w	r3, r3, #16
 8001bd0:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001bd2:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8001bd4:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001bd6:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001bd8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001bda:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001bde:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001be2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001be4:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001be8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001bec:	4d0b      	ldr	r5, [pc, #44]	; (8001c1c <TIM_OC2_SetConfig+0x54>)
 8001bee:	42a8      	cmp	r0, r5
 8001bf0:	d10d      	bne.n	8001c0e <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001bf2:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001bf4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001bf8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001bfc:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001bfe:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001c00:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001c04:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8001c06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001c0a:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8001c0e:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001c10:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001c12:	684a      	ldr	r2, [r1, #4]
 8001c14:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001c16:	6203      	str	r3, [r0, #32]
 8001c18:	bd70      	pop	{r4, r5, r6, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40012c00 	.word	0x40012c00

08001c20 <HAL_TIM_PWM_ConfigChannel>:
{
 8001c20:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001c22:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001c26:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d054      	beq.n	8001cd6 <HAL_TIM_PWM_ConfigChannel+0xb6>
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8001c32:	2a0c      	cmp	r2, #12
 8001c34:	d818      	bhi.n	8001c68 <HAL_TIM_PWM_ConfigChannel+0x48>
 8001c36:	e8df f002 	tbb	[pc, r2]
 8001c3a:	1707      	.short	0x1707
 8001c3c:	171b1717 	.word	0x171b1717
 8001c40:	172c1717 	.word	0x172c1717
 8001c44:	1717      	.short	0x1717
 8001c46:	3d          	.byte	0x3d
 8001c47:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001c48:	6800      	ldr	r0, [r0, #0]
 8001c4a:	f7ff febf 	bl	80019cc <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001c4e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001c50:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001c52:	699a      	ldr	r2, [r3, #24]
 8001c54:	f042 0208 	orr.w	r2, r2, #8
 8001c58:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001c5a:	699a      	ldr	r2, [r3, #24]
 8001c5c:	f022 0204 	bic.w	r2, r2, #4
 8001c60:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001c62:	699a      	ldr	r2, [r3, #24]
 8001c64:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001c66:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8001c68:	2000      	movs	r0, #0
 8001c6a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8001c6e:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001c70:	6800      	ldr	r0, [r0, #0]
 8001c72:	f7ff ffa9 	bl	8001bc8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001c76:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001c78:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001c7a:	699a      	ldr	r2, [r3, #24]
 8001c7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c80:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001c82:	699a      	ldr	r2, [r3, #24]
 8001c84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c88:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001c8a:	699a      	ldr	r2, [r3, #24]
 8001c8c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001c90:	e7e9      	b.n	8001c66 <HAL_TIM_PWM_ConfigChannel+0x46>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001c92:	6800      	ldr	r0, [r0, #0]
 8001c94:	f7ff fec2 	bl	8001a1c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001c98:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001c9a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001c9c:	69da      	ldr	r2, [r3, #28]
 8001c9e:	f042 0208 	orr.w	r2, r2, #8
 8001ca2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001ca4:	69da      	ldr	r2, [r3, #28]
 8001ca6:	f022 0204 	bic.w	r2, r2, #4
 8001caa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001cac:	69da      	ldr	r2, [r3, #28]
 8001cae:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001cb0:	61da      	str	r2, [r3, #28]
      break;
 8001cb2:	e7d9      	b.n	8001c68 <HAL_TIM_PWM_ConfigChannel+0x48>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001cb4:	6800      	ldr	r0, [r0, #0]
 8001cb6:	f7ff fedb 	bl	8001a70 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001cba:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001cbc:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001cbe:	69da      	ldr	r2, [r3, #28]
 8001cc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001cc6:	69da      	ldr	r2, [r3, #28]
 8001cc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ccc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001cce:	69da      	ldr	r2, [r3, #28]
 8001cd0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001cd4:	e7ec      	b.n	8001cb0 <HAL_TIM_PWM_ConfigChannel+0x90>
  __HAL_LOCK(htim);
 8001cd6:	2002      	movs	r0, #2
}
 8001cd8:	bd38      	pop	{r3, r4, r5, pc}

08001cda <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001cda:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001cdc:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001cde:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001ce0:	f001 011f 	and.w	r1, r1, #31
 8001ce4:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8001ce6:	ea23 0304 	bic.w	r3, r3, r4
 8001cea:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001cec:	6a03      	ldr	r3, [r0, #32]
 8001cee:	408a      	lsls	r2, r1
 8001cf0:	431a      	orrs	r2, r3
 8001cf2:	6202      	str	r2, [r0, #32]
 8001cf4:	bd10      	pop	{r4, pc}
	...

08001cf8 <HAL_TIM_PWM_Start>:
{
 8001cf8:	b510      	push	{r4, lr}
 8001cfa:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001cfc:	b929      	cbnz	r1, 8001d0a <HAL_TIM_PWM_Start+0x12>
 8001cfe:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d01d      	beq.n	8001d42 <HAL_TIM_PWM_Start+0x4a>
    return HAL_ERROR;
 8001d06:	2001      	movs	r0, #1
 8001d08:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001d0a:	2904      	cmp	r1, #4
 8001d0c:	d107      	bne.n	8001d1e <HAL_TIM_PWM_Start+0x26>
 8001d0e:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d1f7      	bne.n	8001d06 <HAL_TIM_PWM_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d16:	2302      	movs	r3, #2
 8001d18:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 8001d1c:	e014      	b.n	8001d48 <HAL_TIM_PWM_Start+0x50>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001d1e:	2908      	cmp	r1, #8
 8001d20:	d107      	bne.n	8001d32 <HAL_TIM_PWM_Start+0x3a>
 8001d22:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d1ed      	bne.n	8001d06 <HAL_TIM_PWM_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8001d30:	e00a      	b.n	8001d48 <HAL_TIM_PWM_Start+0x50>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001d32:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d1e5      	bne.n	8001d06 <HAL_TIM_PWM_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8001d40:	e002      	b.n	8001d48 <HAL_TIM_PWM_Start+0x50>
 8001d42:	2302      	movs	r3, #2
 8001d44:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001d48:	2201      	movs	r2, #1
 8001d4a:	6820      	ldr	r0, [r4, #0]
 8001d4c:	f7ff ffc5 	bl	8001cda <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001d50:	6823      	ldr	r3, [r4, #0]
 8001d52:	4a0e      	ldr	r2, [pc, #56]	; (8001d8c <HAL_TIM_PWM_Start+0x94>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d10a      	bne.n	8001d6e <HAL_TIM_PWM_Start+0x76>
    __HAL_TIM_MOE_ENABLE(htim);
 8001d58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d5e:	645a      	str	r2, [r3, #68]	; 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d60:	689a      	ldr	r2, [r3, #8]
 8001d62:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d66:	2a06      	cmp	r2, #6
 8001d68:	d10b      	bne.n	8001d82 <HAL_TIM_PWM_Start+0x8a>
  return HAL_OK;
 8001d6a:	2000      	movs	r0, #0
 8001d6c:	bd10      	pop	{r4, pc}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d72:	d0f5      	beq.n	8001d60 <HAL_TIM_PWM_Start+0x68>
 8001d74:	4a06      	ldr	r2, [pc, #24]	; (8001d90 <HAL_TIM_PWM_Start+0x98>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d0f2      	beq.n	8001d60 <HAL_TIM_PWM_Start+0x68>
 8001d7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d0ee      	beq.n	8001d60 <HAL_TIM_PWM_Start+0x68>
    __HAL_TIM_ENABLE(htim);
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	f042 0201 	orr.w	r2, r2, #1
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	e7ee      	b.n	8001d6a <HAL_TIM_PWM_Start+0x72>
 8001d8c:	40012c00 	.word	0x40012c00
 8001d90:	40000400 	.word	0x40000400

08001d94 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001d94:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001d98:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	f04f 0302 	mov.w	r3, #2
 8001da0:	d025      	beq.n	8001dee <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 8001da2:	2201      	movs	r2, #1

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001da4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001da8:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001daa:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 8001dac:	685c      	ldr	r4, [r3, #4]
  __HAL_LOCK(htim);
 8001dae:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpcr2 &= ~TIM_CR2_MMS;
 8001db2:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001db6:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 8001db8:	689a      	ldr	r2, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001dba:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dbc:	4c0d      	ldr	r4, [pc, #52]	; (8001df4 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8001dbe:	42a3      	cmp	r3, r4
 8001dc0:	d00a      	beq.n	8001dd8 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8001dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dc6:	d007      	beq.n	8001dd8 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8001dc8:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8001dcc:	42a3      	cmp	r3, r4
 8001dce:	d003      	beq.n	8001dd8 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8001dd0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001dd4:	42a3      	cmp	r3, r4
 8001dd6:	d104      	bne.n	8001de2 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001dd8:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001dda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001dde:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001de0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001de2:	2301      	movs	r3, #1
 8001de4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001de8:	2300      	movs	r3, #0
 8001dea:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001dee:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001df0:	bd30      	pop	{r4, r5, pc}
 8001df2:	bf00      	nop
 8001df4:	40012c00 	.word	0x40012c00

08001df8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001df8:	b538      	push	{r3, r4, r5, lr}
 8001dfa:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001dfc:	6803      	ldr	r3, [r0, #0]
 8001dfe:	68c1      	ldr	r1, [r0, #12]
 8001e00:	691a      	ldr	r2, [r3, #16]
 8001e02:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001e06:	430a      	orrs	r2, r1
 8001e08:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001e0a:	6882      	ldr	r2, [r0, #8]
 8001e0c:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8001e0e:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001e10:	4302      	orrs	r2, r0
 8001e12:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8001e14:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8001e18:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001e1c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e22:	695a      	ldr	r2, [r3, #20]
 8001e24:	69a1      	ldr	r1, [r4, #24]
 8001e26:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001e2e:	4a0e      	ldr	r2, [pc, #56]	; (8001e68 <UART_SetConfig+0x70>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d115      	bne.n	8001e60 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001e34:	f7ff fd42 	bl	80018bc <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e38:	2319      	movs	r3, #25
 8001e3a:	4358      	muls	r0, r3
 8001e3c:	6863      	ldr	r3, [r4, #4]
 8001e3e:	2264      	movs	r2, #100	; 0x64
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	fbb0 f0f3 	udiv	r0, r0, r3
 8001e46:	fbb0 f1f2 	udiv	r1, r0, r2
 8001e4a:	fb02 0311 	mls	r3, r2, r1, r0
 8001e4e:	011b      	lsls	r3, r3, #4
 8001e50:	3332      	adds	r3, #50	; 0x32
 8001e52:	fbb3 f3f2 	udiv	r3, r3, r2
 8001e56:	6825      	ldr	r5, [r4, #0]
 8001e58:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8001e5c:	60ab      	str	r3, [r5, #8]
 8001e5e:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8001e60:	f7ff fd1c 	bl	800189c <HAL_RCC_GetPCLK1Freq>
 8001e64:	e7e8      	b.n	8001e38 <UART_SetConfig+0x40>
 8001e66:	bf00      	nop
 8001e68:	40013800 	.word	0x40013800

08001e6c <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e6e:	4604      	mov	r4, r0
 8001e70:	460e      	mov	r6, r1
 8001e72:	4617      	mov	r7, r2
 8001e74:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e76:	6821      	ldr	r1, [r4, #0]
 8001e78:	680b      	ldr	r3, [r1, #0]
 8001e7a:	ea36 0303 	bics.w	r3, r6, r3
 8001e7e:	d101      	bne.n	8001e84 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8001e80:	2000      	movs	r0, #0
}
 8001e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001e84:	1c6b      	adds	r3, r5, #1
 8001e86:	d0f7      	beq.n	8001e78 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001e88:	b995      	cbnz	r5, 8001eb0 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001e8a:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8001e8c:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001e8e:	68da      	ldr	r2, [r3, #12]
 8001e90:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001e94:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e96:	695a      	ldr	r2, [r3, #20]
 8001e98:	f022 0201 	bic.w	r2, r2, #1
 8001e9c:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001e9e:	2320      	movs	r3, #32
 8001ea0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001ea4:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001eb0:	f7fe fde2 	bl	8000a78 <HAL_GetTick>
 8001eb4:	1bc0      	subs	r0, r0, r7
 8001eb6:	4285      	cmp	r5, r0
 8001eb8:	d2dd      	bcs.n	8001e76 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8001eba:	e7e6      	b.n	8001e8a <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001ebc <HAL_UART_Init>:
{
 8001ebc:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001ebe:	4604      	mov	r4, r0
 8001ec0:	b340      	cbz	r0, 8001f14 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001ec2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001ec6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001eca:	b91b      	cbnz	r3, 8001ed4 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001ecc:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001ed0:	f000 fcec 	bl	80028ac <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001ed4:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001ed6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001ed8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001edc:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8001ede:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8001ee0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001ee4:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001ee6:	f7ff ff87 	bl	8001df8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001eea:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001eec:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001eee:	691a      	ldr	r2, [r3, #16]
 8001ef0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ef4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ef6:	695a      	ldr	r2, [r3, #20]
 8001ef8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001efc:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001efe:	68da      	ldr	r2, [r3, #12]
 8001f00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f04:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001f06:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f08:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001f0a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001f0e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001f12:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001f14:	2001      	movs	r0, #1
}
 8001f16:	bd10      	pop	{r4, pc}

08001f18 <HAL_UART_Transmit>:
{
 8001f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001f1c:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001f1e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8001f22:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8001f24:	2b20      	cmp	r3, #32
{
 8001f26:	460e      	mov	r6, r1
 8001f28:	4691      	mov	r9, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8001f2a:	d14c      	bne.n	8001fc6 <HAL_UART_Transmit+0xae>
    if ((pData == NULL) || (Size == 0U))
 8001f2c:	2900      	cmp	r1, #0
 8001f2e:	d047      	beq.n	8001fc0 <HAL_UART_Transmit+0xa8>
 8001f30:	2a00      	cmp	r2, #0
 8001f32:	d045      	beq.n	8001fc0 <HAL_UART_Transmit+0xa8>
    __HAL_LOCK(huart);
 8001f34:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d044      	beq.n	8001fc6 <HAL_UART_Transmit+0xae>
 8001f3c:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f3e:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 8001f40:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f44:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f46:	63c5      	str	r5, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f48:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001f4c:	f7fe fd94 	bl	8000a78 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f50:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8001f52:	4607      	mov	r7, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize = Size;
 8001f58:	f8a4 9024 	strh.w	r9, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8001f5c:	f8a4 9026 	strh.w	r9, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f60:	d103      	bne.n	8001f6a <HAL_UART_Transmit+0x52>
 8001f62:	6923      	ldr	r3, [r4, #16]
 8001f64:	b90b      	cbnz	r3, 8001f6a <HAL_UART_Transmit+0x52>
 8001f66:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8001f68:	461e      	mov	r6, r3
    __HAL_UNLOCK(huart);
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 8001f70:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	b95b      	cbnz	r3, 8001f8e <HAL_UART_Transmit+0x76>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f76:	4643      	mov	r3, r8
 8001f78:	463a      	mov	r2, r7
 8001f7a:	2140      	movs	r1, #64	; 0x40
 8001f7c:	4620      	mov	r0, r4
 8001f7e:	f7ff ff75 	bl	8001e6c <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001f82:	b958      	cbnz	r0, 8001f9c <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 8001f84:	2320      	movs	r3, #32
 8001f86:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8001f8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f8e:	4643      	mov	r3, r8
 8001f90:	463a      	mov	r2, r7
 8001f92:	2180      	movs	r1, #128	; 0x80
 8001f94:	4620      	mov	r0, r4
 8001f96:	f7ff ff69 	bl	8001e6c <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001f9a:	b110      	cbz	r0, 8001fa2 <HAL_UART_Transmit+0x8a>
        return HAL_TIMEOUT;
 8001f9c:	2003      	movs	r0, #3
 8001f9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001fa2:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8001fa4:	b94e      	cbnz	r6, 8001fba <HAL_UART_Transmit+0xa2>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001fa6:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001faa:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001fae:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8001fb0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	84e3      	strh	r3, [r4, #38]	; 0x26
 8001fb8:	e7da      	b.n	8001f70 <HAL_UART_Transmit+0x58>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001fba:	f816 3b01 	ldrb.w	r3, [r6], #1
 8001fbe:	e7f6      	b.n	8001fae <HAL_UART_Transmit+0x96>
      return  HAL_ERROR;
 8001fc0:	2001      	movs	r0, #1
 8001fc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8001fc6:	2002      	movs	r0, #2
}
 8001fc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001fcc <uint16_t_Read_APPS1>:
	uint16_t apps1_read=0; /* variable to store the sum of the readings */

	/* read the ADC value 10 times*/
	for(int i=0;i<10;i++)
	{
		apps1_read+=ADC_values[APP1];
 8001fcc:	4b04      	ldr	r3, [pc, #16]	; (8001fe0 <uint16_t_Read_APPS1+0x14>)
	}

	/* return the average */
	return (apps1_read/10);
 8001fce:	8818      	ldrh	r0, [r3, #0]

}
 8001fd0:	230a      	movs	r3, #10
	return (apps1_read/10);
 8001fd2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001fd6:	0040      	lsls	r0, r0, #1
 8001fd8:	b280      	uxth	r0, r0
}
 8001fda:	fbb0 f0f3 	udiv	r0, r0, r3
 8001fde:	4770      	bx	lr
 8001fe0:	200001a0 	.word	0x200001a0

08001fe4 <uint16_t_Read_APPS2>:
	uint16_t apps2_read=0;/* variable to store the sum of the readings */

	/* read the ADC value 10 times*/
	for(int i=0;i<10;i++)
	{
		apps2_read+=ADC_values[APP2];
 8001fe4:	4b04      	ldr	r3, [pc, #16]	; (8001ff8 <uint16_t_Read_APPS2+0x14>)
	}

	/* return the average */
	return (apps2_read/10);
 8001fe6:	8858      	ldrh	r0, [r3, #2]

}
 8001fe8:	230a      	movs	r3, #10
	return (apps2_read/10);
 8001fea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001fee:	0040      	lsls	r0, r0, #1
 8001ff0:	b280      	uxth	r0, r0
}
 8001ff2:	fbb0 f0f3 	udiv	r0, r0, r3
 8001ff6:	4770      	bx	lr
 8001ff8:	200001a0 	.word	0x200001a0

08001ffc <Check_Activasion_Logic>:
 * This function to activate the drive mode under the conditions:
 * 1. RTD button has been pressed for 3 seconds
 * 2. The brake angle has a value more than a required one
 */
void Check_Activasion_Logic()
{
 8001ffc:	b570      	push	{r4, r5, r6, lr}
	/* get the time when the RTD button is pressed */
	uint32_t time_on_press=HAL_GetTick();
 8001ffe:	f7fe fd3b 	bl	8000a78 <HAL_GetTick>
 8002002:	4605      	mov	r5, r0

	/* this while is broken when the rtd button is released before 3 seconds or the brakes
	 * pedal is released before 3 seconds */

	//value of angle brakes might be change
	while( (time_difference<3000) && (HAL_GPIO_ReadPin(RTD_BTN_GPIO_Port,RTD_BTN_Pin)) &&  (ADC_values[BRAKE_ANGLE]>VAL_BRAKE_ANGLE_RTD) )
 8002004:	4e18      	ldr	r6, [pc, #96]	; (8002068 <Check_Activasion_Logic+0x6c>)
 8002006:	4c19      	ldr	r4, [pc, #100]	; (800206c <Check_Activasion_Logic+0x70>)
 8002008:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800200c:	4630      	mov	r0, r6
 800200e:	f7ff f9c1 	bl	8001394 <HAL_GPIO_ReadPin>
 8002012:	b340      	cbz	r0, 8002066 <Check_Activasion_Logic+0x6a>
 8002014:	88a3      	ldrh	r3, [r4, #4]
 8002016:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800201a:	d800      	bhi.n	800201e <Check_Activasion_Logic+0x22>
 800201c:	bd70      	pop	{r4, r5, r6, pc}
	{
		time_difference=HAL_GetTick()-time_on_press;
 800201e:	f7fe fd2b 	bl	8000a78 <HAL_GetTick>
	while( (time_difference<3000) && (HAL_GPIO_ReadPin(RTD_BTN_GPIO_Port,RTD_BTN_Pin)) &&  (ADC_values[BRAKE_ANGLE]>VAL_BRAKE_ANGLE_RTD) )
 8002022:	f640 33b7 	movw	r3, #2999	; 0xbb7
		time_difference=HAL_GetTick()-time_on_press;
 8002026:	1b40      	subs	r0, r0, r5
	while( (time_difference<3000) && (HAL_GPIO_ReadPin(RTD_BTN_GPIO_Port,RTD_BTN_Pin)) &&  (ADC_values[BRAKE_ANGLE]>VAL_BRAKE_ANGLE_RTD) )
 8002028:	4298      	cmp	r0, r3
 800202a:	d9ed      	bls.n	8002008 <Check_Activasion_Logic+0xc>

	/* check if the RTD button is pressed with the brakes for 3 seconds to enter the drive mode */
	if(time_difference>=3000)
	{
		/* make the RTD sound for 2 seconds */
		HAL_GPIO_WritePin(RTDS_GPIO_Port,RTDS_Pin,1);
 800202c:	2201      	movs	r2, #1
 800202e:	2104      	movs	r1, #4
 8002030:	480f      	ldr	r0, [pc, #60]	; (8002070 <Check_Activasion_Logic+0x74>)
 8002032:	f7ff f9b5 	bl	80013a0 <HAL_GPIO_WritePin>
		HAL_Delay(2000);
 8002036:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800203a:	f7fe fd23 	bl	8000a84 <HAL_Delay>
		HAL_GPIO_WritePin(RTDS_GPIO_Port,RTDS_Pin,0);
 800203e:	2200      	movs	r2, #0
 8002040:	2104      	movs	r1, #4
 8002042:	480b      	ldr	r0, [pc, #44]	; (8002070 <Check_Activasion_Logic+0x74>)
 8002044:	f7ff f9ac 	bl	80013a0 <HAL_GPIO_WritePin>

		/* wait until the RTD button is released to enter the drive mode */
		while(HAL_GPIO_ReadPin(RTD_BTN_GPIO_Port,RTD_BTN_Pin));
 8002048:	4c07      	ldr	r4, [pc, #28]	; (8002068 <Check_Activasion_Logic+0x6c>)
 800204a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800204e:	4620      	mov	r0, r4
 8002050:	f7ff f9a0 	bl	8001394 <HAL_GPIO_ReadPin>
 8002054:	2800      	cmp	r0, #0
 8002056:	d1f8      	bne.n	800204a <Check_Activasion_Logic+0x4e>

		HAL_Delay(50);
 8002058:	2032      	movs	r0, #50	; 0x32
 800205a:	f7fe fd13 	bl	8000a84 <HAL_Delay>

		/* Enter the drive mode */
		nextStateM=DRIVE;
 800205e:	2203      	movs	r2, #3
 8002060:	4b04      	ldr	r3, [pc, #16]	; (8002074 <Check_Activasion_Logic+0x78>)
 8002062:	701a      	strb	r2, [r3, #0]
	}
}
 8002064:	bd70      	pop	{r4, r5, r6, pc}
 8002066:	bd70      	pop	{r4, r5, r6, pc}
 8002068:	40010c00 	.word	0x40010c00
 800206c:	200001a0 	.word	0x200001a0
 8002070:	40010800 	.word	0x40010800
 8002074:	2000008e 	.word	0x2000008e

08002078 <EVMS_Init>:
 * This function initialize the ADC1 with the ADC values in 3 sequences in DMA
 */
void EVMS_Init()
{
	/* Initialize ADC DMA */
	HAL_ADC_Start_DMA(&hadc1,ADC_values,3);
 8002078:	2203      	movs	r2, #3
 800207a:	4902      	ldr	r1, [pc, #8]	; (8002084 <EVMS_Init+0xc>)
 800207c:	4802      	ldr	r0, [pc, #8]	; (8002088 <EVMS_Init+0x10>)
 800207e:	f7fe be0b 	b.w	8000c98 <HAL_ADC_Start_DMA>
 8002082:	bf00      	nop
 8002084:	200001a0 	.word	0x200001a0
 8002088:	20000128 	.word	0x20000128

0800208c <IDLE_Func>:
/* Description:
 * 1. Disable EVMS Relay
 * 2. Check on the start button if pressed so enter pre-charge state
 */
void IDLE_Func()
{
 800208c:	b510      	push	{r4, lr}
	/* Disable EVMS Relay */
	HAL_GPIO_WritePin(EVMS_RELAY_GPIO_Port,EVMS_RELAY_Pin,0);
 800208e:	2108      	movs	r1, #8
 8002090:	4813      	ldr	r0, [pc, #76]	; (80020e0 <IDLE_Func+0x54>)
 8002092:	2200      	movs	r2, #0
 8002094:	f7ff f984 	bl	80013a0 <HAL_GPIO_WritePin>

	/*if the start button is not pressed then the next state is still IDLE state */
	if(! HAL_GPIO_ReadPin(START_BTN_GPIO_Port,START_BTN_Pin))
 8002098:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800209c:	4811      	ldr	r0, [pc, #68]	; (80020e4 <IDLE_Func+0x58>)
 800209e:	f7ff f979 	bl	8001394 <HAL_GPIO_ReadPin>
 80020a2:	b930      	cbnz	r0, 80020b2 <IDLE_Func+0x26>
	{
		/* still in idle state */
		nextStateM=IDLE;
 80020a4:	4b10      	ldr	r3, [pc, #64]	; (80020e8 <IDLE_Func+0x5c>)
 80020a6:	7018      	strb	r0, [r3, #0]
		/* enter the pre-charge state */
		nextStateM=PRECHARGE;
	}

	/* store the new state to set the required state in the loop */
	currStateM=nextStateM;
 80020a8:	4b0f      	ldr	r3, [pc, #60]	; (80020e8 <IDLE_Func+0x5c>)
 80020aa:	781a      	ldrb	r2, [r3, #0]
 80020ac:	4b0f      	ldr	r3, [pc, #60]	; (80020ec <IDLE_Func+0x60>)
 80020ae:	701a      	strb	r2, [r3, #0]
 80020b0:	bd10      	pop	{r4, pc}
	else if(HAL_GPIO_ReadPin(START_BTN_GPIO_Port,START_BTN_Pin))
 80020b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020b6:	480b      	ldr	r0, [pc, #44]	; (80020e4 <IDLE_Func+0x58>)
 80020b8:	f7ff f96c 	bl	8001394 <HAL_GPIO_ReadPin>
 80020bc:	2800      	cmp	r0, #0
 80020be:	d0f3      	beq.n	80020a8 <IDLE_Func+0x1c>
		while(HAL_GPIO_ReadPin(START_BTN_GPIO_Port,START_BTN_Pin));
 80020c0:	4c08      	ldr	r4, [pc, #32]	; (80020e4 <IDLE_Func+0x58>)
 80020c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020c6:	4620      	mov	r0, r4
 80020c8:	f7ff f964 	bl	8001394 <HAL_GPIO_ReadPin>
 80020cc:	2800      	cmp	r0, #0
 80020ce:	d1f8      	bne.n	80020c2 <IDLE_Func+0x36>
		HAL_Delay(50);
 80020d0:	2032      	movs	r0, #50	; 0x32
 80020d2:	f7fe fcd7 	bl	8000a84 <HAL_Delay>
		nextStateM=PRECHARGE;
 80020d6:	2201      	movs	r2, #1
 80020d8:	4b03      	ldr	r3, [pc, #12]	; (80020e8 <IDLE_Func+0x5c>)
 80020da:	701a      	strb	r2, [r3, #0]
 80020dc:	e7e4      	b.n	80020a8 <IDLE_Func+0x1c>
 80020de:	bf00      	nop
 80020e0:	40010800 	.word	0x40010800
 80020e4:	40010c00 	.word	0x40010c00
 80020e8:	2000008e 	.word	0x2000008e
 80020ec:	2000008c 	.word	0x2000008c

080020f0 <PRECHARGE_Func>:
/* Description:
 * 1. Enable pre-charge Relay to start charging the battery
 * 2. Check on the start button if pressed so enter pre-charge state
 */
void PRECHARGE_Func()
{
 80020f0:	b510      	push	{r4, lr}
	/* Enable the pre-charge relay of the bamocar */
	HAL_GPIO_WritePin(PRECHARGE_RELAY_GPIO_Port,PRECHARGE_RELAY_Pin,1);
 80020f2:	2140      	movs	r1, #64	; 0x40
 80020f4:	2201      	movs	r2, #1
 80020f6:	4810      	ldr	r0, [pc, #64]	; (8002138 <PRECHARGE_Func+0x48>)
 80020f8:	f7ff f952 	bl	80013a0 <HAL_GPIO_WritePin>

	/* Delay to make sure that the relay had time to act */
	HAL_Delay(50);
 80020fc:	2032      	movs	r0, #50	; 0x32
 80020fe:	f7fe fcc1 	bl	8000a84 <HAL_Delay>

	/*read the feedback from the precharge relay to see if it is closed or not  */
	if(HAL_GPIO_ReadPin(PRE_CHARGE_FB_GPIO_Port,PRE_CHARGE_FB_Pin)== 0)
 8002102:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002106:	480d      	ldr	r0, [pc, #52]	; (800213c <PRECHARGE_Func+0x4c>)
 8002108:	f7ff f944 	bl	8001394 <HAL_GPIO_ReadPin>
 800210c:	b910      	cbnz	r0, 8002114 <PRECHARGE_Func+0x24>
	{
		/* if the pre-charge relay is not closed then the relay or its connection has a problem
		 * so call the ERROR function */
		errorType = ERROR_PrechargeFB;
 800210e:	2202      	movs	r2, #2
 8002110:	4b0b      	ldr	r3, [pc, #44]	; (8002140 <PRECHARGE_Func+0x50>)
 8002112:	701a      	strb	r2, [r3, #0]
	}

	/* Check for the DC90 from bamocar. so that, if it is high then the inverter is pre-charged
	 * and go to neutral state
	 */
	if(HAL_GPIO_ReadPin(DC90_INPUT_GPIO_Port,DC90_INPUT_Pin))
 8002114:	2110      	movs	r1, #16
 8002116:	4808      	ldr	r0, [pc, #32]	; (8002138 <PRECHARGE_Func+0x48>)
 8002118:	f7ff f93c 	bl	8001394 <HAL_GPIO_ReadPin>
 800211c:	4c09      	ldr	r4, [pc, #36]	; (8002144 <PRECHARGE_Func+0x54>)
 800211e:	b140      	cbz	r0, 8002132 <PRECHARGE_Func+0x42>
	{
		/* enter the neutral state */
		nextStateM=NEUTRAL;
 8002120:	2302      	movs	r3, #2

																    //hnzbtha 3la 7sb ana bigely 95% emta
																	//htt7l mn el inverter nafso
		HAL_Delay(30);
 8002122:	201e      	movs	r0, #30
		nextStateM=NEUTRAL;
 8002124:	7023      	strb	r3, [r4, #0]
		HAL_Delay(30);
 8002126:	f7fe fcad 	bl	8000a84 <HAL_Delay>
		/* still in the pre-charge state */
		nextStateM=PRECHARGE;
	}

	/* store the new state to set the required state in the loop */
	currStateM=nextStateM;
 800212a:	7822      	ldrb	r2, [r4, #0]
 800212c:	4b06      	ldr	r3, [pc, #24]	; (8002148 <PRECHARGE_Func+0x58>)
 800212e:	701a      	strb	r2, [r3, #0]
 8002130:	bd10      	pop	{r4, pc}
		nextStateM=PRECHARGE;
 8002132:	2301      	movs	r3, #1
 8002134:	7023      	strb	r3, [r4, #0]
 8002136:	e7f8      	b.n	800212a <PRECHARGE_Func+0x3a>
 8002138:	40010c00 	.word	0x40010c00
 800213c:	40010800 	.word	0x40010800
 8002140:	2000008d 	.word	0x2000008d
 8002144:	2000008e 	.word	0x2000008e
 8002148:	2000008c 	.word	0x2000008c

0800214c <DISCHARGE_Func>:
 * 3. Disable AIR positive relay
 * 4. Check on the feedback of the AIR positive and AIR negative to avoid errors
 * 5. check on the DC60 signal to whether go IDLE or not
 */
void DISCHARGE_Func()
{
 800214c:	b510      	push	{r4, lr}
	/* Enable EVMS relay to discharge the battery */
	HAL_GPIO_WritePin(EVMS_RELAY_GPIO_Port,EVMS_RELAY_Pin,1);
 800214e:	2201      	movs	r2, #1
 8002150:	2108      	movs	r1, #8
 8002152:	4821      	ldr	r0, [pc, #132]	; (80021d8 <DISCHARGE_Func+0x8c>)
 8002154:	f7ff f924 	bl	80013a0 <HAL_GPIO_WritePin>

	/* Disable the inverter by disable RFE and Drive pins*/
	HAL_GPIO_WritePin(RFE_ENABLE_GPIO_Port,RFE_ENABLE_Pin,0);
 8002158:	2200      	movs	r2, #0
 800215a:	2140      	movs	r1, #64	; 0x40
 800215c:	481e      	ldr	r0, [pc, #120]	; (80021d8 <DISCHARGE_Func+0x8c>)
 800215e:	f7ff f91f 	bl	80013a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRIVE_ENABLE_GPIO_Port,DRIVE_ENABLE_Pin,0);
 8002162:	2200      	movs	r2, #0
 8002164:	2180      	movs	r1, #128	; 0x80
 8002166:	481c      	ldr	r0, [pc, #112]	; (80021d8 <DISCHARGE_Func+0x8c>)
 8002168:	f7ff f91a 	bl	80013a0 <HAL_GPIO_WritePin>


	/* Disable the AIR positive relay */
	HAL_GPIO_WritePin(AIR_POSITIVE_GPIO_Port,AIR_POSITIVE_Pin,0);
 800216c:	2200      	movs	r2, #0
 800216e:	2180      	movs	r1, #128	; 0x80
 8002170:	481a      	ldr	r0, [pc, #104]	; (80021dc <DISCHARGE_Func+0x90>)
 8002172:	f7ff f915 	bl	80013a0 <HAL_GPIO_WritePin>
	/* Delay to make sure that the relay had time to act */
	HAL_Delay(50);
 8002176:	2032      	movs	r0, #50	; 0x32
 8002178:	f7fe fc84 	bl	8000a84 <HAL_Delay>

	/* if the AIR positive relay is enabled then there is a a problem in the relay or its connection. So, call ERROR function. */
	if(HAL_GPIO_ReadPin(AIR_POSITIVE_FB_GPIO_Port,AIR_POSITIVE_FB_Pin)==1)
 800217c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002180:	4815      	ldr	r0, [pc, #84]	; (80021d8 <DISCHARGE_Func+0x8c>)
 8002182:	f7ff f907 	bl	8001394 <HAL_GPIO_ReadPin>
 8002186:	2801      	cmp	r0, #1
	{
		errorType = ERROR_AIRposFB;
 8002188:	bf04      	itt	eq
 800218a:	2203      	moveq	r2, #3
 800218c:	4b14      	ldreq	r3, [pc, #80]	; (80021e0 <DISCHARGE_Func+0x94>)
		//ErrorAction();
	}

	/* if the AIR negative relay is enabled then there is a a problem in the relay or its connection. So, call ERROR function. */
	if(HAL_GPIO_ReadPin(AIR_NEGATIVE_FB_GPIO_Port,AIR_NEGATIVE_FB_Pin)==1)
 800218e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002192:	4811      	ldr	r0, [pc, #68]	; (80021d8 <DISCHARGE_Func+0x8c>)
		errorType = ERROR_AIRposFB;
 8002194:	bf08      	it	eq
 8002196:	701a      	strbeq	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(AIR_NEGATIVE_FB_GPIO_Port,AIR_NEGATIVE_FB_Pin)==1)
 8002198:	f7ff f8fc 	bl	8001394 <HAL_GPIO_ReadPin>
 800219c:	2801      	cmp	r0, #1
	{
		errorType = ERROR_AIRnegFB;
 800219e:	bf04      	itt	eq
 80021a0:	2204      	moveq	r2, #4
 80021a2:	4b0f      	ldreq	r3, [pc, #60]	; (80021e0 <DISCHARGE_Func+0x94>)
		//ErrorAction();
	}

	/* if DC60 is high then go to IDLE state */
	if((!HAL_GPIO_ReadPin(AIR_NEGATIVE_FB_GPIO_Port,AIR_NEGATIVE_FB_Pin)) && (!HAL_GPIO_ReadPin(AIR_POSITIVE_FB_GPIO_Port,AIR_POSITIVE_FB_Pin)))																				 /*will be re-configured*/
 80021a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021a8:	480b      	ldr	r0, [pc, #44]	; (80021d8 <DISCHARGE_Func+0x8c>)
		errorType = ERROR_AIRnegFB;
 80021aa:	bf08      	it	eq
 80021ac:	701a      	strbeq	r2, [r3, #0]
	if((!HAL_GPIO_ReadPin(AIR_NEGATIVE_FB_GPIO_Port,AIR_NEGATIVE_FB_Pin)) && (!HAL_GPIO_ReadPin(AIR_POSITIVE_FB_GPIO_Port,AIR_POSITIVE_FB_Pin)))																				 /*will be re-configured*/
 80021ae:	f7ff f8f1 	bl	8001394 <HAL_GPIO_ReadPin>
 80021b2:	4c0c      	ldr	r4, [pc, #48]	; (80021e4 <DISCHARGE_Func+0x98>)
 80021b4:	b968      	cbnz	r0, 80021d2 <DISCHARGE_Func+0x86>
 80021b6:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 80021ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021be:	f500 3084 	add.w	r0, r0, #67584	; 0x10800
 80021c2:	f7ff f8e7 	bl	8001394 <HAL_GPIO_ReadPin>
 80021c6:	b920      	cbnz	r0, 80021d2 <DISCHARGE_Func+0x86>
	{
		/* enter the IDLE state */
		nextStateM=IDLE;
 80021c8:	7020      	strb	r0, [r4, #0]
		/* still in the discharge state */
		nextStateM=DISCHARGE;
	}

	/* store the new state to set the required state in the loop */
	currStateM=nextStateM;
 80021ca:	7822      	ldrb	r2, [r4, #0]
 80021cc:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <DISCHARGE_Func+0x9c>)
 80021ce:	701a      	strb	r2, [r3, #0]
 80021d0:	bd10      	pop	{r4, pc}
		nextStateM=DISCHARGE;
 80021d2:	2304      	movs	r3, #4
 80021d4:	7023      	strb	r3, [r4, #0]
 80021d6:	e7f8      	b.n	80021ca <DISCHARGE_Func+0x7e>
 80021d8:	40010800 	.word	0x40010800
 80021dc:	40010c00 	.word	0x40010c00
 80021e0:	2000008d 	.word	0x2000008d
 80021e4:	2000008e 	.word	0x2000008e
 80021e8:	2000008c 	.word	0x2000008c

080021ec <ErrorAction>:

/* Description:
 * 1. Enable EVMS relay to open the shutdown circuit
 */
void ErrorAction()
{
 80021ec:	b538      	push	{r3, r4, r5, lr}
	/* open the shutdown circuit and go in infinite loop */
	HAL_GPIO_WritePin(EVMS_RELAY_GPIO_Port,EVMS_RELAY_Pin,1);
 80021ee:	2201      	movs	r2, #1
 80021f0:	2108      	movs	r1, #8
 80021f2:	481a      	ldr	r0, [pc, #104]	; (800225c <ErrorAction+0x70>)
 80021f4:	f7ff f8d4 	bl	80013a0 <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 80021f8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80021fc:	f7fe fc42 	bl	8000a84 <HAL_Delay>
	HAL_GPIO_WritePin(EVMS_RELAY_GPIO_Port,EVMS_RELAY_Pin,0);
 8002200:	2200      	movs	r2, #0
 8002202:	2108      	movs	r1, #8
 8002204:	4815      	ldr	r0, [pc, #84]	; (800225c <ErrorAction+0x70>)
 8002206:	f7ff f8cb 	bl	80013a0 <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 800220a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800220e:	f7fe fc39 	bl	8000a84 <HAL_Delay>
	HAL_GPIO_WritePin(EVMS_RELAY_GPIO_Port,EVMS_RELAY_Pin,1);
 8002212:	2201      	movs	r2, #1
 8002214:	2108      	movs	r1, #8
 8002216:	4811      	ldr	r0, [pc, #68]	; (800225c <ErrorAction+0x70>)
 8002218:	f7ff f8c2 	bl	80013a0 <HAL_GPIO_WritePin>

	/* enter the discharge state */
	nextStateM=DISCHARGE;
 800221c:	2204      	movs	r2, #4

	/* Store the updated ADC values of the two pedals in a string */
	sprintf(UART_massage, "%c \n", "E");
 800221e:	4c10      	ldr	r4, [pc, #64]	; (8002260 <ErrorAction+0x74>)
	nextStateM=DISCHARGE;
 8002220:	4b10      	ldr	r3, [pc, #64]	; (8002264 <ErrorAction+0x78>)
	sprintf(UART_massage, "%c \n", "E");
 8002222:	4911      	ldr	r1, [pc, #68]	; (8002268 <ErrorAction+0x7c>)
	nextStateM=DISCHARGE;
 8002224:	701a      	strb	r2, [r3, #0]
	sprintf(UART_massage, "%c \n", "E");
 8002226:	7820      	ldrb	r0, [r4, #0]
 8002228:	4a10      	ldr	r2, [pc, #64]	; (800226c <ErrorAction+0x80>)
 800222a:	f000 fc0b 	bl	8002a44 <siprintf>
	/* Transmit the message by the UART*/
	HAL_UART_Transmit(&huart3, UART_massage, sizeof(UART_massage), 1);
 800222e:	2301      	movs	r3, #1
	sprintf(UART_massage, "%d \n", errorType);
 8002230:	4d0f      	ldr	r5, [pc, #60]	; (8002270 <ErrorAction+0x84>)
	HAL_UART_Transmit(&huart3, UART_massage, sizeof(UART_massage), 1);
 8002232:	461a      	mov	r2, r3
 8002234:	7821      	ldrb	r1, [r4, #0]
 8002236:	480f      	ldr	r0, [pc, #60]	; (8002274 <ErrorAction+0x88>)
 8002238:	f7ff fe6e 	bl	8001f18 <HAL_UART_Transmit>
	sprintf(UART_massage, "%d \n", errorType);
 800223c:	782a      	ldrb	r2, [r5, #0]
 800223e:	490e      	ldr	r1, [pc, #56]	; (8002278 <ErrorAction+0x8c>)
 8002240:	7820      	ldrb	r0, [r4, #0]
 8002242:	f000 fbff 	bl	8002a44 <siprintf>
		/* Transmit the message by the UART*/
		HAL_UART_Transmit(&huart3, UART_massage, sizeof(UART_massage), 1);
 8002246:	2301      	movs	r3, #1
 8002248:	7821      	ldrb	r1, [r4, #0]
 800224a:	461a      	mov	r2, r3
 800224c:	4809      	ldr	r0, [pc, #36]	; (8002274 <ErrorAction+0x88>)
 800224e:	f7ff fe63 	bl	8001f18 <HAL_UART_Transmit>
	while(errorType){}
 8002252:	782b      	ldrb	r3, [r5, #0]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d1fd      	bne.n	8002254 <ErrorAction+0x68>
}
 8002258:	bd38      	pop	{r3, r4, r5, pc}
 800225a:	bf00      	nop
 800225c:	40010800 	.word	0x40010800
 8002260:	20000158 	.word	0x20000158
 8002264:	2000008e 	.word	0x2000008e
 8002268:	080032c8 	.word	0x080032c8
 800226c:	080032c6 	.word	0x080032c6
 8002270:	2000008d 	.word	0x2000008d
 8002274:	200000a0 	.word	0x200000a0
 8002278:	080032cd 	.word	0x080032cd
 800227c:	00000000 	.word	0x00000000

08002280 <Check_APPS>:
{
 8002280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t apps1_read= uint16_t_Read_APPS1(); /* variable to store first pedal reading */
 8002282:	f7ff fea3 	bl	8001fcc <uint16_t_Read_APPS1>
 8002286:	4604      	mov	r4, r0
	uint16_t apps2_read= uint16_t_Read_APPS2(); /* variable to store second pedal reading */
 8002288:	f7ff feac 	bl	8001fe4 <uint16_t_Read_APPS2>
 800228c:	4605      	mov	r5, r0
	if(apps1_read>apps2_read)
 800228e:	4284      	cmp	r4, r0
		difference =apps1_read-apps2_read;
 8002290:	bf8c      	ite	hi
 8002292:	1a20      	subhi	r0, r4, r0
		difference =apps2_read-apps1_read;
 8002294:	1b28      	subls	r0, r5, r4
 8002296:	b280      	uxth	r0, r0
	if(difference> 0.1* apps2_read || difference> 0.1* apps1_read){
 8002298:	f7fe f8ac 	bl	80003f4 <__aeabi_i2d>
 800229c:	4606      	mov	r6, r0
 800229e:	4628      	mov	r0, r5
 80022a0:	460f      	mov	r7, r1
 80022a2:	f7fe f8a7 	bl	80003f4 <__aeabi_i2d>
 80022a6:	a312      	add	r3, pc, #72	; (adr r3, 80022f0 <Check_APPS+0x70>)
 80022a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ac:	f7fe f908 	bl	80004c0 <__aeabi_dmul>
 80022b0:	4602      	mov	r2, r0
 80022b2:	460b      	mov	r3, r1
 80022b4:	4630      	mov	r0, r6
 80022b6:	4639      	mov	r1, r7
 80022b8:	f7fe fb92 	bl	80009e0 <__aeabi_dcmpgt>
 80022bc:	b970      	cbnz	r0, 80022dc <Check_APPS+0x5c>
 80022be:	4620      	mov	r0, r4
 80022c0:	f7fe f898 	bl	80003f4 <__aeabi_i2d>
 80022c4:	a30a      	add	r3, pc, #40	; (adr r3, 80022f0 <Check_APPS+0x70>)
 80022c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ca:	f7fe f8f9 	bl	80004c0 <__aeabi_dmul>
 80022ce:	4602      	mov	r2, r0
 80022d0:	460b      	mov	r3, r1
 80022d2:	4630      	mov	r0, r6
 80022d4:	4639      	mov	r1, r7
 80022d6:	f7fe fb83 	bl	80009e0 <__aeabi_dcmpgt>
 80022da:	b130      	cbz	r0, 80022ea <Check_APPS+0x6a>
		errorType = ERROR_CheckAPPS;
 80022dc:	2201      	movs	r2, #1
 80022de:	4b06      	ldr	r3, [pc, #24]	; (80022f8 <Check_APPS+0x78>)
 80022e0:	701a      	strb	r2, [r3, #0]
}
 80022e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		ErrorAction();
 80022e6:	f7ff bf81 	b.w	80021ec <ErrorAction>
 80022ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022ec:	f3af 8000 	nop.w
 80022f0:	9999999a 	.word	0x9999999a
 80022f4:	3fb99999 	.word	0x3fb99999
 80022f8:	2000008d 	.word	0x2000008d

080022fc <NEUTRAL_Func>:
{
 80022fc:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(AIR_POSITIVE_GPIO_Port,AIR_POSITIVE_Pin,1);
 80022fe:	2201      	movs	r2, #1
 8002300:	2180      	movs	r1, #128	; 0x80
 8002302:	482b      	ldr	r0, [pc, #172]	; (80023b0 <NEUTRAL_Func+0xb4>)
 8002304:	f7ff f84c 	bl	80013a0 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8002308:	2032      	movs	r0, #50	; 0x32
 800230a:	f7fe fbbb 	bl	8000a84 <HAL_Delay>
	HAL_GPIO_WritePin(PRECHARGE_RELAY_GPIO_Port,PRECHARGE_RELAY_Pin,0);
 800230e:	2200      	movs	r2, #0
 8002310:	2140      	movs	r1, #64	; 0x40
 8002312:	4827      	ldr	r0, [pc, #156]	; (80023b0 <NEUTRAL_Func+0xb4>)
 8002314:	f7ff f844 	bl	80013a0 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8002318:	2032      	movs	r0, #50	; 0x32
 800231a:	f7fe fbb3 	bl	8000a84 <HAL_Delay>
	if(HAL_GPIO_ReadPin(PRE_CHARGE_FB_GPIO_Port,PRE_CHARGE_FB_Pin)== 1)
 800231e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002322:	4824      	ldr	r0, [pc, #144]	; (80023b4 <NEUTRAL_Func+0xb8>)
 8002324:	f7ff f836 	bl	8001394 <HAL_GPIO_ReadPin>
 8002328:	2801      	cmp	r0, #1
		errorType = ERROR_PrechargeFB;
 800232a:	bf04      	itt	eq
 800232c:	2202      	moveq	r2, #2
 800232e:	4b22      	ldreq	r3, [pc, #136]	; (80023b8 <NEUTRAL_Func+0xbc>)
	if(HAL_GPIO_ReadPin(AIR_POSITIVE_FB_GPIO_Port,AIR_POSITIVE_FB_Pin)==0)
 8002330:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002334:	481f      	ldr	r0, [pc, #124]	; (80023b4 <NEUTRAL_Func+0xb8>)
		errorType = ERROR_PrechargeFB;
 8002336:	bf08      	it	eq
 8002338:	701a      	strbeq	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(AIR_POSITIVE_FB_GPIO_Port,AIR_POSITIVE_FB_Pin)==0)
 800233a:	f7ff f82b 	bl	8001394 <HAL_GPIO_ReadPin>
 800233e:	b910      	cbnz	r0, 8002346 <NEUTRAL_Func+0x4a>
		errorType = ERROR_AIRposFB;
 8002340:	2203      	movs	r2, #3
 8002342:	4b1d      	ldr	r3, [pc, #116]	; (80023b8 <NEUTRAL_Func+0xbc>)
 8002344:	701a      	strb	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(AIR_NEGATIVE_FB_GPIO_Port,AIR_NEGATIVE_FB_Pin)==0)
 8002346:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800234a:	481a      	ldr	r0, [pc, #104]	; (80023b4 <NEUTRAL_Func+0xb8>)
 800234c:	f7ff f822 	bl	8001394 <HAL_GPIO_ReadPin>
 8002350:	b910      	cbnz	r0, 8002358 <NEUTRAL_Func+0x5c>
		errorType = ERROR_AIRnegFB;
 8002352:	2204      	movs	r2, #4
 8002354:	4b18      	ldr	r3, [pc, #96]	; (80023b8 <NEUTRAL_Func+0xbc>)
 8002356:	701a      	strb	r2, [r3, #0]
	Check_APPS();
 8002358:	f7ff ff92 	bl	8002280 <Check_APPS>
	if(HAL_GPIO_ReadPin(START_BTN_GPIO_Port,START_BTN_Pin))
 800235c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002360:	4813      	ldr	r0, [pc, #76]	; (80023b0 <NEUTRAL_Func+0xb4>)
 8002362:	f7ff f817 	bl	8001394 <HAL_GPIO_ReadPin>
 8002366:	b168      	cbz	r0, 8002384 <NEUTRAL_Func+0x88>
		while(HAL_GPIO_ReadPin(START_BTN_GPIO_Port,START_BTN_Pin));
 8002368:	4c11      	ldr	r4, [pc, #68]	; (80023b0 <NEUTRAL_Func+0xb4>)
 800236a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800236e:	4620      	mov	r0, r4
 8002370:	f7ff f810 	bl	8001394 <HAL_GPIO_ReadPin>
 8002374:	2800      	cmp	r0, #0
 8002376:	d1f8      	bne.n	800236a <NEUTRAL_Func+0x6e>
		HAL_Delay(50);
 8002378:	2032      	movs	r0, #50	; 0x32
 800237a:	f7fe fb83 	bl	8000a84 <HAL_Delay>
		nextStateM=DISCHARGE;
 800237e:	2204      	movs	r2, #4
 8002380:	4b0e      	ldr	r3, [pc, #56]	; (80023bc <NEUTRAL_Func+0xc0>)
 8002382:	701a      	strb	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(RTD_BTN_GPIO_Port,RTD_BTN_Pin) && ADC_values[BRAKE_ANGLE]>VAL_BRAKE_ANGLE_RTD) 										/* w hna hzwd else if */
 8002384:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002388:	4809      	ldr	r0, [pc, #36]	; (80023b0 <NEUTRAL_Func+0xb4>)
 800238a:	f7ff f803 	bl	8001394 <HAL_GPIO_ReadPin>
 800238e:	4c0b      	ldr	r4, [pc, #44]	; (80023bc <NEUTRAL_Func+0xc0>)
 8002390:	b150      	cbz	r0, 80023a8 <NEUTRAL_Func+0xac>
 8002392:	4b0b      	ldr	r3, [pc, #44]	; (80023c0 <NEUTRAL_Func+0xc4>)
 8002394:	889b      	ldrh	r3, [r3, #4]
 8002396:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800239a:	d905      	bls.n	80023a8 <NEUTRAL_Func+0xac>
		Check_Activasion_Logic();
 800239c:	f7ff fe2e 	bl	8001ffc <Check_Activasion_Logic>
	currStateM=nextStateM;
 80023a0:	7822      	ldrb	r2, [r4, #0]
 80023a2:	4b08      	ldr	r3, [pc, #32]	; (80023c4 <NEUTRAL_Func+0xc8>)
 80023a4:	701a      	strb	r2, [r3, #0]
 80023a6:	bd10      	pop	{r4, pc}
		nextStateM=NEUTRAL;
 80023a8:	2302      	movs	r3, #2
 80023aa:	7023      	strb	r3, [r4, #0]
 80023ac:	e7f8      	b.n	80023a0 <NEUTRAL_Func+0xa4>
 80023ae:	bf00      	nop
 80023b0:	40010c00 	.word	0x40010c00
 80023b4:	40010800 	.word	0x40010800
 80023b8:	2000008d 	.word	0x2000008d
 80023bc:	2000008e 	.word	0x2000008e
 80023c0:	200001a0 	.word	0x200001a0
 80023c4:	2000008c 	.word	0x2000008c

080023c8 <DRIVE_Func>:
{
 80023c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	HAL_GPIO_WritePin(RFE_ENABLE_GPIO_Port,RFE_ENABLE_Pin,1);
 80023ca:	2201      	movs	r2, #1
 80023cc:	2140      	movs	r1, #64	; 0x40
 80023ce:	4829      	ldr	r0, [pc, #164]	; (8002474 <DRIVE_Func+0xac>)
 80023d0:	f7fe ffe6 	bl	80013a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRIVE_ENABLE_GPIO_Port,DRIVE_ENABLE_Pin,1);
 80023d4:	2201      	movs	r2, #1
 80023d6:	2180      	movs	r1, #128	; 0x80
 80023d8:	4826      	ldr	r0, [pc, #152]	; (8002474 <DRIVE_Func+0xac>)
 80023da:	f7fe ffe1 	bl	80013a0 <HAL_GPIO_WritePin>
	Check_APPS();
 80023de:	f7ff ff4f 	bl	8002280 <Check_APPS>
	uint16_t APPS_READ=uint16_t_Read_APPS1();
 80023e2:	f7ff fdf3 	bl	8001fcc <uint16_t_Read_APPS1>
	APPS_READ=map(APPS_READ,2000,4095,PWM_MAX_OUTPUT,0);
 80023e6:	2300      	movs	r3, #0
 80023e8:	f640 72ff 	movw	r2, #4095	; 0xfff
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80023f2:	23c7      	movs	r3, #199	; 0xc7
 80023f4:	f000 fac1 	bl	800297a <map>
	TIM3->CCR3 = APPS_READ;
 80023f8:	4b1f      	ldr	r3, [pc, #124]	; (8002478 <DRIVE_Func+0xb0>)
	sprintf(UART_massage, "%c \n", "D");
 80023fa:	4d20      	ldr	r5, [pc, #128]	; (800247c <DRIVE_Func+0xb4>)
	TIM3->CCR3 = APPS_READ;
 80023fc:	63d8      	str	r0, [r3, #60]	; 0x3c
	APPS_READ=map(APPS_READ,2000,4095,PWM_MAX_OUTPUT,0);
 80023fe:	4604      	mov	r4, r0
	sprintf(UART_massage, "%c \n", "D");
 8002400:	4a1f      	ldr	r2, [pc, #124]	; (8002480 <DRIVE_Func+0xb8>)
 8002402:	4920      	ldr	r1, [pc, #128]	; (8002484 <DRIVE_Func+0xbc>)
 8002404:	7828      	ldrb	r0, [r5, #0]
 8002406:	f000 fb1d 	bl	8002a44 <siprintf>
	HAL_UART_Transmit(&huart3, UART_massage, sizeof(UART_massage), 1);
 800240a:	2301      	movs	r3, #1
 800240c:	7829      	ldrb	r1, [r5, #0]
 800240e:	461a      	mov	r2, r3
 8002410:	481d      	ldr	r0, [pc, #116]	; (8002488 <DRIVE_Func+0xc0>)
 8002412:	f7ff fd81 	bl	8001f18 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, APPS_READ, sizeof(APPS_READ), 1);
 8002416:	4621      	mov	r1, r4
 8002418:	2301      	movs	r3, #1
 800241a:	2202      	movs	r2, #2
 800241c:	481a      	ldr	r0, [pc, #104]	; (8002488 <DRIVE_Func+0xc0>)
 800241e:	f7ff fd7b 	bl	8001f18 <HAL_UART_Transmit>
	if(HAL_GPIO_ReadPin(AIR_NEGATIVE_FB_GPIO_Port,AIR_NEGATIVE_FB_Pin)==0)
 8002422:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002426:	4813      	ldr	r0, [pc, #76]	; (8002474 <DRIVE_Func+0xac>)
 8002428:	f7fe ffb4 	bl	8001394 <HAL_GPIO_ReadPin>
 800242c:	b910      	cbnz	r0, 8002434 <DRIVE_Func+0x6c>
		errorType = ERROR_AIRnegFB;
 800242e:	2204      	movs	r2, #4
 8002430:	4b16      	ldr	r3, [pc, #88]	; (800248c <DRIVE_Func+0xc4>)
 8002432:	701a      	strb	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(START_BTN_GPIO_Port,START_BTN_Pin))
 8002434:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002438:	4815      	ldr	r0, [pc, #84]	; (8002490 <DRIVE_Func+0xc8>)
 800243a:	f7fe ffab 	bl	8001394 <HAL_GPIO_ReadPin>
 800243e:	b1b0      	cbz	r0, 800246e <DRIVE_Func+0xa6>
		while(HAL_GPIO_ReadPin(START_BTN_GPIO_Port,START_BTN_Pin));
 8002440:	4d13      	ldr	r5, [pc, #76]	; (8002490 <DRIVE_Func+0xc8>)
 8002442:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002446:	4628      	mov	r0, r5
 8002448:	f7fe ffa4 	bl	8001394 <HAL_GPIO_ReadPin>
 800244c:	4604      	mov	r4, r0
 800244e:	2800      	cmp	r0, #0
 8002450:	d1f7      	bne.n	8002442 <DRIVE_Func+0x7a>
		HAL_Delay(50);
 8002452:	2032      	movs	r0, #50	; 0x32
 8002454:	f7fe fb16 	bl	8000a84 <HAL_Delay>
		nextStateM=DISCHARGE;
 8002458:	2204      	movs	r2, #4
		TIM3->CCR3 = 0;
 800245a:	4b07      	ldr	r3, [pc, #28]	; (8002478 <DRIVE_Func+0xb0>)
 800245c:	63dc      	str	r4, [r3, #60]	; 0x3c
		nextStateM=DRIVE;
 800245e:	4b0d      	ldr	r3, [pc, #52]	; (8002494 <DRIVE_Func+0xcc>)
 8002460:	701a      	strb	r2, [r3, #0]
	currStateM=nextStateM;
 8002462:	4b0c      	ldr	r3, [pc, #48]	; (8002494 <DRIVE_Func+0xcc>)
 8002464:	781a      	ldrb	r2, [r3, #0]
 8002466:	4b0c      	ldr	r3, [pc, #48]	; (8002498 <DRIVE_Func+0xd0>)
 8002468:	701a      	strb	r2, [r3, #0]
}
 800246a:	b003      	add	sp, #12
 800246c:	bd30      	pop	{r4, r5, pc}
		nextStateM=DRIVE;
 800246e:	2203      	movs	r2, #3
 8002470:	e7f5      	b.n	800245e <DRIVE_Func+0x96>
 8002472:	bf00      	nop
 8002474:	40010800 	.word	0x40010800
 8002478:	40000400 	.word	0x40000400
 800247c:	20000158 	.word	0x20000158
 8002480:	080032c4 	.word	0x080032c4
 8002484:	080032c8 	.word	0x080032c8
 8002488:	200000a0 	.word	0x200000a0
 800248c:	2000008d 	.word	0x2000008d
 8002490:	40010c00 	.word	0x40010c00
 8002494:	2000008e 	.word	0x2000008e
 8002498:	2000008c 	.word	0x2000008c

0800249c <loop>:
{
 800249c:	b538      	push	{r3, r4, r5, lr}
	sprintf(UART_massage, "%d\n", currStateM);
 800249e:	4c15      	ldr	r4, [pc, #84]	; (80024f4 <loop+0x58>)
 80024a0:	4d15      	ldr	r5, [pc, #84]	; (80024f8 <loop+0x5c>)
 80024a2:	7822      	ldrb	r2, [r4, #0]
 80024a4:	4915      	ldr	r1, [pc, #84]	; (80024fc <loop+0x60>)
 80024a6:	7828      	ldrb	r0, [r5, #0]
 80024a8:	f000 facc 	bl	8002a44 <siprintf>
	HAL_UART_Transmit(&huart3, UART_massage, sizeof(UART_massage), 1);
 80024ac:	2301      	movs	r3, #1
 80024ae:	7829      	ldrb	r1, [r5, #0]
 80024b0:	461a      	mov	r2, r3
 80024b2:	4813      	ldr	r0, [pc, #76]	; (8002500 <loop+0x64>)
 80024b4:	f7ff fd30 	bl	8001f18 <HAL_UART_Transmit>
	switch(currStateM)
 80024b8:	7823      	ldrb	r3, [r4, #0]
 80024ba:	2b04      	cmp	r3, #4
 80024bc:	d818      	bhi.n	80024f0 <loop+0x54>
 80024be:	e8df f003 	tbb	[pc, r3]
 80024c2:	0703      	.short	0x0703
 80024c4:	0f0b      	.short	0x0f0b
 80024c6:	13          	.byte	0x13
 80024c7:	00          	.byte	0x00
}
 80024c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		IDLE_Func();
 80024cc:	f7ff bdde 	b.w	800208c <IDLE_Func>
}
 80024d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		PRECHARGE_Func();
 80024d4:	f7ff be0c 	b.w	80020f0 <PRECHARGE_Func>
}
 80024d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		NEUTRAL_Func();
 80024dc:	f7ff bf0e 	b.w	80022fc <NEUTRAL_Func>
}
 80024e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		DRIVE_Func();
 80024e4:	f7ff bf70 	b.w	80023c8 <DRIVE_Func>
}
 80024e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		DISCHARGE_Func();
 80024ec:	f7ff be2e 	b.w	800214c <DISCHARGE_Func>
 80024f0:	bd38      	pop	{r3, r4, r5, pc}
 80024f2:	bf00      	nop
 80024f4:	2000008c 	.word	0x2000008c
 80024f8:	20000158 	.word	0x20000158
 80024fc:	080032d2 	.word	0x080032d2
 8002500:	200000a0 	.word	0x200000a0

08002504 <SystemClock_Config>:
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002504:	2228      	movs	r2, #40	; 0x28
{
 8002506:	b510      	push	{r4, lr}
 8002508:	b094      	sub	sp, #80	; 0x50
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800250a:	eb0d 0002 	add.w	r0, sp, r2
 800250e:	2100      	movs	r1, #0
 8002510:	f000 fa90 	bl	8002a34 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002514:	2214      	movs	r2, #20
 8002516:	2100      	movs	r1, #0
 8002518:	eb0d 0002 	add.w	r0, sp, r2
 800251c:	f000 fa8a 	bl	8002a34 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002520:	2100      	movs	r1, #0
 8002522:	2210      	movs	r2, #16
 8002524:	a801      	add	r0, sp, #4
 8002526:	f000 fa85 	bl	8002a34 <memset>

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800252a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800252e:	2402      	movs	r4, #2
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002530:	2201      	movs	r2, #1
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002532:	930b      	str	r3, [sp, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002534:	9312      	str	r3, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002536:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800253a:	a80a      	add	r0, sp, #40	; 0x28
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800253c:	920a      	str	r2, [sp, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800253e:	920e      	str	r2, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002540:	9313      	str	r3, [sp, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002542:	9411      	str	r4, [sp, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002544:	f7fe ff32 	bl	80013ac <HAL_RCC_OscConfig>
	{
		Error_Handler();
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002548:	230f      	movs	r3, #15
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800254a:	f44f 6280 	mov.w	r2, #1024	; 0x400
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800254e:	9305      	str	r3, [sp, #20]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002550:	2300      	movs	r3, #0
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002552:	4621      	mov	r1, r4
 8002554:	a805      	add	r0, sp, #20
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002556:	9307      	str	r3, [sp, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002558:	9208      	str	r2, [sp, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800255a:	9309      	str	r3, [sp, #36]	; 0x24
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800255c:	9406      	str	r4, [sp, #24]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800255e:	f7ff f8ff 	bl	8001760 <HAL_RCC_ClockConfig>
	{
		Error_Handler();
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8002562:	f44f 4340 	mov.w	r3, #49152	; 0xc000
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002566:	a801      	add	r0, sp, #4
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002568:	9401      	str	r4, [sp, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 800256a:	9303      	str	r3, [sp, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800256c:	f7ff f9b6 	bl	80018dc <HAL_RCCEx_PeriphCLKConfig>
	{
		Error_Handler();
	}
}
 8002570:	b014      	add	sp, #80	; 0x50
 8002572:	bd10      	pop	{r4, pc}

08002574 <main>:
{
 8002574:	b580      	push	{r7, lr}
static void MX_GPIO_Init(void)
{
	GPIO_InitTypeDef GPIO_InitStruct = {0};

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002576:	4d6f      	ldr	r5, [pc, #444]	; (8002734 <main+0x1c0>)
{
 8002578:	b08e      	sub	sp, #56	; 0x38
	HAL_Init();
 800257a:	f7fe fa5f 	bl	8000a3c <HAL_Init>
	SystemClock_Config();
 800257e:	f7ff ffc1 	bl	8002504 <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002582:	2210      	movs	r2, #16
 8002584:	2100      	movs	r1, #0
 8002586:	a807      	add	r0, sp, #28
 8002588:	f000 fa54 	bl	8002a34 <memset>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800258c:	69ab      	ldr	r3, [r5, #24]
	__HAL_RCC_GPIOD_CLK_ENABLE();
	__HAL_RCC_GPIOA_CLK_ENABLE();
	__HAL_RCC_GPIOB_CLK_ENABLE();

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, RTDS_Pin|EVMS_RELAY_Pin|PUMP_Pin|RFE_ENABLE_Pin
 800258e:	2200      	movs	r2, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002590:	f043 0310 	orr.w	r3, r3, #16
 8002594:	61ab      	str	r3, [r5, #24]
 8002596:	69ab      	ldr	r3, [r5, #24]
	HAL_GPIO_WritePin(GPIOA, RTDS_Pin|EVMS_RELAY_Pin|PUMP_Pin|RFE_ENABLE_Pin
 8002598:	21dc      	movs	r1, #220	; 0xdc
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800259a:	f003 0310 	and.w	r3, r3, #16
 800259e:	9301      	str	r3, [sp, #4]
 80025a0:	9b01      	ldr	r3, [sp, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80025a2:	69ab      	ldr	r3, [r5, #24]
	HAL_GPIO_WritePin(GPIOA, RTDS_Pin|EVMS_RELAY_Pin|PUMP_Pin|RFE_ENABLE_Pin
 80025a4:	4864      	ldr	r0, [pc, #400]	; (8002738 <main+0x1c4>)
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80025a6:	f043 0320 	orr.w	r3, r3, #32
 80025aa:	61ab      	str	r3, [r5, #24]
 80025ac:	69ab      	ldr	r3, [r5, #24]
	/*Configure GPIO pins : RTDS_Pin EVMS_RELAY_Pin PUMP_Pin RFE_ENABLE_Pin
                           DRIVE_ENABLE_Pin */
	GPIO_InitStruct.Pin = RTDS_Pin|EVMS_RELAY_Pin|PUMP_Pin|RFE_ENABLE_Pin
			|DRIVE_ENABLE_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ae:	2400      	movs	r4, #0
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80025b0:	f003 0320 	and.w	r3, r3, #32
 80025b4:	9302      	str	r3, [sp, #8]
 80025b6:	9b02      	ldr	r3, [sp, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80025b8:	69ab      	ldr	r3, [r5, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025ba:	2601      	movs	r6, #1
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80025bc:	f043 0304 	orr.w	r3, r3, #4
 80025c0:	61ab      	str	r3, [r5, #24]
 80025c2:	69ab      	ldr	r3, [r5, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c4:	f04f 0802 	mov.w	r8, #2
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80025c8:	f003 0304 	and.w	r3, r3, #4
 80025cc:	9303      	str	r3, [sp, #12]
 80025ce:	9b03      	ldr	r3, [sp, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80025d0:	69ab      	ldr	r3, [r5, #24]
	hadc1.Init.NbrOfConversion = 3;
 80025d2:	2703      	movs	r7, #3
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80025d4:	f043 0308 	orr.w	r3, r3, #8
 80025d8:	61ab      	str	r3, [r5, #24]
 80025da:	69ab      	ldr	r3, [r5, #24]
 80025dc:	f003 0308 	and.w	r3, r3, #8
 80025e0:	9304      	str	r3, [sp, #16]
 80025e2:	9b04      	ldr	r3, [sp, #16]
	HAL_GPIO_WritePin(GPIOA, RTDS_Pin|EVMS_RELAY_Pin|PUMP_Pin|RFE_ENABLE_Pin
 80025e4:	f7fe fedc 	bl	80013a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, PRECHARGE_RELAY_Pin|AIR_POSITIVE_Pin, GPIO_PIN_RESET);
 80025e8:	2200      	movs	r2, #0
 80025ea:	21c0      	movs	r1, #192	; 0xc0
 80025ec:	4853      	ldr	r0, [pc, #332]	; (800273c <main+0x1c8>)
 80025ee:	f7fe fed7 	bl	80013a0 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = RTDS_Pin|EVMS_RELAY_Pin|PUMP_Pin|RFE_ENABLE_Pin
 80025f2:	23dc      	movs	r3, #220	; 0xdc
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025f4:	a907      	add	r1, sp, #28
 80025f6:	4850      	ldr	r0, [pc, #320]	; (8002738 <main+0x1c4>)
	GPIO_InitStruct.Pin = RTDS_Pin|EVMS_RELAY_Pin|PUMP_Pin|RFE_ENABLE_Pin
 80025f8:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025fa:	9608      	str	r6, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fc:	9409      	str	r4, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025fe:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002602:	f7fe fde5 	bl	80011d0 <HAL_GPIO_Init>

	/*Configure GPIO pins : START_BTN_Pin RTD_BTN_Pin ENDURANCE_BTN_Pin ACCELERATION_BTN_Pin
                           DC60_INPUT_Pin DC90_INPUT_Pin BAMOCAR_ERR_Pin */
	GPIO_InitStruct.Pin = START_BTN_Pin|RTD_BTN_Pin|ENDURANCE_BTN_Pin|ACCELERATION_BTN_Pin
 8002606:	f24f 0338 	movw	r3, #61496	; 0xf038
			|DC60_INPUT_Pin|DC90_INPUT_Pin|BAMOCAR_ERR_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800260a:	a907      	add	r1, sp, #28
 800260c:	484b      	ldr	r0, [pc, #300]	; (800273c <main+0x1c8>)
	GPIO_InitStruct.Pin = START_BTN_Pin|RTD_BTN_Pin|ENDURANCE_BTN_Pin|ACCELERATION_BTN_Pin
 800260e:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002610:	9408      	str	r4, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002612:	9409      	str	r4, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002614:	f7fe fddc 	bl	80011d0 <HAL_GPIO_Init>

	/*Configure GPIO pins : SKIDPAD_BTN_Pin PRE_CHARGE_FB_Pin AIR_POSITIVE_FB_Pin AIR_NEGATIVE_FB_Pin */
	GPIO_InitStruct.Pin = SKIDPAD_BTN_Pin|PRE_CHARGE_FB_Pin|AIR_POSITIVE_FB_Pin|AIR_NEGATIVE_FB_Pin;
 8002618:	f44f 4307 	mov.w	r3, #34560	; 0x8700
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800261c:	a907      	add	r1, sp, #28
 800261e:	4846      	ldr	r0, [pc, #280]	; (8002738 <main+0x1c4>)
	GPIO_InitStruct.Pin = SKIDPAD_BTN_Pin|PRE_CHARGE_FB_Pin|AIR_POSITIVE_FB_Pin|AIR_NEGATIVE_FB_Pin;
 8002620:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002622:	9408      	str	r4, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002624:	9409      	str	r4, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002626:	f7fe fdd3 	bl	80011d0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PRECHARGE_RELAY_Pin AIR_POSITIVE_Pin */
	GPIO_InitStruct.Pin = PRECHARGE_RELAY_Pin|AIR_POSITIVE_Pin;
 800262a:	23c0      	movs	r3, #192	; 0xc0
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800262c:	a907      	add	r1, sp, #28
 800262e:	4843      	ldr	r0, [pc, #268]	; (800273c <main+0x1c8>)
	GPIO_InitStruct.Pin = PRECHARGE_RELAY_Pin|AIR_POSITIVE_Pin;
 8002630:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002632:	9608      	str	r6, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002634:	9409      	str	r4, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002636:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800263a:	f7fe fdc9 	bl	80011d0 <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 7, 7);
 800263e:	2207      	movs	r2, #7
	__HAL_RCC_DMA1_CLK_ENABLE();
 8002640:	696b      	ldr	r3, [r5, #20]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 7, 7);
 8002642:	4611      	mov	r1, r2
	__HAL_RCC_DMA1_CLK_ENABLE();
 8002644:	4333      	orrs	r3, r6
 8002646:	616b      	str	r3, [r5, #20]
 8002648:	696b      	ldr	r3, [r5, #20]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 7, 7);
 800264a:	200b      	movs	r0, #11
	__HAL_RCC_DMA1_CLK_ENABLE();
 800264c:	4033      	ands	r3, r6
 800264e:	9300      	str	r3, [sp, #0]
 8002650:	9b00      	ldr	r3, [sp, #0]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 7, 7);
 8002652:	f7fe fc63 	bl	8000f1c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002656:	200b      	movs	r0, #11
 8002658:	f7fe fc94 	bl	8000f84 <HAL_NVIC_EnableIRQ>
	hadc1.Instance = ADC1;
 800265c:	4d38      	ldr	r5, [pc, #224]	; (8002740 <main+0x1cc>)
 800265e:	4b39      	ldr	r3, [pc, #228]	; (8002744 <main+0x1d0>)
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002660:	4628      	mov	r0, r5
	hadc1.Instance = ADC1;
 8002662:	602b      	str	r3, [r5, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002664:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002668:	60ab      	str	r3, [r5, #8]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800266a:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
	hadc1.Init.ContinuousConvMode = ENABLE;
 800266e:	732e      	strb	r6, [r5, #12]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002670:	61eb      	str	r3, [r5, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002672:	752c      	strb	r4, [r5, #20]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002674:	606c      	str	r4, [r5, #4]
	hadc1.Init.NbrOfConversion = 3;
 8002676:	612f      	str	r7, [r5, #16]
	ADC_ChannelConfTypeDef sConfig = {0};
 8002678:	9407      	str	r4, [sp, #28]
 800267a:	9408      	str	r4, [sp, #32]
 800267c:	9409      	str	r4, [sp, #36]	; 0x24
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800267e:	f7fe fbbb 	bl	8000df8 <HAL_ADC_Init>
	sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8002682:	2306      	movs	r3, #6
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002684:	a907      	add	r1, sp, #28
 8002686:	4628      	mov	r0, r5
	sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8002688:	9309      	str	r3, [sp, #36]	; 0x24
	sConfig.Channel = ADC_CHANNEL_0;
 800268a:	9407      	str	r4, [sp, #28]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800268c:	9608      	str	r6, [sp, #32]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800268e:	f7fe fa47 	bl	8000b20 <HAL_ADC_ConfigChannel>
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002692:	a907      	add	r1, sp, #28
 8002694:	4628      	mov	r0, r5
	sConfig.Channel = ADC_CHANNEL_1;
 8002696:	9607      	str	r6, [sp, #28]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8002698:	f8cd 8020 	str.w	r8, [sp, #32]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800269c:	f7fe fa40 	bl	8000b20 <HAL_ADC_ConfigChannel>
	sConfig.Channel = ADC_CHANNEL_5;
 80026a0:	2305      	movs	r3, #5
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026a2:	a907      	add	r1, sp, #28
 80026a4:	4628      	mov	r0, r5
	sConfig.Channel = ADC_CHANNEL_5;
 80026a6:	9307      	str	r3, [sp, #28]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 80026a8:	9708      	str	r7, [sp, #32]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026aa:	f7fe fa39 	bl	8000b20 <HAL_ADC_ConfigChannel>
	TIM_OC_InitTypeDef sConfigOC = {0};
 80026ae:	221c      	movs	r2, #28
 80026b0:	4621      	mov	r1, r4
 80026b2:	eb0d 0002 	add.w	r0, sp, r2
	htim3.Instance = TIM3;
 80026b6:	4d24      	ldr	r5, [pc, #144]	; (8002748 <main+0x1d4>)
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026b8:	9405      	str	r4, [sp, #20]
 80026ba:	9406      	str	r4, [sp, #24]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80026bc:	f000 f9ba 	bl	8002a34 <memset>
	htim3.Instance = TIM3;
 80026c0:	4b22      	ldr	r3, [pc, #136]	; (800274c <main+0x1d8>)
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80026c2:	4628      	mov	r0, r5
	htim3.Init.Prescaler = 4-1;
 80026c4:	e885 0088 	stmia.w	r5, {r3, r7}
	htim3.Init.Period = 200-1;
 80026c8:	23c7      	movs	r3, #199	; 0xc7
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026ca:	60ac      	str	r4, [r5, #8]
	htim3.Init.Period = 200-1;
 80026cc:	60eb      	str	r3, [r5, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026ce:	612c      	str	r4, [r5, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026d0:	61ac      	str	r4, [r5, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80026d2:	f7ff fa4d 	bl	8001b70 <HAL_TIM_PWM_Init>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80026d6:	a905      	add	r1, sp, #20
 80026d8:	4628      	mov	r0, r5
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026da:	9405      	str	r4, [sp, #20]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026dc:	9406      	str	r4, [sp, #24]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80026de:	f7ff fb59 	bl	8001d94 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026e2:	2360      	movs	r3, #96	; 0x60
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80026e4:	2208      	movs	r2, #8
 80026e6:	a907      	add	r1, sp, #28
 80026e8:	4628      	mov	r0, r5
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026ea:	9307      	str	r3, [sp, #28]
	sConfigOC.Pulse = 0;
 80026ec:	9408      	str	r4, [sp, #32]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026ee:	9409      	str	r4, [sp, #36]	; 0x24
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026f0:	940b      	str	r4, [sp, #44]	; 0x2c
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80026f2:	f7ff fa95 	bl	8001c20 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_MspPostInit(&htim3);
 80026f6:	4628      	mov	r0, r5
 80026f8:	f000 f8b2 	bl	8002860 <HAL_TIM_MspPostInit>
	HAL_TIM_Base_Start(&htim3);
 80026fc:	4628      	mov	r0, r5
 80026fe:	f7ff f9d9 	bl	8001ab4 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8002702:	2108      	movs	r1, #8
 8002704:	4628      	mov	r0, r5
 8002706:	f7ff faf7 	bl	8001cf8 <HAL_TIM_PWM_Start>
	huart3.Init.BaudRate = 9600;
 800270a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
	huart3.Instance = USART3;
 800270e:	4810      	ldr	r0, [pc, #64]	; (8002750 <main+0x1dc>)
	huart3.Init.BaudRate = 9600;
 8002710:	4a10      	ldr	r2, [pc, #64]	; (8002754 <main+0x1e0>)
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002712:	6084      	str	r4, [r0, #8]
	huart3.Init.BaudRate = 9600;
 8002714:	e880 000c 	stmia.w	r0, {r2, r3}
	huart3.Init.Mode = UART_MODE_TX_RX;
 8002718:	230c      	movs	r3, #12
	huart3.Init.StopBits = UART_STOPBITS_1;
 800271a:	60c4      	str	r4, [r0, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 800271c:	6104      	str	r4, [r0, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 800271e:	6143      	str	r3, [r0, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002720:	6184      	str	r4, [r0, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002722:	61c4      	str	r4, [r0, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8002724:	f7ff fbca 	bl	8001ebc <HAL_UART_Init>
		EVMS_Init();
 8002728:	f7ff fca6 	bl	8002078 <EVMS_Init>
		loop();
 800272c:	f7ff feb6 	bl	800249c <loop>
 8002730:	e7fa      	b.n	8002728 <main+0x1b4>
 8002732:	bf00      	nop
 8002734:	40021000 	.word	0x40021000
 8002738:	40010800 	.word	0x40010800
 800273c:	40010c00 	.word	0x40010c00
 8002740:	20000128 	.word	0x20000128
 8002744:	40012400 	.word	0x40012400
 8002748:	200000e0 	.word	0x200000e0
 800274c:	40000400 	.word	0x40000400
 8002750:	200000a0 	.word	0x200000a0
 8002754:	40004800 	.word	0x40004800

08002758 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002758:	4770      	bx	lr
	...

0800275c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800275c:	4b0e      	ldr	r3, [pc, #56]	; (8002798 <HAL_MspInit+0x3c>)
{
 800275e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002760:	699a      	ldr	r2, [r3, #24]
 8002762:	f042 0201 	orr.w	r2, r2, #1
 8002766:	619a      	str	r2, [r3, #24]
 8002768:	699a      	ldr	r2, [r3, #24]
 800276a:	f002 0201 	and.w	r2, r2, #1
 800276e:	9200      	str	r2, [sp, #0]
 8002770:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002772:	69da      	ldr	r2, [r3, #28]
 8002774:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002778:	61da      	str	r2, [r3, #28]
 800277a:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800277c:	4a07      	ldr	r2, [pc, #28]	; (800279c <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800277e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002782:	9301      	str	r3, [sp, #4]
 8002784:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8002786:	6853      	ldr	r3, [r2, #4]
 8002788:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800278c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002790:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002792:	b002      	add	sp, #8
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	40021000 	.word	0x40021000
 800279c:	40010000 	.word	0x40010000

080027a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80027a0:	b530      	push	{r4, r5, lr}
 80027a2:	4605      	mov	r5, r0
 80027a4:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a6:	2210      	movs	r2, #16
 80027a8:	2100      	movs	r1, #0
 80027aa:	a802      	add	r0, sp, #8
 80027ac:	f000 f942 	bl	8002a34 <memset>
  if(hadc->Instance==ADC1)
 80027b0:	682a      	ldr	r2, [r5, #0]
 80027b2:	4b1d      	ldr	r3, [pc, #116]	; (8002828 <HAL_ADC_MspInit+0x88>)
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d134      	bne.n	8002822 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80027b8:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 80027bc:	699a      	ldr	r2, [r3, #24]
    PA1     ------> ADC1_IN1
    PA5     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = APPS1_Pin|APPS2_Pin|BRAKES_ANGLE_SENSOR_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027be:	481b      	ldr	r0, [pc, #108]	; (800282c <HAL_ADC_MspInit+0x8c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80027c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027c4:	619a      	str	r2, [r3, #24]
 80027c6:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027c8:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 80027ca:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80027ce:	9200      	str	r2, [sp, #0]
 80027d0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027d2:	699a      	ldr	r2, [r3, #24]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80027d4:	4c16      	ldr	r4, [pc, #88]	; (8002830 <HAL_ADC_MspInit+0x90>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027d6:	f042 0204 	orr.w	r2, r2, #4
 80027da:	619a      	str	r2, [r3, #24]
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	f003 0304 	and.w	r3, r3, #4
 80027e2:	9301      	str	r3, [sp, #4]
 80027e4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = APPS1_Pin|APPS2_Pin|BRAKES_ANGLE_SENSOR_Pin;
 80027e6:	2323      	movs	r3, #35	; 0x23
 80027e8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027ea:	2303      	movs	r3, #3
 80027ec:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ee:	f7fe fcef 	bl	80011d0 <HAL_GPIO_Init>
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80027f2:	2280      	movs	r2, #128	; 0x80
 80027f4:	60e2      	str	r2, [r4, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80027f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027fa:	6122      	str	r2, [r4, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80027fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_adc1.Instance = DMA1_Channel1;
 8002800:	4b0c      	ldr	r3, [pc, #48]	; (8002834 <HAL_ADC_MspInit+0x94>)
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002802:	6162      	str	r2, [r4, #20]
    hdma_adc1.Instance = DMA1_Channel1;
 8002804:	6023      	str	r3, [r4, #0]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002806:	2220      	movs	r2, #32
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002808:	2300      	movs	r3, #0
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800280a:	4620      	mov	r0, r4
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800280c:	6063      	str	r3, [r4, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800280e:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002810:	61a2      	str	r2, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002812:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002814:	f7fe fbda 	bl	8000fcc <HAL_DMA_Init>
 8002818:	b108      	cbz	r0, 800281e <HAL_ADC_MspInit+0x7e>
    {
      Error_Handler();
 800281a:	f7ff ff9d 	bl	8002758 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800281e:	622c      	str	r4, [r5, #32]
 8002820:	6265      	str	r5, [r4, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002822:	b007      	add	sp, #28
 8002824:	bd30      	pop	{r4, r5, pc}
 8002826:	bf00      	nop
 8002828:	40012400 	.word	0x40012400
 800282c:	40010800 	.word	0x40010800
 8002830:	2000015c 	.word	0x2000015c
 8002834:	40020008 	.word	0x40020008

08002838 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM3)
 8002838:	6802      	ldr	r2, [r0, #0]
 800283a:	4b08      	ldr	r3, [pc, #32]	; (800285c <HAL_TIM_PWM_MspInit+0x24>)
{
 800283c:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM3)
 800283e:	429a      	cmp	r2, r3
 8002840:	d10a      	bne.n	8002858 <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002842:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8002846:	69da      	ldr	r2, [r3, #28]
 8002848:	f042 0202 	orr.w	r2, r2, #2
 800284c:	61da      	str	r2, [r3, #28]
 800284e:	69db      	ldr	r3, [r3, #28]
 8002850:	f003 0302 	and.w	r3, r3, #2
 8002854:	9301      	str	r3, [sp, #4]
 8002856:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002858:	b002      	add	sp, #8
 800285a:	4770      	bx	lr
 800285c:	40000400 	.word	0x40000400

08002860 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002860:	b510      	push	{r4, lr}
 8002862:	4604      	mov	r4, r0
 8002864:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002866:	2210      	movs	r2, #16
 8002868:	2100      	movs	r1, #0
 800286a:	a802      	add	r0, sp, #8
 800286c:	f000 f8e2 	bl	8002a34 <memset>
  if(htim->Instance==TIM3)
 8002870:	6822      	ldr	r2, [r4, #0]
 8002872:	4b0c      	ldr	r3, [pc, #48]	; (80028a4 <HAL_TIM_MspPostInit+0x44>)
 8002874:	429a      	cmp	r2, r3
 8002876:	d113      	bne.n	80028a0 <HAL_TIM_MspPostInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002878:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 800287c:	699a      	ldr	r2, [r3, #24]
    PB0     ------> TIM3_CH3 
    */
    GPIO_InitStruct.Pin = MOTOR_PWM_OUTPUT_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(MOTOR_PWM_OUTPUT_GPIO_Port, &GPIO_InitStruct);
 800287e:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002880:	f042 0208 	orr.w	r2, r2, #8
 8002884:	619a      	str	r2, [r3, #24]
 8002886:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(MOTOR_PWM_OUTPUT_GPIO_Port, &GPIO_InitStruct);
 8002888:	4807      	ldr	r0, [pc, #28]	; (80028a8 <HAL_TIM_MspPostInit+0x48>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800288a:	f003 0308 	and.w	r3, r3, #8
 800288e:	9301      	str	r3, [sp, #4]
 8002890:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = MOTOR_PWM_OUTPUT_Pin;
 8002892:	2301      	movs	r3, #1
 8002894:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002896:	2302      	movs	r3, #2
 8002898:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800289a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(MOTOR_PWM_OUTPUT_GPIO_Port, &GPIO_InitStruct);
 800289c:	f7fe fc98 	bl	80011d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80028a0:	b006      	add	sp, #24
 80028a2:	bd10      	pop	{r4, pc}
 80028a4:	40000400 	.word	0x40000400
 80028a8:	40010c00 	.word	0x40010c00

080028ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028ac:	b510      	push	{r4, lr}
 80028ae:	4604      	mov	r4, r0
 80028b0:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b2:	2210      	movs	r2, #16
 80028b4:	2100      	movs	r1, #0
 80028b6:	a802      	add	r0, sp, #8
 80028b8:	f000 f8bc 	bl	8002a34 <memset>
  if(huart->Instance==USART3)
 80028bc:	6822      	ldr	r2, [r4, #0]
 80028be:	4b17      	ldr	r3, [pc, #92]	; (800291c <HAL_UART_MspInit+0x70>)
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d128      	bne.n	8002916 <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80028c4:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 80028c8:	69da      	ldr	r2, [r3, #28]
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028ca:	a902      	add	r1, sp, #8
    __HAL_RCC_USART3_CLK_ENABLE();
 80028cc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80028d0:	61da      	str	r2, [r3, #28]
 80028d2:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028d4:	4812      	ldr	r0, [pc, #72]	; (8002920 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80028d6:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80028da:	9200      	str	r2, [sp, #0]
 80028dc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028de:	699a      	ldr	r2, [r3, #24]
 80028e0:	f042 0208 	orr.w	r2, r2, #8
 80028e4:	619a      	str	r2, [r3, #24]
 80028e6:	699b      	ldr	r3, [r3, #24]
 80028e8:	f003 0308 	and.w	r3, r3, #8
 80028ec:	9301      	str	r3, [sp, #4]
 80028ee:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80028f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028f4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f6:	2302      	movs	r3, #2
 80028f8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028fa:	2303      	movs	r3, #3
 80028fc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028fe:	f7fe fc67 	bl	80011d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002902:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002906:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002908:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800290a:	a902      	add	r1, sp, #8
 800290c:	4804      	ldr	r0, [pc, #16]	; (8002920 <HAL_UART_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800290e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002910:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002912:	f7fe fc5d 	bl	80011d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002916:	b006      	add	sp, #24
 8002918:	bd10      	pop	{r4, pc}
 800291a:	bf00      	nop
 800291c:	40004800 	.word	0x40004800
 8002920:	40010c00 	.word	0x40010c00

08002924 <NMI_Handler>:
 8002924:	4770      	bx	lr

08002926 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002926:	e7fe      	b.n	8002926 <HardFault_Handler>

08002928 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002928:	e7fe      	b.n	8002928 <MemManage_Handler>

0800292a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800292a:	e7fe      	b.n	800292a <BusFault_Handler>

0800292c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800292c:	e7fe      	b.n	800292c <UsageFault_Handler>

0800292e <SVC_Handler>:
 800292e:	4770      	bx	lr

08002930 <DebugMon_Handler>:
 8002930:	4770      	bx	lr

08002932 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002932:	4770      	bx	lr

08002934 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002934:	f7fe b894 	b.w	8000a60 <HAL_IncTick>

08002938 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002938:	4801      	ldr	r0, [pc, #4]	; (8002940 <DMA1_Channel1_IRQHandler+0x8>)
 800293a:	f7fe bbb5 	b.w	80010a8 <HAL_DMA_IRQHandler>
 800293e:	bf00      	nop
 8002940:	2000015c 	.word	0x2000015c

08002944 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8002944:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002946:	4b0a      	ldr	r3, [pc, #40]	; (8002970 <_sbrk+0x2c>)
{
 8002948:	4602      	mov	r2, r0
	if (heap_end == 0)
 800294a:	6819      	ldr	r1, [r3, #0]
 800294c:	b909      	cbnz	r1, 8002952 <_sbrk+0xe>
		heap_end = &end;
 800294e:	4909      	ldr	r1, [pc, #36]	; (8002974 <_sbrk+0x30>)
 8002950:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8002952:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8002954:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8002956:	4402      	add	r2, r0
 8002958:	428a      	cmp	r2, r1
 800295a:	d906      	bls.n	800296a <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800295c:	f000 f840 	bl	80029e0 <__errno>
 8002960:	230c      	movs	r3, #12
 8002962:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8002964:	f04f 30ff 	mov.w	r0, #4294967295
 8002968:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 800296a:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 800296c:	bd08      	pop	{r3, pc}
 800296e:	bf00      	nop
 8002970:	20000090 	.word	0x20000090
 8002974:	200001ac 	.word	0x200001ac

08002978 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002978:	4770      	bx	lr

0800297a <map>:
#include "utility_funcs.h"


uint16_t map(uint16_t x, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max) 
{
 800297a:	b510      	push	{r4, lr}
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800297c:	1a44      	subs	r4, r0, r1
 800297e:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 8002982:	1a52      	subs	r2, r2, r1
 8002984:	1ac0      	subs	r0, r0, r3
 8002986:	4360      	muls	r0, r4
 8002988:	fb90 f0f2 	sdiv	r0, r0, r2
 800298c:	4418      	add	r0, r3
}
 800298e:	b280      	uxth	r0, r0
 8002990:	bd10      	pop	{r4, pc}
	...

08002994 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002994:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002996:	e003      	b.n	80029a0 <LoopCopyDataInit>

08002998 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002998:	4b0b      	ldr	r3, [pc, #44]	; (80029c8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800299a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800299c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800299e:	3104      	adds	r1, #4

080029a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80029a0:	480a      	ldr	r0, [pc, #40]	; (80029cc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80029a2:	4b0b      	ldr	r3, [pc, #44]	; (80029d0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80029a4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80029a6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80029a8:	d3f6      	bcc.n	8002998 <CopyDataInit>
  ldr r2, =_sbss
 80029aa:	4a0a      	ldr	r2, [pc, #40]	; (80029d4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80029ac:	e002      	b.n	80029b4 <LoopFillZerobss>

080029ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80029ae:	2300      	movs	r3, #0
  str r3, [r2], #4
 80029b0:	f842 3b04 	str.w	r3, [r2], #4

080029b4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80029b4:	4b08      	ldr	r3, [pc, #32]	; (80029d8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80029b6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80029b8:	d3f9      	bcc.n	80029ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80029ba:	f7ff ffdd 	bl	8002978 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029be:	f000 f815 	bl	80029ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80029c2:	f7ff fdd7 	bl	8002574 <main>
  bx lr
 80029c6:	4770      	bx	lr
  ldr r3, =_sidata
 80029c8:	0800332c 	.word	0x0800332c
  ldr r0, =_sdata
 80029cc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80029d0:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 80029d4:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80029d8:	200001ac 	.word	0x200001ac

080029dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80029dc:	e7fe      	b.n	80029dc <ADC1_2_IRQHandler>
	...

080029e0 <__errno>:
 80029e0:	4b01      	ldr	r3, [pc, #4]	; (80029e8 <__errno+0x8>)
 80029e2:	6818      	ldr	r0, [r3, #0]
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	2000000c 	.word	0x2000000c

080029ec <__libc_init_array>:
 80029ec:	b570      	push	{r4, r5, r6, lr}
 80029ee:	2500      	movs	r5, #0
 80029f0:	4e0c      	ldr	r6, [pc, #48]	; (8002a24 <__libc_init_array+0x38>)
 80029f2:	4c0d      	ldr	r4, [pc, #52]	; (8002a28 <__libc_init_array+0x3c>)
 80029f4:	1ba4      	subs	r4, r4, r6
 80029f6:	10a4      	asrs	r4, r4, #2
 80029f8:	42a5      	cmp	r5, r4
 80029fa:	d109      	bne.n	8002a10 <__libc_init_array+0x24>
 80029fc:	f000 fc4e 	bl	800329c <_init>
 8002a00:	2500      	movs	r5, #0
 8002a02:	4e0a      	ldr	r6, [pc, #40]	; (8002a2c <__libc_init_array+0x40>)
 8002a04:	4c0a      	ldr	r4, [pc, #40]	; (8002a30 <__libc_init_array+0x44>)
 8002a06:	1ba4      	subs	r4, r4, r6
 8002a08:	10a4      	asrs	r4, r4, #2
 8002a0a:	42a5      	cmp	r5, r4
 8002a0c:	d105      	bne.n	8002a1a <__libc_init_array+0x2e>
 8002a0e:	bd70      	pop	{r4, r5, r6, pc}
 8002a10:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a14:	4798      	blx	r3
 8002a16:	3501      	adds	r5, #1
 8002a18:	e7ee      	b.n	80029f8 <__libc_init_array+0xc>
 8002a1a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a1e:	4798      	blx	r3
 8002a20:	3501      	adds	r5, #1
 8002a22:	e7f2      	b.n	8002a0a <__libc_init_array+0x1e>
 8002a24:	08003324 	.word	0x08003324
 8002a28:	08003324 	.word	0x08003324
 8002a2c:	08003324 	.word	0x08003324
 8002a30:	08003328 	.word	0x08003328

08002a34 <memset>:
 8002a34:	4603      	mov	r3, r0
 8002a36:	4402      	add	r2, r0
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d100      	bne.n	8002a3e <memset+0xa>
 8002a3c:	4770      	bx	lr
 8002a3e:	f803 1b01 	strb.w	r1, [r3], #1
 8002a42:	e7f9      	b.n	8002a38 <memset+0x4>

08002a44 <siprintf>:
 8002a44:	b40e      	push	{r1, r2, r3}
 8002a46:	f44f 7102 	mov.w	r1, #520	; 0x208
 8002a4a:	b500      	push	{lr}
 8002a4c:	b09c      	sub	sp, #112	; 0x70
 8002a4e:	f8ad 1014 	strh.w	r1, [sp, #20]
 8002a52:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002a56:	9104      	str	r1, [sp, #16]
 8002a58:	9107      	str	r1, [sp, #28]
 8002a5a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002a5e:	ab1d      	add	r3, sp, #116	; 0x74
 8002a60:	9002      	str	r0, [sp, #8]
 8002a62:	9006      	str	r0, [sp, #24]
 8002a64:	4808      	ldr	r0, [pc, #32]	; (8002a88 <siprintf+0x44>)
 8002a66:	f853 2b04 	ldr.w	r2, [r3], #4
 8002a6a:	f8ad 1016 	strh.w	r1, [sp, #22]
 8002a6e:	6800      	ldr	r0, [r0, #0]
 8002a70:	a902      	add	r1, sp, #8
 8002a72:	9301      	str	r3, [sp, #4]
 8002a74:	f000 f866 	bl	8002b44 <_svfiprintf_r>
 8002a78:	2200      	movs	r2, #0
 8002a7a:	9b02      	ldr	r3, [sp, #8]
 8002a7c:	701a      	strb	r2, [r3, #0]
 8002a7e:	b01c      	add	sp, #112	; 0x70
 8002a80:	f85d eb04 	ldr.w	lr, [sp], #4
 8002a84:	b003      	add	sp, #12
 8002a86:	4770      	bx	lr
 8002a88:	2000000c 	.word	0x2000000c

08002a8c <__ssputs_r>:
 8002a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a90:	688e      	ldr	r6, [r1, #8]
 8002a92:	4682      	mov	sl, r0
 8002a94:	429e      	cmp	r6, r3
 8002a96:	460c      	mov	r4, r1
 8002a98:	4691      	mov	r9, r2
 8002a9a:	4698      	mov	r8, r3
 8002a9c:	d835      	bhi.n	8002b0a <__ssputs_r+0x7e>
 8002a9e:	898a      	ldrh	r2, [r1, #12]
 8002aa0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002aa4:	d031      	beq.n	8002b0a <__ssputs_r+0x7e>
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	6825      	ldr	r5, [r4, #0]
 8002aaa:	6909      	ldr	r1, [r1, #16]
 8002aac:	1a6f      	subs	r7, r5, r1
 8002aae:	6965      	ldr	r5, [r4, #20]
 8002ab0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002ab4:	fb95 f5f3 	sdiv	r5, r5, r3
 8002ab8:	f108 0301 	add.w	r3, r8, #1
 8002abc:	443b      	add	r3, r7
 8002abe:	429d      	cmp	r5, r3
 8002ac0:	bf38      	it	cc
 8002ac2:	461d      	movcc	r5, r3
 8002ac4:	0553      	lsls	r3, r2, #21
 8002ac6:	d531      	bpl.n	8002b2c <__ssputs_r+0xa0>
 8002ac8:	4629      	mov	r1, r5
 8002aca:	f000 fb47 	bl	800315c <_malloc_r>
 8002ace:	4606      	mov	r6, r0
 8002ad0:	b950      	cbnz	r0, 8002ae8 <__ssputs_r+0x5c>
 8002ad2:	230c      	movs	r3, #12
 8002ad4:	f8ca 3000 	str.w	r3, [sl]
 8002ad8:	89a3      	ldrh	r3, [r4, #12]
 8002ada:	f04f 30ff 	mov.w	r0, #4294967295
 8002ade:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ae2:	81a3      	strh	r3, [r4, #12]
 8002ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ae8:	463a      	mov	r2, r7
 8002aea:	6921      	ldr	r1, [r4, #16]
 8002aec:	f000 fac4 	bl	8003078 <memcpy>
 8002af0:	89a3      	ldrh	r3, [r4, #12]
 8002af2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002af6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002afa:	81a3      	strh	r3, [r4, #12]
 8002afc:	6126      	str	r6, [r4, #16]
 8002afe:	443e      	add	r6, r7
 8002b00:	6026      	str	r6, [r4, #0]
 8002b02:	4646      	mov	r6, r8
 8002b04:	6165      	str	r5, [r4, #20]
 8002b06:	1bed      	subs	r5, r5, r7
 8002b08:	60a5      	str	r5, [r4, #8]
 8002b0a:	4546      	cmp	r6, r8
 8002b0c:	bf28      	it	cs
 8002b0e:	4646      	movcs	r6, r8
 8002b10:	4649      	mov	r1, r9
 8002b12:	4632      	mov	r2, r6
 8002b14:	6820      	ldr	r0, [r4, #0]
 8002b16:	f000 faba 	bl	800308e <memmove>
 8002b1a:	68a3      	ldr	r3, [r4, #8]
 8002b1c:	2000      	movs	r0, #0
 8002b1e:	1b9b      	subs	r3, r3, r6
 8002b20:	60a3      	str	r3, [r4, #8]
 8002b22:	6823      	ldr	r3, [r4, #0]
 8002b24:	441e      	add	r6, r3
 8002b26:	6026      	str	r6, [r4, #0]
 8002b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b2c:	462a      	mov	r2, r5
 8002b2e:	f000 fb73 	bl	8003218 <_realloc_r>
 8002b32:	4606      	mov	r6, r0
 8002b34:	2800      	cmp	r0, #0
 8002b36:	d1e1      	bne.n	8002afc <__ssputs_r+0x70>
 8002b38:	6921      	ldr	r1, [r4, #16]
 8002b3a:	4650      	mov	r0, sl
 8002b3c:	f000 fac2 	bl	80030c4 <_free_r>
 8002b40:	e7c7      	b.n	8002ad2 <__ssputs_r+0x46>
	...

08002b44 <_svfiprintf_r>:
 8002b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b48:	b09d      	sub	sp, #116	; 0x74
 8002b4a:	9303      	str	r3, [sp, #12]
 8002b4c:	898b      	ldrh	r3, [r1, #12]
 8002b4e:	4680      	mov	r8, r0
 8002b50:	061c      	lsls	r4, r3, #24
 8002b52:	460d      	mov	r5, r1
 8002b54:	4616      	mov	r6, r2
 8002b56:	d50f      	bpl.n	8002b78 <_svfiprintf_r+0x34>
 8002b58:	690b      	ldr	r3, [r1, #16]
 8002b5a:	b96b      	cbnz	r3, 8002b78 <_svfiprintf_r+0x34>
 8002b5c:	2140      	movs	r1, #64	; 0x40
 8002b5e:	f000 fafd 	bl	800315c <_malloc_r>
 8002b62:	6028      	str	r0, [r5, #0]
 8002b64:	6128      	str	r0, [r5, #16]
 8002b66:	b928      	cbnz	r0, 8002b74 <_svfiprintf_r+0x30>
 8002b68:	230c      	movs	r3, #12
 8002b6a:	f8c8 3000 	str.w	r3, [r8]
 8002b6e:	f04f 30ff 	mov.w	r0, #4294967295
 8002b72:	e0c4      	b.n	8002cfe <_svfiprintf_r+0x1ba>
 8002b74:	2340      	movs	r3, #64	; 0x40
 8002b76:	616b      	str	r3, [r5, #20]
 8002b78:	2300      	movs	r3, #0
 8002b7a:	9309      	str	r3, [sp, #36]	; 0x24
 8002b7c:	2320      	movs	r3, #32
 8002b7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002b82:	2330      	movs	r3, #48	; 0x30
 8002b84:	f04f 0b01 	mov.w	fp, #1
 8002b88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002b8c:	4637      	mov	r7, r6
 8002b8e:	463c      	mov	r4, r7
 8002b90:	f814 3b01 	ldrb.w	r3, [r4], #1
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d13c      	bne.n	8002c12 <_svfiprintf_r+0xce>
 8002b98:	ebb7 0a06 	subs.w	sl, r7, r6
 8002b9c:	d00b      	beq.n	8002bb6 <_svfiprintf_r+0x72>
 8002b9e:	4653      	mov	r3, sl
 8002ba0:	4632      	mov	r2, r6
 8002ba2:	4629      	mov	r1, r5
 8002ba4:	4640      	mov	r0, r8
 8002ba6:	f7ff ff71 	bl	8002a8c <__ssputs_r>
 8002baa:	3001      	adds	r0, #1
 8002bac:	f000 80a2 	beq.w	8002cf4 <_svfiprintf_r+0x1b0>
 8002bb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002bb2:	4453      	add	r3, sl
 8002bb4:	9309      	str	r3, [sp, #36]	; 0x24
 8002bb6:	783b      	ldrb	r3, [r7, #0]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f000 809b 	beq.w	8002cf4 <_svfiprintf_r+0x1b0>
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8002bc4:	9304      	str	r3, [sp, #16]
 8002bc6:	9307      	str	r3, [sp, #28]
 8002bc8:	9205      	str	r2, [sp, #20]
 8002bca:	9306      	str	r3, [sp, #24]
 8002bcc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002bd0:	931a      	str	r3, [sp, #104]	; 0x68
 8002bd2:	2205      	movs	r2, #5
 8002bd4:	7821      	ldrb	r1, [r4, #0]
 8002bd6:	4850      	ldr	r0, [pc, #320]	; (8002d18 <_svfiprintf_r+0x1d4>)
 8002bd8:	f000 fa40 	bl	800305c <memchr>
 8002bdc:	1c67      	adds	r7, r4, #1
 8002bde:	9b04      	ldr	r3, [sp, #16]
 8002be0:	b9d8      	cbnz	r0, 8002c1a <_svfiprintf_r+0xd6>
 8002be2:	06d9      	lsls	r1, r3, #27
 8002be4:	bf44      	itt	mi
 8002be6:	2220      	movmi	r2, #32
 8002be8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002bec:	071a      	lsls	r2, r3, #28
 8002bee:	bf44      	itt	mi
 8002bf0:	222b      	movmi	r2, #43	; 0x2b
 8002bf2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002bf6:	7822      	ldrb	r2, [r4, #0]
 8002bf8:	2a2a      	cmp	r2, #42	; 0x2a
 8002bfa:	d016      	beq.n	8002c2a <_svfiprintf_r+0xe6>
 8002bfc:	2100      	movs	r1, #0
 8002bfe:	200a      	movs	r0, #10
 8002c00:	9a07      	ldr	r2, [sp, #28]
 8002c02:	4627      	mov	r7, r4
 8002c04:	783b      	ldrb	r3, [r7, #0]
 8002c06:	3401      	adds	r4, #1
 8002c08:	3b30      	subs	r3, #48	; 0x30
 8002c0a:	2b09      	cmp	r3, #9
 8002c0c:	d950      	bls.n	8002cb0 <_svfiprintf_r+0x16c>
 8002c0e:	b1c9      	cbz	r1, 8002c44 <_svfiprintf_r+0x100>
 8002c10:	e011      	b.n	8002c36 <_svfiprintf_r+0xf2>
 8002c12:	2b25      	cmp	r3, #37	; 0x25
 8002c14:	d0c0      	beq.n	8002b98 <_svfiprintf_r+0x54>
 8002c16:	4627      	mov	r7, r4
 8002c18:	e7b9      	b.n	8002b8e <_svfiprintf_r+0x4a>
 8002c1a:	4a3f      	ldr	r2, [pc, #252]	; (8002d18 <_svfiprintf_r+0x1d4>)
 8002c1c:	463c      	mov	r4, r7
 8002c1e:	1a80      	subs	r0, r0, r2
 8002c20:	fa0b f000 	lsl.w	r0, fp, r0
 8002c24:	4318      	orrs	r0, r3
 8002c26:	9004      	str	r0, [sp, #16]
 8002c28:	e7d3      	b.n	8002bd2 <_svfiprintf_r+0x8e>
 8002c2a:	9a03      	ldr	r2, [sp, #12]
 8002c2c:	1d11      	adds	r1, r2, #4
 8002c2e:	6812      	ldr	r2, [r2, #0]
 8002c30:	9103      	str	r1, [sp, #12]
 8002c32:	2a00      	cmp	r2, #0
 8002c34:	db01      	blt.n	8002c3a <_svfiprintf_r+0xf6>
 8002c36:	9207      	str	r2, [sp, #28]
 8002c38:	e004      	b.n	8002c44 <_svfiprintf_r+0x100>
 8002c3a:	4252      	negs	r2, r2
 8002c3c:	f043 0302 	orr.w	r3, r3, #2
 8002c40:	9207      	str	r2, [sp, #28]
 8002c42:	9304      	str	r3, [sp, #16]
 8002c44:	783b      	ldrb	r3, [r7, #0]
 8002c46:	2b2e      	cmp	r3, #46	; 0x2e
 8002c48:	d10d      	bne.n	8002c66 <_svfiprintf_r+0x122>
 8002c4a:	787b      	ldrb	r3, [r7, #1]
 8002c4c:	1c79      	adds	r1, r7, #1
 8002c4e:	2b2a      	cmp	r3, #42	; 0x2a
 8002c50:	d132      	bne.n	8002cb8 <_svfiprintf_r+0x174>
 8002c52:	9b03      	ldr	r3, [sp, #12]
 8002c54:	3702      	adds	r7, #2
 8002c56:	1d1a      	adds	r2, r3, #4
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	9203      	str	r2, [sp, #12]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	bfb8      	it	lt
 8002c60:	f04f 33ff 	movlt.w	r3, #4294967295
 8002c64:	9305      	str	r3, [sp, #20]
 8002c66:	4c2d      	ldr	r4, [pc, #180]	; (8002d1c <_svfiprintf_r+0x1d8>)
 8002c68:	2203      	movs	r2, #3
 8002c6a:	7839      	ldrb	r1, [r7, #0]
 8002c6c:	4620      	mov	r0, r4
 8002c6e:	f000 f9f5 	bl	800305c <memchr>
 8002c72:	b138      	cbz	r0, 8002c84 <_svfiprintf_r+0x140>
 8002c74:	2340      	movs	r3, #64	; 0x40
 8002c76:	1b00      	subs	r0, r0, r4
 8002c78:	fa03 f000 	lsl.w	r0, r3, r0
 8002c7c:	9b04      	ldr	r3, [sp, #16]
 8002c7e:	3701      	adds	r7, #1
 8002c80:	4303      	orrs	r3, r0
 8002c82:	9304      	str	r3, [sp, #16]
 8002c84:	7839      	ldrb	r1, [r7, #0]
 8002c86:	2206      	movs	r2, #6
 8002c88:	4825      	ldr	r0, [pc, #148]	; (8002d20 <_svfiprintf_r+0x1dc>)
 8002c8a:	1c7e      	adds	r6, r7, #1
 8002c8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002c90:	f000 f9e4 	bl	800305c <memchr>
 8002c94:	2800      	cmp	r0, #0
 8002c96:	d035      	beq.n	8002d04 <_svfiprintf_r+0x1c0>
 8002c98:	4b22      	ldr	r3, [pc, #136]	; (8002d24 <_svfiprintf_r+0x1e0>)
 8002c9a:	b9fb      	cbnz	r3, 8002cdc <_svfiprintf_r+0x198>
 8002c9c:	9b03      	ldr	r3, [sp, #12]
 8002c9e:	3307      	adds	r3, #7
 8002ca0:	f023 0307 	bic.w	r3, r3, #7
 8002ca4:	3308      	adds	r3, #8
 8002ca6:	9303      	str	r3, [sp, #12]
 8002ca8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002caa:	444b      	add	r3, r9
 8002cac:	9309      	str	r3, [sp, #36]	; 0x24
 8002cae:	e76d      	b.n	8002b8c <_svfiprintf_r+0x48>
 8002cb0:	fb00 3202 	mla	r2, r0, r2, r3
 8002cb4:	2101      	movs	r1, #1
 8002cb6:	e7a4      	b.n	8002c02 <_svfiprintf_r+0xbe>
 8002cb8:	2300      	movs	r3, #0
 8002cba:	240a      	movs	r4, #10
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	9305      	str	r3, [sp, #20]
 8002cc0:	460f      	mov	r7, r1
 8002cc2:	783a      	ldrb	r2, [r7, #0]
 8002cc4:	3101      	adds	r1, #1
 8002cc6:	3a30      	subs	r2, #48	; 0x30
 8002cc8:	2a09      	cmp	r2, #9
 8002cca:	d903      	bls.n	8002cd4 <_svfiprintf_r+0x190>
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d0ca      	beq.n	8002c66 <_svfiprintf_r+0x122>
 8002cd0:	9005      	str	r0, [sp, #20]
 8002cd2:	e7c8      	b.n	8002c66 <_svfiprintf_r+0x122>
 8002cd4:	fb04 2000 	mla	r0, r4, r0, r2
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e7f1      	b.n	8002cc0 <_svfiprintf_r+0x17c>
 8002cdc:	ab03      	add	r3, sp, #12
 8002cde:	9300      	str	r3, [sp, #0]
 8002ce0:	462a      	mov	r2, r5
 8002ce2:	4b11      	ldr	r3, [pc, #68]	; (8002d28 <_svfiprintf_r+0x1e4>)
 8002ce4:	a904      	add	r1, sp, #16
 8002ce6:	4640      	mov	r0, r8
 8002ce8:	f3af 8000 	nop.w
 8002cec:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002cf0:	4681      	mov	r9, r0
 8002cf2:	d1d9      	bne.n	8002ca8 <_svfiprintf_r+0x164>
 8002cf4:	89ab      	ldrh	r3, [r5, #12]
 8002cf6:	065b      	lsls	r3, r3, #25
 8002cf8:	f53f af39 	bmi.w	8002b6e <_svfiprintf_r+0x2a>
 8002cfc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002cfe:	b01d      	add	sp, #116	; 0x74
 8002d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d04:	ab03      	add	r3, sp, #12
 8002d06:	9300      	str	r3, [sp, #0]
 8002d08:	462a      	mov	r2, r5
 8002d0a:	4b07      	ldr	r3, [pc, #28]	; (8002d28 <_svfiprintf_r+0x1e4>)
 8002d0c:	a904      	add	r1, sp, #16
 8002d0e:	4640      	mov	r0, r8
 8002d10:	f000 f884 	bl	8002e1c <_printf_i>
 8002d14:	e7ea      	b.n	8002cec <_svfiprintf_r+0x1a8>
 8002d16:	bf00      	nop
 8002d18:	080032ee 	.word	0x080032ee
 8002d1c:	080032f4 	.word	0x080032f4
 8002d20:	080032f8 	.word	0x080032f8
 8002d24:	00000000 	.word	0x00000000
 8002d28:	08002a8d 	.word	0x08002a8d

08002d2c <_printf_common>:
 8002d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d30:	4691      	mov	r9, r2
 8002d32:	461f      	mov	r7, r3
 8002d34:	688a      	ldr	r2, [r1, #8]
 8002d36:	690b      	ldr	r3, [r1, #16]
 8002d38:	4606      	mov	r6, r0
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	bfb8      	it	lt
 8002d3e:	4613      	movlt	r3, r2
 8002d40:	f8c9 3000 	str.w	r3, [r9]
 8002d44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002d48:	460c      	mov	r4, r1
 8002d4a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002d4e:	b112      	cbz	r2, 8002d56 <_printf_common+0x2a>
 8002d50:	3301      	adds	r3, #1
 8002d52:	f8c9 3000 	str.w	r3, [r9]
 8002d56:	6823      	ldr	r3, [r4, #0]
 8002d58:	0699      	lsls	r1, r3, #26
 8002d5a:	bf42      	ittt	mi
 8002d5c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002d60:	3302      	addmi	r3, #2
 8002d62:	f8c9 3000 	strmi.w	r3, [r9]
 8002d66:	6825      	ldr	r5, [r4, #0]
 8002d68:	f015 0506 	ands.w	r5, r5, #6
 8002d6c:	d107      	bne.n	8002d7e <_printf_common+0x52>
 8002d6e:	f104 0a19 	add.w	sl, r4, #25
 8002d72:	68e3      	ldr	r3, [r4, #12]
 8002d74:	f8d9 2000 	ldr.w	r2, [r9]
 8002d78:	1a9b      	subs	r3, r3, r2
 8002d7a:	429d      	cmp	r5, r3
 8002d7c:	db2a      	blt.n	8002dd4 <_printf_common+0xa8>
 8002d7e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002d82:	6822      	ldr	r2, [r4, #0]
 8002d84:	3300      	adds	r3, #0
 8002d86:	bf18      	it	ne
 8002d88:	2301      	movne	r3, #1
 8002d8a:	0692      	lsls	r2, r2, #26
 8002d8c:	d42f      	bmi.n	8002dee <_printf_common+0xc2>
 8002d8e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002d92:	4639      	mov	r1, r7
 8002d94:	4630      	mov	r0, r6
 8002d96:	47c0      	blx	r8
 8002d98:	3001      	adds	r0, #1
 8002d9a:	d022      	beq.n	8002de2 <_printf_common+0xb6>
 8002d9c:	6823      	ldr	r3, [r4, #0]
 8002d9e:	68e5      	ldr	r5, [r4, #12]
 8002da0:	f003 0306 	and.w	r3, r3, #6
 8002da4:	2b04      	cmp	r3, #4
 8002da6:	bf18      	it	ne
 8002da8:	2500      	movne	r5, #0
 8002daa:	f8d9 2000 	ldr.w	r2, [r9]
 8002dae:	f04f 0900 	mov.w	r9, #0
 8002db2:	bf08      	it	eq
 8002db4:	1aad      	subeq	r5, r5, r2
 8002db6:	68a3      	ldr	r3, [r4, #8]
 8002db8:	6922      	ldr	r2, [r4, #16]
 8002dba:	bf08      	it	eq
 8002dbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	bfc4      	itt	gt
 8002dc4:	1a9b      	subgt	r3, r3, r2
 8002dc6:	18ed      	addgt	r5, r5, r3
 8002dc8:	341a      	adds	r4, #26
 8002dca:	454d      	cmp	r5, r9
 8002dcc:	d11b      	bne.n	8002e06 <_printf_common+0xda>
 8002dce:	2000      	movs	r0, #0
 8002dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	4652      	mov	r2, sl
 8002dd8:	4639      	mov	r1, r7
 8002dda:	4630      	mov	r0, r6
 8002ddc:	47c0      	blx	r8
 8002dde:	3001      	adds	r0, #1
 8002de0:	d103      	bne.n	8002dea <_printf_common+0xbe>
 8002de2:	f04f 30ff 	mov.w	r0, #4294967295
 8002de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002dea:	3501      	adds	r5, #1
 8002dec:	e7c1      	b.n	8002d72 <_printf_common+0x46>
 8002dee:	2030      	movs	r0, #48	; 0x30
 8002df0:	18e1      	adds	r1, r4, r3
 8002df2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002df6:	1c5a      	adds	r2, r3, #1
 8002df8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002dfc:	4422      	add	r2, r4
 8002dfe:	3302      	adds	r3, #2
 8002e00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002e04:	e7c3      	b.n	8002d8e <_printf_common+0x62>
 8002e06:	2301      	movs	r3, #1
 8002e08:	4622      	mov	r2, r4
 8002e0a:	4639      	mov	r1, r7
 8002e0c:	4630      	mov	r0, r6
 8002e0e:	47c0      	blx	r8
 8002e10:	3001      	adds	r0, #1
 8002e12:	d0e6      	beq.n	8002de2 <_printf_common+0xb6>
 8002e14:	f109 0901 	add.w	r9, r9, #1
 8002e18:	e7d7      	b.n	8002dca <_printf_common+0x9e>
	...

08002e1c <_printf_i>:
 8002e1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002e20:	4617      	mov	r7, r2
 8002e22:	7e0a      	ldrb	r2, [r1, #24]
 8002e24:	b085      	sub	sp, #20
 8002e26:	2a6e      	cmp	r2, #110	; 0x6e
 8002e28:	4698      	mov	r8, r3
 8002e2a:	4606      	mov	r6, r0
 8002e2c:	460c      	mov	r4, r1
 8002e2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002e30:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002e34:	f000 80bc 	beq.w	8002fb0 <_printf_i+0x194>
 8002e38:	d81a      	bhi.n	8002e70 <_printf_i+0x54>
 8002e3a:	2a63      	cmp	r2, #99	; 0x63
 8002e3c:	d02e      	beq.n	8002e9c <_printf_i+0x80>
 8002e3e:	d80a      	bhi.n	8002e56 <_printf_i+0x3a>
 8002e40:	2a00      	cmp	r2, #0
 8002e42:	f000 80c8 	beq.w	8002fd6 <_printf_i+0x1ba>
 8002e46:	2a58      	cmp	r2, #88	; 0x58
 8002e48:	f000 808a 	beq.w	8002f60 <_printf_i+0x144>
 8002e4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002e50:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002e54:	e02a      	b.n	8002eac <_printf_i+0x90>
 8002e56:	2a64      	cmp	r2, #100	; 0x64
 8002e58:	d001      	beq.n	8002e5e <_printf_i+0x42>
 8002e5a:	2a69      	cmp	r2, #105	; 0x69
 8002e5c:	d1f6      	bne.n	8002e4c <_printf_i+0x30>
 8002e5e:	6821      	ldr	r1, [r4, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002e66:	d023      	beq.n	8002eb0 <_printf_i+0x94>
 8002e68:	1d11      	adds	r1, r2, #4
 8002e6a:	6019      	str	r1, [r3, #0]
 8002e6c:	6813      	ldr	r3, [r2, #0]
 8002e6e:	e027      	b.n	8002ec0 <_printf_i+0xa4>
 8002e70:	2a73      	cmp	r2, #115	; 0x73
 8002e72:	f000 80b4 	beq.w	8002fde <_printf_i+0x1c2>
 8002e76:	d808      	bhi.n	8002e8a <_printf_i+0x6e>
 8002e78:	2a6f      	cmp	r2, #111	; 0x6f
 8002e7a:	d02a      	beq.n	8002ed2 <_printf_i+0xb6>
 8002e7c:	2a70      	cmp	r2, #112	; 0x70
 8002e7e:	d1e5      	bne.n	8002e4c <_printf_i+0x30>
 8002e80:	680a      	ldr	r2, [r1, #0]
 8002e82:	f042 0220 	orr.w	r2, r2, #32
 8002e86:	600a      	str	r2, [r1, #0]
 8002e88:	e003      	b.n	8002e92 <_printf_i+0x76>
 8002e8a:	2a75      	cmp	r2, #117	; 0x75
 8002e8c:	d021      	beq.n	8002ed2 <_printf_i+0xb6>
 8002e8e:	2a78      	cmp	r2, #120	; 0x78
 8002e90:	d1dc      	bne.n	8002e4c <_printf_i+0x30>
 8002e92:	2278      	movs	r2, #120	; 0x78
 8002e94:	496f      	ldr	r1, [pc, #444]	; (8003054 <_printf_i+0x238>)
 8002e96:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002e9a:	e064      	b.n	8002f66 <_printf_i+0x14a>
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8002ea2:	1d11      	adds	r1, r2, #4
 8002ea4:	6019      	str	r1, [r3, #0]
 8002ea6:	6813      	ldr	r3, [r2, #0]
 8002ea8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002eac:	2301      	movs	r3, #1
 8002eae:	e0a3      	b.n	8002ff8 <_printf_i+0x1dc>
 8002eb0:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002eb4:	f102 0104 	add.w	r1, r2, #4
 8002eb8:	6019      	str	r1, [r3, #0]
 8002eba:	d0d7      	beq.n	8002e6c <_printf_i+0x50>
 8002ebc:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	da03      	bge.n	8002ecc <_printf_i+0xb0>
 8002ec4:	222d      	movs	r2, #45	; 0x2d
 8002ec6:	425b      	negs	r3, r3
 8002ec8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002ecc:	4962      	ldr	r1, [pc, #392]	; (8003058 <_printf_i+0x23c>)
 8002ece:	220a      	movs	r2, #10
 8002ed0:	e017      	b.n	8002f02 <_printf_i+0xe6>
 8002ed2:	6820      	ldr	r0, [r4, #0]
 8002ed4:	6819      	ldr	r1, [r3, #0]
 8002ed6:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002eda:	d003      	beq.n	8002ee4 <_printf_i+0xc8>
 8002edc:	1d08      	adds	r0, r1, #4
 8002ede:	6018      	str	r0, [r3, #0]
 8002ee0:	680b      	ldr	r3, [r1, #0]
 8002ee2:	e006      	b.n	8002ef2 <_printf_i+0xd6>
 8002ee4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002ee8:	f101 0004 	add.w	r0, r1, #4
 8002eec:	6018      	str	r0, [r3, #0]
 8002eee:	d0f7      	beq.n	8002ee0 <_printf_i+0xc4>
 8002ef0:	880b      	ldrh	r3, [r1, #0]
 8002ef2:	2a6f      	cmp	r2, #111	; 0x6f
 8002ef4:	bf14      	ite	ne
 8002ef6:	220a      	movne	r2, #10
 8002ef8:	2208      	moveq	r2, #8
 8002efa:	4957      	ldr	r1, [pc, #348]	; (8003058 <_printf_i+0x23c>)
 8002efc:	2000      	movs	r0, #0
 8002efe:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8002f02:	6865      	ldr	r5, [r4, #4]
 8002f04:	2d00      	cmp	r5, #0
 8002f06:	60a5      	str	r5, [r4, #8]
 8002f08:	f2c0 809c 	blt.w	8003044 <_printf_i+0x228>
 8002f0c:	6820      	ldr	r0, [r4, #0]
 8002f0e:	f020 0004 	bic.w	r0, r0, #4
 8002f12:	6020      	str	r0, [r4, #0]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d13f      	bne.n	8002f98 <_printf_i+0x17c>
 8002f18:	2d00      	cmp	r5, #0
 8002f1a:	f040 8095 	bne.w	8003048 <_printf_i+0x22c>
 8002f1e:	4675      	mov	r5, lr
 8002f20:	2a08      	cmp	r2, #8
 8002f22:	d10b      	bne.n	8002f3c <_printf_i+0x120>
 8002f24:	6823      	ldr	r3, [r4, #0]
 8002f26:	07da      	lsls	r2, r3, #31
 8002f28:	d508      	bpl.n	8002f3c <_printf_i+0x120>
 8002f2a:	6923      	ldr	r3, [r4, #16]
 8002f2c:	6862      	ldr	r2, [r4, #4]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	bfde      	ittt	le
 8002f32:	2330      	movle	r3, #48	; 0x30
 8002f34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002f38:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002f3c:	ebae 0305 	sub.w	r3, lr, r5
 8002f40:	6123      	str	r3, [r4, #16]
 8002f42:	f8cd 8000 	str.w	r8, [sp]
 8002f46:	463b      	mov	r3, r7
 8002f48:	aa03      	add	r2, sp, #12
 8002f4a:	4621      	mov	r1, r4
 8002f4c:	4630      	mov	r0, r6
 8002f4e:	f7ff feed 	bl	8002d2c <_printf_common>
 8002f52:	3001      	adds	r0, #1
 8002f54:	d155      	bne.n	8003002 <_printf_i+0x1e6>
 8002f56:	f04f 30ff 	mov.w	r0, #4294967295
 8002f5a:	b005      	add	sp, #20
 8002f5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002f60:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8002f64:	493c      	ldr	r1, [pc, #240]	; (8003058 <_printf_i+0x23c>)
 8002f66:	6822      	ldr	r2, [r4, #0]
 8002f68:	6818      	ldr	r0, [r3, #0]
 8002f6a:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002f6e:	f100 0504 	add.w	r5, r0, #4
 8002f72:	601d      	str	r5, [r3, #0]
 8002f74:	d001      	beq.n	8002f7a <_printf_i+0x15e>
 8002f76:	6803      	ldr	r3, [r0, #0]
 8002f78:	e002      	b.n	8002f80 <_printf_i+0x164>
 8002f7a:	0655      	lsls	r5, r2, #25
 8002f7c:	d5fb      	bpl.n	8002f76 <_printf_i+0x15a>
 8002f7e:	8803      	ldrh	r3, [r0, #0]
 8002f80:	07d0      	lsls	r0, r2, #31
 8002f82:	bf44      	itt	mi
 8002f84:	f042 0220 	orrmi.w	r2, r2, #32
 8002f88:	6022      	strmi	r2, [r4, #0]
 8002f8a:	b91b      	cbnz	r3, 8002f94 <_printf_i+0x178>
 8002f8c:	6822      	ldr	r2, [r4, #0]
 8002f8e:	f022 0220 	bic.w	r2, r2, #32
 8002f92:	6022      	str	r2, [r4, #0]
 8002f94:	2210      	movs	r2, #16
 8002f96:	e7b1      	b.n	8002efc <_printf_i+0xe0>
 8002f98:	4675      	mov	r5, lr
 8002f9a:	fbb3 f0f2 	udiv	r0, r3, r2
 8002f9e:	fb02 3310 	mls	r3, r2, r0, r3
 8002fa2:	5ccb      	ldrb	r3, [r1, r3]
 8002fa4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2800      	cmp	r0, #0
 8002fac:	d1f5      	bne.n	8002f9a <_printf_i+0x17e>
 8002fae:	e7b7      	b.n	8002f20 <_printf_i+0x104>
 8002fb0:	6808      	ldr	r0, [r1, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002fb8:	6949      	ldr	r1, [r1, #20]
 8002fba:	d004      	beq.n	8002fc6 <_printf_i+0x1aa>
 8002fbc:	1d10      	adds	r0, r2, #4
 8002fbe:	6018      	str	r0, [r3, #0]
 8002fc0:	6813      	ldr	r3, [r2, #0]
 8002fc2:	6019      	str	r1, [r3, #0]
 8002fc4:	e007      	b.n	8002fd6 <_printf_i+0x1ba>
 8002fc6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002fca:	f102 0004 	add.w	r0, r2, #4
 8002fce:	6018      	str	r0, [r3, #0]
 8002fd0:	6813      	ldr	r3, [r2, #0]
 8002fd2:	d0f6      	beq.n	8002fc2 <_printf_i+0x1a6>
 8002fd4:	8019      	strh	r1, [r3, #0]
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	4675      	mov	r5, lr
 8002fda:	6123      	str	r3, [r4, #16]
 8002fdc:	e7b1      	b.n	8002f42 <_printf_i+0x126>
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	1d11      	adds	r1, r2, #4
 8002fe2:	6019      	str	r1, [r3, #0]
 8002fe4:	6815      	ldr	r5, [r2, #0]
 8002fe6:	2100      	movs	r1, #0
 8002fe8:	6862      	ldr	r2, [r4, #4]
 8002fea:	4628      	mov	r0, r5
 8002fec:	f000 f836 	bl	800305c <memchr>
 8002ff0:	b108      	cbz	r0, 8002ff6 <_printf_i+0x1da>
 8002ff2:	1b40      	subs	r0, r0, r5
 8002ff4:	6060      	str	r0, [r4, #4]
 8002ff6:	6863      	ldr	r3, [r4, #4]
 8002ff8:	6123      	str	r3, [r4, #16]
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003000:	e79f      	b.n	8002f42 <_printf_i+0x126>
 8003002:	6923      	ldr	r3, [r4, #16]
 8003004:	462a      	mov	r2, r5
 8003006:	4639      	mov	r1, r7
 8003008:	4630      	mov	r0, r6
 800300a:	47c0      	blx	r8
 800300c:	3001      	adds	r0, #1
 800300e:	d0a2      	beq.n	8002f56 <_printf_i+0x13a>
 8003010:	6823      	ldr	r3, [r4, #0]
 8003012:	079b      	lsls	r3, r3, #30
 8003014:	d507      	bpl.n	8003026 <_printf_i+0x20a>
 8003016:	2500      	movs	r5, #0
 8003018:	f104 0919 	add.w	r9, r4, #25
 800301c:	68e3      	ldr	r3, [r4, #12]
 800301e:	9a03      	ldr	r2, [sp, #12]
 8003020:	1a9b      	subs	r3, r3, r2
 8003022:	429d      	cmp	r5, r3
 8003024:	db05      	blt.n	8003032 <_printf_i+0x216>
 8003026:	68e0      	ldr	r0, [r4, #12]
 8003028:	9b03      	ldr	r3, [sp, #12]
 800302a:	4298      	cmp	r0, r3
 800302c:	bfb8      	it	lt
 800302e:	4618      	movlt	r0, r3
 8003030:	e793      	b.n	8002f5a <_printf_i+0x13e>
 8003032:	2301      	movs	r3, #1
 8003034:	464a      	mov	r2, r9
 8003036:	4639      	mov	r1, r7
 8003038:	4630      	mov	r0, r6
 800303a:	47c0      	blx	r8
 800303c:	3001      	adds	r0, #1
 800303e:	d08a      	beq.n	8002f56 <_printf_i+0x13a>
 8003040:	3501      	adds	r5, #1
 8003042:	e7eb      	b.n	800301c <_printf_i+0x200>
 8003044:	2b00      	cmp	r3, #0
 8003046:	d1a7      	bne.n	8002f98 <_printf_i+0x17c>
 8003048:	780b      	ldrb	r3, [r1, #0]
 800304a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800304e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003052:	e765      	b.n	8002f20 <_printf_i+0x104>
 8003054:	08003310 	.word	0x08003310
 8003058:	080032ff 	.word	0x080032ff

0800305c <memchr>:
 800305c:	b510      	push	{r4, lr}
 800305e:	b2c9      	uxtb	r1, r1
 8003060:	4402      	add	r2, r0
 8003062:	4290      	cmp	r0, r2
 8003064:	4603      	mov	r3, r0
 8003066:	d101      	bne.n	800306c <memchr+0x10>
 8003068:	2000      	movs	r0, #0
 800306a:	bd10      	pop	{r4, pc}
 800306c:	781c      	ldrb	r4, [r3, #0]
 800306e:	3001      	adds	r0, #1
 8003070:	428c      	cmp	r4, r1
 8003072:	d1f6      	bne.n	8003062 <memchr+0x6>
 8003074:	4618      	mov	r0, r3
 8003076:	bd10      	pop	{r4, pc}

08003078 <memcpy>:
 8003078:	b510      	push	{r4, lr}
 800307a:	1e43      	subs	r3, r0, #1
 800307c:	440a      	add	r2, r1
 800307e:	4291      	cmp	r1, r2
 8003080:	d100      	bne.n	8003084 <memcpy+0xc>
 8003082:	bd10      	pop	{r4, pc}
 8003084:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003088:	f803 4f01 	strb.w	r4, [r3, #1]!
 800308c:	e7f7      	b.n	800307e <memcpy+0x6>

0800308e <memmove>:
 800308e:	4288      	cmp	r0, r1
 8003090:	b510      	push	{r4, lr}
 8003092:	eb01 0302 	add.w	r3, r1, r2
 8003096:	d803      	bhi.n	80030a0 <memmove+0x12>
 8003098:	1e42      	subs	r2, r0, #1
 800309a:	4299      	cmp	r1, r3
 800309c:	d10c      	bne.n	80030b8 <memmove+0x2a>
 800309e:	bd10      	pop	{r4, pc}
 80030a0:	4298      	cmp	r0, r3
 80030a2:	d2f9      	bcs.n	8003098 <memmove+0xa>
 80030a4:	1881      	adds	r1, r0, r2
 80030a6:	1ad2      	subs	r2, r2, r3
 80030a8:	42d3      	cmn	r3, r2
 80030aa:	d100      	bne.n	80030ae <memmove+0x20>
 80030ac:	bd10      	pop	{r4, pc}
 80030ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80030b2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80030b6:	e7f7      	b.n	80030a8 <memmove+0x1a>
 80030b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80030bc:	f802 4f01 	strb.w	r4, [r2, #1]!
 80030c0:	e7eb      	b.n	800309a <memmove+0xc>
	...

080030c4 <_free_r>:
 80030c4:	b538      	push	{r3, r4, r5, lr}
 80030c6:	4605      	mov	r5, r0
 80030c8:	2900      	cmp	r1, #0
 80030ca:	d043      	beq.n	8003154 <_free_r+0x90>
 80030cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80030d0:	1f0c      	subs	r4, r1, #4
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	bfb8      	it	lt
 80030d6:	18e4      	addlt	r4, r4, r3
 80030d8:	f000 f8d4 	bl	8003284 <__malloc_lock>
 80030dc:	4a1e      	ldr	r2, [pc, #120]	; (8003158 <_free_r+0x94>)
 80030de:	6813      	ldr	r3, [r2, #0]
 80030e0:	4610      	mov	r0, r2
 80030e2:	b933      	cbnz	r3, 80030f2 <_free_r+0x2e>
 80030e4:	6063      	str	r3, [r4, #4]
 80030e6:	6014      	str	r4, [r2, #0]
 80030e8:	4628      	mov	r0, r5
 80030ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80030ee:	f000 b8ca 	b.w	8003286 <__malloc_unlock>
 80030f2:	42a3      	cmp	r3, r4
 80030f4:	d90b      	bls.n	800310e <_free_r+0x4a>
 80030f6:	6821      	ldr	r1, [r4, #0]
 80030f8:	1862      	adds	r2, r4, r1
 80030fa:	4293      	cmp	r3, r2
 80030fc:	bf01      	itttt	eq
 80030fe:	681a      	ldreq	r2, [r3, #0]
 8003100:	685b      	ldreq	r3, [r3, #4]
 8003102:	1852      	addeq	r2, r2, r1
 8003104:	6022      	streq	r2, [r4, #0]
 8003106:	6063      	str	r3, [r4, #4]
 8003108:	6004      	str	r4, [r0, #0]
 800310a:	e7ed      	b.n	80030e8 <_free_r+0x24>
 800310c:	4613      	mov	r3, r2
 800310e:	685a      	ldr	r2, [r3, #4]
 8003110:	b10a      	cbz	r2, 8003116 <_free_r+0x52>
 8003112:	42a2      	cmp	r2, r4
 8003114:	d9fa      	bls.n	800310c <_free_r+0x48>
 8003116:	6819      	ldr	r1, [r3, #0]
 8003118:	1858      	adds	r0, r3, r1
 800311a:	42a0      	cmp	r0, r4
 800311c:	d10b      	bne.n	8003136 <_free_r+0x72>
 800311e:	6820      	ldr	r0, [r4, #0]
 8003120:	4401      	add	r1, r0
 8003122:	1858      	adds	r0, r3, r1
 8003124:	4282      	cmp	r2, r0
 8003126:	6019      	str	r1, [r3, #0]
 8003128:	d1de      	bne.n	80030e8 <_free_r+0x24>
 800312a:	6810      	ldr	r0, [r2, #0]
 800312c:	6852      	ldr	r2, [r2, #4]
 800312e:	4401      	add	r1, r0
 8003130:	6019      	str	r1, [r3, #0]
 8003132:	605a      	str	r2, [r3, #4]
 8003134:	e7d8      	b.n	80030e8 <_free_r+0x24>
 8003136:	d902      	bls.n	800313e <_free_r+0x7a>
 8003138:	230c      	movs	r3, #12
 800313a:	602b      	str	r3, [r5, #0]
 800313c:	e7d4      	b.n	80030e8 <_free_r+0x24>
 800313e:	6820      	ldr	r0, [r4, #0]
 8003140:	1821      	adds	r1, r4, r0
 8003142:	428a      	cmp	r2, r1
 8003144:	bf01      	itttt	eq
 8003146:	6811      	ldreq	r1, [r2, #0]
 8003148:	6852      	ldreq	r2, [r2, #4]
 800314a:	1809      	addeq	r1, r1, r0
 800314c:	6021      	streq	r1, [r4, #0]
 800314e:	6062      	str	r2, [r4, #4]
 8003150:	605c      	str	r4, [r3, #4]
 8003152:	e7c9      	b.n	80030e8 <_free_r+0x24>
 8003154:	bd38      	pop	{r3, r4, r5, pc}
 8003156:	bf00      	nop
 8003158:	20000094 	.word	0x20000094

0800315c <_malloc_r>:
 800315c:	b570      	push	{r4, r5, r6, lr}
 800315e:	1ccd      	adds	r5, r1, #3
 8003160:	f025 0503 	bic.w	r5, r5, #3
 8003164:	3508      	adds	r5, #8
 8003166:	2d0c      	cmp	r5, #12
 8003168:	bf38      	it	cc
 800316a:	250c      	movcc	r5, #12
 800316c:	2d00      	cmp	r5, #0
 800316e:	4606      	mov	r6, r0
 8003170:	db01      	blt.n	8003176 <_malloc_r+0x1a>
 8003172:	42a9      	cmp	r1, r5
 8003174:	d903      	bls.n	800317e <_malloc_r+0x22>
 8003176:	230c      	movs	r3, #12
 8003178:	6033      	str	r3, [r6, #0]
 800317a:	2000      	movs	r0, #0
 800317c:	bd70      	pop	{r4, r5, r6, pc}
 800317e:	f000 f881 	bl	8003284 <__malloc_lock>
 8003182:	4a23      	ldr	r2, [pc, #140]	; (8003210 <_malloc_r+0xb4>)
 8003184:	6814      	ldr	r4, [r2, #0]
 8003186:	4621      	mov	r1, r4
 8003188:	b991      	cbnz	r1, 80031b0 <_malloc_r+0x54>
 800318a:	4c22      	ldr	r4, [pc, #136]	; (8003214 <_malloc_r+0xb8>)
 800318c:	6823      	ldr	r3, [r4, #0]
 800318e:	b91b      	cbnz	r3, 8003198 <_malloc_r+0x3c>
 8003190:	4630      	mov	r0, r6
 8003192:	f000 f867 	bl	8003264 <_sbrk_r>
 8003196:	6020      	str	r0, [r4, #0]
 8003198:	4629      	mov	r1, r5
 800319a:	4630      	mov	r0, r6
 800319c:	f000 f862 	bl	8003264 <_sbrk_r>
 80031a0:	1c43      	adds	r3, r0, #1
 80031a2:	d126      	bne.n	80031f2 <_malloc_r+0x96>
 80031a4:	230c      	movs	r3, #12
 80031a6:	4630      	mov	r0, r6
 80031a8:	6033      	str	r3, [r6, #0]
 80031aa:	f000 f86c 	bl	8003286 <__malloc_unlock>
 80031ae:	e7e4      	b.n	800317a <_malloc_r+0x1e>
 80031b0:	680b      	ldr	r3, [r1, #0]
 80031b2:	1b5b      	subs	r3, r3, r5
 80031b4:	d41a      	bmi.n	80031ec <_malloc_r+0x90>
 80031b6:	2b0b      	cmp	r3, #11
 80031b8:	d90f      	bls.n	80031da <_malloc_r+0x7e>
 80031ba:	600b      	str	r3, [r1, #0]
 80031bc:	18cc      	adds	r4, r1, r3
 80031be:	50cd      	str	r5, [r1, r3]
 80031c0:	4630      	mov	r0, r6
 80031c2:	f000 f860 	bl	8003286 <__malloc_unlock>
 80031c6:	f104 000b 	add.w	r0, r4, #11
 80031ca:	1d23      	adds	r3, r4, #4
 80031cc:	f020 0007 	bic.w	r0, r0, #7
 80031d0:	1ac3      	subs	r3, r0, r3
 80031d2:	d01b      	beq.n	800320c <_malloc_r+0xb0>
 80031d4:	425a      	negs	r2, r3
 80031d6:	50e2      	str	r2, [r4, r3]
 80031d8:	bd70      	pop	{r4, r5, r6, pc}
 80031da:	428c      	cmp	r4, r1
 80031dc:	bf0b      	itete	eq
 80031de:	6863      	ldreq	r3, [r4, #4]
 80031e0:	684b      	ldrne	r3, [r1, #4]
 80031e2:	6013      	streq	r3, [r2, #0]
 80031e4:	6063      	strne	r3, [r4, #4]
 80031e6:	bf18      	it	ne
 80031e8:	460c      	movne	r4, r1
 80031ea:	e7e9      	b.n	80031c0 <_malloc_r+0x64>
 80031ec:	460c      	mov	r4, r1
 80031ee:	6849      	ldr	r1, [r1, #4]
 80031f0:	e7ca      	b.n	8003188 <_malloc_r+0x2c>
 80031f2:	1cc4      	adds	r4, r0, #3
 80031f4:	f024 0403 	bic.w	r4, r4, #3
 80031f8:	42a0      	cmp	r0, r4
 80031fa:	d005      	beq.n	8003208 <_malloc_r+0xac>
 80031fc:	1a21      	subs	r1, r4, r0
 80031fe:	4630      	mov	r0, r6
 8003200:	f000 f830 	bl	8003264 <_sbrk_r>
 8003204:	3001      	adds	r0, #1
 8003206:	d0cd      	beq.n	80031a4 <_malloc_r+0x48>
 8003208:	6025      	str	r5, [r4, #0]
 800320a:	e7d9      	b.n	80031c0 <_malloc_r+0x64>
 800320c:	bd70      	pop	{r4, r5, r6, pc}
 800320e:	bf00      	nop
 8003210:	20000094 	.word	0x20000094
 8003214:	20000098 	.word	0x20000098

08003218 <_realloc_r>:
 8003218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800321a:	4607      	mov	r7, r0
 800321c:	4614      	mov	r4, r2
 800321e:	460e      	mov	r6, r1
 8003220:	b921      	cbnz	r1, 800322c <_realloc_r+0x14>
 8003222:	4611      	mov	r1, r2
 8003224:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003228:	f7ff bf98 	b.w	800315c <_malloc_r>
 800322c:	b922      	cbnz	r2, 8003238 <_realloc_r+0x20>
 800322e:	f7ff ff49 	bl	80030c4 <_free_r>
 8003232:	4625      	mov	r5, r4
 8003234:	4628      	mov	r0, r5
 8003236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003238:	f000 f826 	bl	8003288 <_malloc_usable_size_r>
 800323c:	4284      	cmp	r4, r0
 800323e:	d90f      	bls.n	8003260 <_realloc_r+0x48>
 8003240:	4621      	mov	r1, r4
 8003242:	4638      	mov	r0, r7
 8003244:	f7ff ff8a 	bl	800315c <_malloc_r>
 8003248:	4605      	mov	r5, r0
 800324a:	2800      	cmp	r0, #0
 800324c:	d0f2      	beq.n	8003234 <_realloc_r+0x1c>
 800324e:	4631      	mov	r1, r6
 8003250:	4622      	mov	r2, r4
 8003252:	f7ff ff11 	bl	8003078 <memcpy>
 8003256:	4631      	mov	r1, r6
 8003258:	4638      	mov	r0, r7
 800325a:	f7ff ff33 	bl	80030c4 <_free_r>
 800325e:	e7e9      	b.n	8003234 <_realloc_r+0x1c>
 8003260:	4635      	mov	r5, r6
 8003262:	e7e7      	b.n	8003234 <_realloc_r+0x1c>

08003264 <_sbrk_r>:
 8003264:	b538      	push	{r3, r4, r5, lr}
 8003266:	2300      	movs	r3, #0
 8003268:	4c05      	ldr	r4, [pc, #20]	; (8003280 <_sbrk_r+0x1c>)
 800326a:	4605      	mov	r5, r0
 800326c:	4608      	mov	r0, r1
 800326e:	6023      	str	r3, [r4, #0]
 8003270:	f7ff fb68 	bl	8002944 <_sbrk>
 8003274:	1c43      	adds	r3, r0, #1
 8003276:	d102      	bne.n	800327e <_sbrk_r+0x1a>
 8003278:	6823      	ldr	r3, [r4, #0]
 800327a:	b103      	cbz	r3, 800327e <_sbrk_r+0x1a>
 800327c:	602b      	str	r3, [r5, #0]
 800327e:	bd38      	pop	{r3, r4, r5, pc}
 8003280:	200001a8 	.word	0x200001a8

08003284 <__malloc_lock>:
 8003284:	4770      	bx	lr

08003286 <__malloc_unlock>:
 8003286:	4770      	bx	lr

08003288 <_malloc_usable_size_r>:
 8003288:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800328c:	2800      	cmp	r0, #0
 800328e:	f1a0 0004 	sub.w	r0, r0, #4
 8003292:	bfbc      	itt	lt
 8003294:	580b      	ldrlt	r3, [r1, r0]
 8003296:	18c0      	addlt	r0, r0, r3
 8003298:	4770      	bx	lr
	...

0800329c <_init>:
 800329c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800329e:	bf00      	nop
 80032a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032a2:	bc08      	pop	{r3}
 80032a4:	469e      	mov	lr, r3
 80032a6:	4770      	bx	lr

080032a8 <_fini>:
 80032a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032aa:	bf00      	nop
 80032ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032ae:	bc08      	pop	{r3}
 80032b0:	469e      	mov	lr, r3
 80032b2:	4770      	bx	lr
