
First_Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001920  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08001a2c  08001a2c  00011a2c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001a54  08001a54  00011a54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001a58  08001a58  00011a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08001a5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000184  2000000c  08001a68  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000190  08001a68  00020190  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00010e81  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002782  00000000  00000000  00030eb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000897f  00000000  00000000  00033638  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000b80  00000000  00000000  0003bfb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000ee0  00000000  00000000  0003cb38  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00006908  00000000  00000000  0003da18  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000044af  00000000  00000000  00044320  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000487cf  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002324  00000000  00000000  0004884c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001a14 	.word	0x08001a14

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001a14 	.word	0x08001a14

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	4b0e      	ldr	r3, [pc, #56]	; (8000188 <HAL_InitTick+0x3c>)
{
 8000150:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0b      	ldr	r2, [pc, #44]	; (800018c <HAL_InitTick+0x40>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 faac 	bl	80006c0 <HAL_SYSTICK_Config>
 8000168:	4604      	mov	r4, r0
 800016a:	b958      	cbnz	r0, 8000184 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016c:	2d0f      	cmp	r5, #15
 800016e:	d809      	bhi.n	8000184 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000170:	4602      	mov	r2, r0
 8000172:	4629      	mov	r1, r5
 8000174:	f04f 30ff 	mov.w	r0, #4294967295
 8000178:	f000 fa60 	bl	800063c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <HAL_InitTick+0x44>)
 800017e:	4620      	mov	r0, r4
 8000180:	601d      	str	r5, [r3, #0]
 8000182:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000184:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000186:	bd38      	pop	{r3, r4, r5, pc}
 8000188:	20000000 	.word	0x20000000
 800018c:	20000008 	.word	0x20000008
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 fa39 	bl	8000618 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f001 fab2 	bl	8001714 <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <HAL_IncTick+0x14>)
 80001bc:	6811      	ldr	r1, [r2, #0]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	20000028 	.word	0x20000028
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000028 	.word	0x20000028

080001dc <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 80001dc:	2300      	movs	r3, #0
{ 
 80001de:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 80001e0:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80001e2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80001e6:	2b01      	cmp	r3, #1
 80001e8:	d074      	beq.n	80002d4 <HAL_ADC_ConfigChannel+0xf8>
 80001ea:	2301      	movs	r3, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80001ec:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 80001ee:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 80001f2:	2d06      	cmp	r5, #6
 80001f4:	6802      	ldr	r2, [r0, #0]
 80001f6:	ea4f 0385 	mov.w	r3, r5, lsl #2
 80001fa:	680c      	ldr	r4, [r1, #0]
 80001fc:	d825      	bhi.n	800024a <HAL_ADC_ConfigChannel+0x6e>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80001fe:	442b      	add	r3, r5
 8000200:	251f      	movs	r5, #31
 8000202:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8000204:	3b05      	subs	r3, #5
 8000206:	409d      	lsls	r5, r3
 8000208:	ea26 0505 	bic.w	r5, r6, r5
 800020c:	fa04 f303 	lsl.w	r3, r4, r3
 8000210:	432b      	orrs	r3, r5
 8000212:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000214:	2c09      	cmp	r4, #9
 8000216:	ea4f 0344 	mov.w	r3, r4, lsl #1
 800021a:	688d      	ldr	r5, [r1, #8]
 800021c:	d92f      	bls.n	800027e <HAL_ADC_ConfigChannel+0xa2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800021e:	2607      	movs	r6, #7
 8000220:	4423      	add	r3, r4
 8000222:	68d1      	ldr	r1, [r2, #12]
 8000224:	3b1e      	subs	r3, #30
 8000226:	409e      	lsls	r6, r3
 8000228:	ea21 0106 	bic.w	r1, r1, r6
 800022c:	fa05 f303 	lsl.w	r3, r5, r3
 8000230:	430b      	orrs	r3, r1
 8000232:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000234:	f1a4 0310 	sub.w	r3, r4, #16
 8000238:	2b01      	cmp	r3, #1
 800023a:	d92b      	bls.n	8000294 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800023c:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800023e:	2200      	movs	r2, #0
 8000240:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8000244:	4618      	mov	r0, r3
 8000246:	b002      	add	sp, #8
 8000248:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 800024a:	2d0c      	cmp	r5, #12
 800024c:	d80b      	bhi.n	8000266 <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800024e:	442b      	add	r3, r5
 8000250:	251f      	movs	r5, #31
 8000252:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8000254:	3b23      	subs	r3, #35	; 0x23
 8000256:	409d      	lsls	r5, r3
 8000258:	ea26 0505 	bic.w	r5, r6, r5
 800025c:	fa04 f303 	lsl.w	r3, r4, r3
 8000260:	432b      	orrs	r3, r5
 8000262:	6313      	str	r3, [r2, #48]	; 0x30
 8000264:	e7d6      	b.n	8000214 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000266:	442b      	add	r3, r5
 8000268:	251f      	movs	r5, #31
 800026a:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 800026c:	3b41      	subs	r3, #65	; 0x41
 800026e:	409d      	lsls	r5, r3
 8000270:	ea26 0505 	bic.w	r5, r6, r5
 8000274:	fa04 f303 	lsl.w	r3, r4, r3
 8000278:	432b      	orrs	r3, r5
 800027a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800027c:	e7ca      	b.n	8000214 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800027e:	2607      	movs	r6, #7
 8000280:	6911      	ldr	r1, [r2, #16]
 8000282:	4423      	add	r3, r4
 8000284:	409e      	lsls	r6, r3
 8000286:	ea21 0106 	bic.w	r1, r1, r6
 800028a:	fa05 f303 	lsl.w	r3, r5, r3
 800028e:	430b      	orrs	r3, r1
 8000290:	6113      	str	r3, [r2, #16]
 8000292:	e7cf      	b.n	8000234 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 8000294:	4b10      	ldr	r3, [pc, #64]	; (80002d8 <HAL_ADC_ConfigChannel+0xfc>)
 8000296:	429a      	cmp	r2, r3
 8000298:	d116      	bne.n	80002c8 <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800029a:	6893      	ldr	r3, [r2, #8]
 800029c:	021b      	lsls	r3, r3, #8
 800029e:	d4cd      	bmi.n	800023c <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80002a0:	6893      	ldr	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80002a2:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80002a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80002a8:	6093      	str	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80002aa:	d1c7      	bne.n	800023c <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80002ac:	4b0b      	ldr	r3, [pc, #44]	; (80002dc <HAL_ADC_ConfigChannel+0x100>)
 80002ae:	4a0c      	ldr	r2, [pc, #48]	; (80002e0 <HAL_ADC_ConfigChannel+0x104>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	fbb3 f2f2 	udiv	r2, r3, r2
 80002b6:	230a      	movs	r3, #10
 80002b8:	4353      	muls	r3, r2
            wait_loop_index--;
 80002ba:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80002bc:	9b01      	ldr	r3, [sp, #4]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d0bc      	beq.n	800023c <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 80002c2:	9b01      	ldr	r3, [sp, #4]
 80002c4:	3b01      	subs	r3, #1
 80002c6:	e7f8      	b.n	80002ba <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80002c8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80002ca:	f043 0320 	orr.w	r3, r3, #32
 80002ce:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80002d0:	2301      	movs	r3, #1
 80002d2:	e7b4      	b.n	800023e <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 80002d4:	2302      	movs	r3, #2
 80002d6:	e7b5      	b.n	8000244 <HAL_ADC_ConfigChannel+0x68>
 80002d8:	40012400 	.word	0x40012400
 80002dc:	20000008 	.word	0x20000008
 80002e0:	000f4240 	.word	0x000f4240

080002e4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80002e4:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80002e6:	6803      	ldr	r3, [r0, #0]
{
 80002e8:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80002ea:	689a      	ldr	r2, [r3, #8]
 80002ec:	07d1      	lsls	r1, r2, #31
 80002ee:	d401      	bmi.n	80002f4 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80002f0:	2000      	movs	r0, #0
 80002f2:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 80002f4:	689a      	ldr	r2, [r3, #8]
 80002f6:	f022 0201 	bic.w	r2, r2, #1
 80002fa:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80002fc:	f7ff ff68 	bl	80001d0 <HAL_GetTick>
 8000300:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000302:	6823      	ldr	r3, [r4, #0]
 8000304:	689b      	ldr	r3, [r3, #8]
 8000306:	07db      	lsls	r3, r3, #31
 8000308:	d5f2      	bpl.n	80002f0 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800030a:	f7ff ff61 	bl	80001d0 <HAL_GetTick>
 800030e:	1b40      	subs	r0, r0, r5
 8000310:	2802      	cmp	r0, #2
 8000312:	d9f6      	bls.n	8000302 <ADC_ConversionStop_Disable+0x1e>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000314:	6823      	ldr	r3, [r4, #0]
 8000316:	689b      	ldr	r3, [r3, #8]
 8000318:	07da      	lsls	r2, r3, #31
 800031a:	d5f2      	bpl.n	8000302 <ADC_ConversionStop_Disable+0x1e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800031c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800031e:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000320:	f043 0310 	orr.w	r3, r3, #16
 8000324:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000326:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000328:	f043 0301 	orr.w	r3, r3, #1
 800032c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800032e:	bd38      	pop	{r3, r4, r5, pc}

08000330 <HAL_ADC_Init>:
{
 8000330:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 8000332:	4604      	mov	r4, r0
 8000334:	2800      	cmp	r0, #0
 8000336:	d071      	beq.n	800041c <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000338:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800033a:	b923      	cbnz	r3, 8000346 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 800033c:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 800033e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8000342:	f001 fa09 	bl	8001758 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000346:	4620      	mov	r0, r4
 8000348:	f7ff ffcc 	bl	80002e4 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800034c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800034e:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 8000352:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000354:	d164      	bne.n	8000420 <HAL_ADC_Init+0xf0>
 8000356:	2800      	cmp	r0, #0
 8000358:	d162      	bne.n	8000420 <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800035a:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 800035c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000360:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8000362:	f023 0302 	bic.w	r3, r3, #2
 8000366:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800036a:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800036c:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 800036e:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000370:	7b23      	ldrb	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000372:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000376:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800037a:	d038      	beq.n	80003ee <HAL_ADC_Init+0xbe>
 800037c:	2901      	cmp	r1, #1
 800037e:	bf14      	ite	ne
 8000380:	4606      	movne	r6, r0
 8000382:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000386:	7d25      	ldrb	r5, [r4, #20]
 8000388:	2d01      	cmp	r5, #1
 800038a:	d107      	bne.n	800039c <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800038c:	2b00      	cmp	r3, #0
 800038e:	d130      	bne.n	80003f2 <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000390:	69a3      	ldr	r3, [r4, #24]
 8000392:	3b01      	subs	r3, #1
 8000394:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 8000398:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 800039c:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800039e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 80003a2:	685d      	ldr	r5, [r3, #4]
 80003a4:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 80003a8:	ea45 0506 	orr.w	r5, r5, r6
 80003ac:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80003ae:	689e      	ldr	r6, [r3, #8]
 80003b0:	4d1d      	ldr	r5, [pc, #116]	; (8000428 <HAL_ADC_Init+0xf8>)
 80003b2:	ea05 0506 	and.w	r5, r5, r6
 80003b6:	ea45 0502 	orr.w	r5, r5, r2
 80003ba:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80003bc:	d001      	beq.n	80003c2 <HAL_ADC_Init+0x92>
 80003be:	2901      	cmp	r1, #1
 80003c0:	d120      	bne.n	8000404 <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80003c2:	6921      	ldr	r1, [r4, #16]
 80003c4:	3901      	subs	r1, #1
 80003c6:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80003c8:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80003ca:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 80003ce:	4329      	orrs	r1, r5
 80003d0:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80003d2:	6899      	ldr	r1, [r3, #8]
 80003d4:	4b15      	ldr	r3, [pc, #84]	; (800042c <HAL_ADC_Init+0xfc>)
 80003d6:	400b      	ands	r3, r1
 80003d8:	429a      	cmp	r2, r3
 80003da:	d115      	bne.n	8000408 <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 80003dc:	2300      	movs	r3, #0
 80003de:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80003e0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80003e2:	f023 0303 	bic.w	r3, r3, #3
 80003e6:	f043 0301 	orr.w	r3, r3, #1
 80003ea:	62a3      	str	r3, [r4, #40]	; 0x28
 80003ec:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80003ee:	460e      	mov	r6, r1
 80003f0:	e7c9      	b.n	8000386 <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80003f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80003f4:	f043 0320 	orr.w	r3, r3, #32
 80003f8:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80003fc:	f043 0301 	orr.w	r3, r3, #1
 8000400:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000402:	e7cb      	b.n	800039c <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 8000404:	2100      	movs	r1, #0
 8000406:	e7df      	b.n	80003c8 <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 8000408:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800040a:	f023 0312 	bic.w	r3, r3, #18
 800040e:	f043 0310 	orr.w	r3, r3, #16
 8000412:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000414:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000416:	f043 0301 	orr.w	r3, r3, #1
 800041a:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 800041c:	2001      	movs	r0, #1
}
 800041e:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000420:	f043 0310 	orr.w	r3, r3, #16
 8000424:	62a3      	str	r3, [r4, #40]	; 0x28
 8000426:	e7f9      	b.n	800041c <HAL_ADC_Init+0xec>
 8000428:	ffe1f7fd 	.word	0xffe1f7fd
 800042c:	ff1f0efe 	.word	0xff1f0efe

08000430 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000430:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000432:	4604      	mov	r4, r0
 8000434:	2800      	cmp	r0, #0
 8000436:	d06e      	beq.n	8000516 <HAL_CAN_Init+0xe6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000438:	f890 3020 	ldrb.w	r3, [r0, #32]
 800043c:	b90b      	cbnz	r3, 8000442 <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800043e:	f001 f9d7 	bl	80017f0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000442:	6822      	ldr	r2, [r4, #0]
 8000444:	6813      	ldr	r3, [r2, #0]
 8000446:	f043 0301 	orr.w	r3, r3, #1
 800044a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800044c:	f7ff fec0 	bl	80001d0 <HAL_GetTick>
 8000450:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000452:	6823      	ldr	r3, [r4, #0]
 8000454:	685a      	ldr	r2, [r3, #4]
 8000456:	07d1      	lsls	r1, r2, #31
 8000458:	d551      	bpl.n	80004fe <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800045a:	681a      	ldr	r2, [r3, #0]
 800045c:	f022 0202 	bic.w	r2, r2, #2
 8000460:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000462:	f7ff feb5 	bl	80001d0 <HAL_GetTick>
 8000466:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000468:	6823      	ldr	r3, [r4, #0]
 800046a:	685a      	ldr	r2, [r3, #4]
 800046c:	0792      	lsls	r2, r2, #30
 800046e:	d454      	bmi.n	800051a <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000470:	7e22      	ldrb	r2, [r4, #24]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000472:	2000      	movs	r0, #0
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000474:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000476:	681a      	ldr	r2, [r3, #0]
 8000478:	bf0c      	ite	eq
 800047a:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800047e:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8000482:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8000484:	7e62      	ldrb	r2, [r4, #25]
 8000486:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000488:	681a      	ldr	r2, [r3, #0]
 800048a:	bf0c      	ite	eq
 800048c:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000490:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 8000494:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000496:	7ea2      	ldrb	r2, [r4, #26]
 8000498:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800049a:	681a      	ldr	r2, [r3, #0]
 800049c:	bf0c      	ite	eq
 800049e:	f042 0220 	orreq.w	r2, r2, #32
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80004a2:	f022 0220 	bicne.w	r2, r2, #32
 80004a6:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 80004a8:	7ee2      	ldrb	r2, [r4, #27]
 80004aa:	2a01      	cmp	r2, #1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80004ac:	681a      	ldr	r2, [r3, #0]
 80004ae:	bf0c      	ite	eq
 80004b0:	f022 0210 	biceq.w	r2, r2, #16
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80004b4:	f042 0210 	orrne.w	r2, r2, #16
 80004b8:	601a      	str	r2, [r3, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80004ba:	7f22      	ldrb	r2, [r4, #28]
 80004bc:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80004be:	681a      	ldr	r2, [r3, #0]
 80004c0:	bf0c      	ite	eq
 80004c2:	f042 0208 	orreq.w	r2, r2, #8
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80004c6:	f022 0208 	bicne.w	r2, r2, #8
 80004ca:	601a      	str	r2, [r3, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80004cc:	7f62      	ldrb	r2, [r4, #29]
 80004ce:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80004d0:	681a      	ldr	r2, [r3, #0]
 80004d2:	bf0c      	ite	eq
 80004d4:	f042 0204 	orreq.w	r2, r2, #4
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80004d8:	f022 0204 	bicne.w	r2, r2, #4
 80004dc:	601a      	str	r2, [r3, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80004de:	68e1      	ldr	r1, [r4, #12]
 80004e0:	68a2      	ldr	r2, [r4, #8]
 80004e2:	430a      	orrs	r2, r1
 80004e4:	6921      	ldr	r1, [r4, #16]
 80004e6:	430a      	orrs	r2, r1
 80004e8:	6961      	ldr	r1, [r4, #20]
 80004ea:	430a      	orrs	r2, r1
 80004ec:	6861      	ldr	r1, [r4, #4]
 80004ee:	3901      	subs	r1, #1
 80004f0:	430a      	orrs	r2, r1
 80004f2:	61da      	str	r2, [r3, #28]

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80004f4:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80004f6:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 80004f8:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
 80004fc:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80004fe:	f7ff fe67 	bl	80001d0 <HAL_GetTick>
 8000502:	1b40      	subs	r0, r0, r5
 8000504:	280a      	cmp	r0, #10
 8000506:	d9a4      	bls.n	8000452 <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000508:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800050a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800050e:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8000510:	2305      	movs	r3, #5
 8000512:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8000516:	2001      	movs	r0, #1
}
 8000518:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800051a:	f7ff fe59 	bl	80001d0 <HAL_GetTick>
 800051e:	1b40      	subs	r0, r0, r5
 8000520:	280a      	cmp	r0, #10
 8000522:	d9a1      	bls.n	8000468 <HAL_CAN_Init+0x38>
 8000524:	e7f0      	b.n	8000508 <HAL_CAN_Init+0xd8>

08000526 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000526:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000528:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 800052c:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 800052e:	2b01      	cmp	r3, #1
 8000530:	d11f      	bne.n	8000572 <HAL_CAN_Start+0x4c>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000532:	2302      	movs	r3, #2

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000534:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000536:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800053a:	6813      	ldr	r3, [r2, #0]
 800053c:	f023 0301 	bic.w	r3, r3, #1
 8000540:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000542:	f7ff fe45 	bl	80001d0 <HAL_GetTick>
 8000546:	4605      	mov	r5, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000548:	6823      	ldr	r3, [r4, #0]
 800054a:	6858      	ldr	r0, [r3, #4]
 800054c:	f010 0001 	ands.w	r0, r0, #1
 8000550:	d101      	bne.n	8000556 <HAL_CAN_Start+0x30>
        return HAL_ERROR;
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000552:	6260      	str	r0, [r4, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000554:	bd38      	pop	{r3, r4, r5, pc}
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000556:	f7ff fe3b 	bl	80001d0 <HAL_GetTick>
 800055a:	1b40      	subs	r0, r0, r5
 800055c:	280a      	cmp	r0, #10
 800055e:	d9f3      	bls.n	8000548 <HAL_CAN_Start+0x22>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000560:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000562:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000566:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8000568:	2305      	movs	r3, #5
 800056a:	f884 3020 	strb.w	r3, [r4, #32]
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;

    return HAL_ERROR;
 800056e:	2001      	movs	r0, #1
  }
}
 8000570:	bd38      	pop	{r3, r4, r5, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000572:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000574:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000578:	6243      	str	r3, [r0, #36]	; 0x24
 800057a:	e7f8      	b.n	800056e <HAL_CAN_Start+0x48>

0800057c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800057c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800057e:	f890 5020 	ldrb.w	r5, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000582:	6806      	ldr	r6, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000584:	3d01      	subs	r5, #1
 8000586:	2d01      	cmp	r5, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000588:	68b4      	ldr	r4, [r6, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 800058a:	d841      	bhi.n	8000610 <HAL_CAN_AddTxMessage+0x94>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800058c:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 8000590:	d03a      	beq.n	8000608 <HAL_CAN_AddTxMessage+0x8c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000592:	f3c4 6401 	ubfx	r4, r4, #24, #2

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000596:	2c03      	cmp	r4, #3
 8000598:	f04f 0501 	mov.w	r5, #1
 800059c:	d105      	bne.n	80005aa <HAL_CAN_AddTxMessage+0x2e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800059e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80005a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80005a4:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80005a6:	2001      	movs	r0, #1
  }
}
 80005a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80005aa:	40a5      	lsls	r5, r4
 80005ac:	601d      	str	r5, [r3, #0]
      if (pHeader->IDE == CAN_ID_STD)
 80005ae:	6888      	ldr	r0, [r1, #8]
 80005b0:	68cf      	ldr	r7, [r1, #12]
 80005b2:	f104 0318 	add.w	r3, r4, #24
 80005b6:	bb10      	cbnz	r0, 80005fe <HAL_CAN_AddTxMessage+0x82>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80005b8:	6808      	ldr	r0, [r1, #0]
 80005ba:	ea47 5040 	orr.w	r0, r7, r0, lsl #21
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80005be:	011b      	lsls	r3, r3, #4
 80005c0:	50f0      	str	r0, [r6, r3]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80005c2:	6908      	ldr	r0, [r1, #16]
 80005c4:	0124      	lsls	r4, r4, #4
      if (pHeader->TransmitGlobalTime == ENABLE)
 80005c6:	7d09      	ldrb	r1, [r1, #20]
 80005c8:	1933      	adds	r3, r6, r4
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80005ca:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
      if (pHeader->TransmitGlobalTime == ENABLE)
 80005ce:	2901      	cmp	r1, #1
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80005d0:	bf08      	it	eq
 80005d2:	f8d3 1184 	ldreq.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80005d6:	4434      	add	r4, r6
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80005d8:	bf04      	itt	eq
 80005da:	f441 7180 	orreq.w	r1, r1, #256	; 0x100
 80005de:	f8c3 1184 	streq.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80005e2:	6851      	ldr	r1, [r2, #4]
      return HAL_OK;
 80005e4:	2000      	movs	r0, #0
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80005e6:	f8c4 118c 	str.w	r1, [r4, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80005ea:	6812      	ldr	r2, [r2, #0]
 80005ec:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80005f0:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 80005f4:	f042 0201 	orr.w	r2, r2, #1
 80005f8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
      return HAL_OK;
 80005fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80005fe:	684d      	ldr	r5, [r1, #4]
                                                           pHeader->IDE |
 8000600:	4338      	orrs	r0, r7
 8000602:	ea40 00c5 	orr.w	r0, r0, r5, lsl #3
 8000606:	e7da      	b.n	80005be <HAL_CAN_AddTxMessage+0x42>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000608:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800060a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800060e:	e7c9      	b.n	80005a4 <HAL_CAN_AddTxMessage+0x28>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000610:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000612:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000616:	e7c5      	b.n	80005a4 <HAL_CAN_AddTxMessage+0x28>

08000618 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000618:	4a07      	ldr	r2, [pc, #28]	; (8000638 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800061a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800061c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800061e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000622:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000626:	041b      	lsls	r3, r3, #16
 8000628:	0c1b      	lsrs	r3, r3, #16
 800062a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800062e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000632:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000634:	60d3      	str	r3, [r2, #12]
 8000636:	4770      	bx	lr
 8000638:	e000ed00 	.word	0xe000ed00

0800063c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800063c:	4b17      	ldr	r3, [pc, #92]	; (800069c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	68dc      	ldr	r4, [r3, #12]
 8000642:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000646:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800064a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800064c:	2b04      	cmp	r3, #4
 800064e:	bf28      	it	cs
 8000650:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000652:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000654:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000658:	bf98      	it	ls
 800065a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800065c:	fa05 f303 	lsl.w	r3, r5, r3
 8000660:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000664:	bf88      	it	hi
 8000666:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000668:	4019      	ands	r1, r3
 800066a:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800066c:	fa05 f404 	lsl.w	r4, r5, r4
 8000670:	3c01      	subs	r4, #1
 8000672:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000674:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000676:	ea42 0201 	orr.w	r2, r2, r1
 800067a:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067e:	bfa9      	itett	ge
 8000680:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000684:	4b06      	ldrlt	r3, [pc, #24]	; (80006a0 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000686:	b2d2      	uxtbge	r2, r2
 8000688:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068c:	bfbb      	ittet	lt
 800068e:	f000 000f 	andlt.w	r0, r0, #15
 8000692:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000694:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000698:	541a      	strblt	r2, [r3, r0]
 800069a:	bd30      	pop	{r4, r5, pc}
 800069c:	e000ed00 	.word	0xe000ed00
 80006a0:	e000ed14 	.word	0xe000ed14

080006a4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80006a4:	2800      	cmp	r0, #0
 80006a6:	db08      	blt.n	80006ba <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006a8:	2301      	movs	r3, #1
 80006aa:	0942      	lsrs	r2, r0, #5
 80006ac:	f000 001f 	and.w	r0, r0, #31
 80006b0:	fa03 f000 	lsl.w	r0, r3, r0
 80006b4:	4b01      	ldr	r3, [pc, #4]	; (80006bc <HAL_NVIC_EnableIRQ+0x18>)
 80006b6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80006ba:	4770      	bx	lr
 80006bc:	e000e100 	.word	0xe000e100

080006c0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006c0:	3801      	subs	r0, #1
 80006c2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006c6:	d20a      	bcs.n	80006de <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c8:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006ca:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006cc:	4a06      	ldr	r2, [pc, #24]	; (80006e8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006ce:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006d4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006d6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006d8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80006de:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	e000e010 	.word	0xe000e010
 80006e8:	e000ed00 	.word	0xe000ed00

080006ec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80006ec:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80006ee:	b330      	cbz	r0, 800073e <HAL_DMA_Init+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80006f0:	2214      	movs	r2, #20
 80006f2:	6801      	ldr	r1, [r0, #0]
 80006f4:	4b13      	ldr	r3, [pc, #76]	; (8000744 <HAL_DMA_Init+0x58>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80006f6:	6884      	ldr	r4, [r0, #8]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80006f8:	440b      	add	r3, r1
 80006fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80006fe:	009b      	lsls	r3, r3, #2
 8000700:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000702:	4b11      	ldr	r3, [pc, #68]	; (8000748 <HAL_DMA_Init+0x5c>)
  tmp = hdma->Instance->CCR;
 8000704:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 8000706:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp |=  hdma->Init.Direction        |
 8000708:	6843      	ldr	r3, [r0, #4]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800070a:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
  tmp |=  hdma->Init.Direction        |
 800070e:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000710:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000712:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000716:	4323      	orrs	r3, r4
 8000718:	6904      	ldr	r4, [r0, #16]
 800071a:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800071c:	6944      	ldr	r4, [r0, #20]
 800071e:	4323      	orrs	r3, r4
 8000720:	6984      	ldr	r4, [r0, #24]
 8000722:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8000724:	69c4      	ldr	r4, [r0, #28]
 8000726:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8000728:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800072a:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800072c:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800072e:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000730:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000734:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000736:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 800073a:	4618      	mov	r0, r3
 800073c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800073e:	2001      	movs	r0, #1
}
 8000740:	bd10      	pop	{r4, pc}
 8000742:	bf00      	nop
 8000744:	bffdfff8 	.word	0xbffdfff8
 8000748:	40020000 	.word	0x40020000

0800074c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800074c:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
  uint32_t source_it = hdma->Instance->CCR;
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800074e:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000750:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000752:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000754:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000756:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000758:	4095      	lsls	r5, r2
 800075a:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 800075c:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800075e:	d032      	beq.n	80007c6 <HAL_DMA_IRQHandler+0x7a>
 8000760:	074d      	lsls	r5, r1, #29
 8000762:	d530      	bpl.n	80007c6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	0696      	lsls	r6, r2, #26
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000768:	bf5e      	ittt	pl
 800076a:	681a      	ldrpl	r2, [r3, #0]
 800076c:	f022 0204 	bicpl.w	r2, r2, #4
 8000770:	601a      	strpl	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000772:	4a3e      	ldr	r2, [pc, #248]	; (800086c <HAL_DMA_IRQHandler+0x120>)
 8000774:	4293      	cmp	r3, r2
 8000776:	d019      	beq.n	80007ac <HAL_DMA_IRQHandler+0x60>
 8000778:	3214      	adds	r2, #20
 800077a:	4293      	cmp	r3, r2
 800077c:	d018      	beq.n	80007b0 <HAL_DMA_IRQHandler+0x64>
 800077e:	3214      	adds	r2, #20
 8000780:	4293      	cmp	r3, r2
 8000782:	d017      	beq.n	80007b4 <HAL_DMA_IRQHandler+0x68>
 8000784:	3214      	adds	r2, #20
 8000786:	4293      	cmp	r3, r2
 8000788:	d017      	beq.n	80007ba <HAL_DMA_IRQHandler+0x6e>
 800078a:	3214      	adds	r2, #20
 800078c:	4293      	cmp	r3, r2
 800078e:	d017      	beq.n	80007c0 <HAL_DMA_IRQHandler+0x74>
 8000790:	3214      	adds	r2, #20
 8000792:	4293      	cmp	r3, r2
 8000794:	bf0c      	ite	eq
 8000796:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 800079a:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 800079e:	4a34      	ldr	r2, [pc, #208]	; (8000870 <HAL_DMA_IRQHandler+0x124>)
 80007a0:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80007a2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    if (hdma->XferErrorCallback != NULL)
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d05e      	beq.n	8000866 <HAL_DMA_IRQHandler+0x11a>
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
    }
  }
  return;
}
 80007a8:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80007aa:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80007ac:	2304      	movs	r3, #4
 80007ae:	e7f6      	b.n	800079e <HAL_DMA_IRQHandler+0x52>
 80007b0:	2340      	movs	r3, #64	; 0x40
 80007b2:	e7f4      	b.n	800079e <HAL_DMA_IRQHandler+0x52>
 80007b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007b8:	e7f1      	b.n	800079e <HAL_DMA_IRQHandler+0x52>
 80007ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007be:	e7ee      	b.n	800079e <HAL_DMA_IRQHandler+0x52>
 80007c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80007c4:	e7eb      	b.n	800079e <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80007c6:	2502      	movs	r5, #2
 80007c8:	4095      	lsls	r5, r2
 80007ca:	4225      	tst	r5, r4
 80007cc:	d035      	beq.n	800083a <HAL_DMA_IRQHandler+0xee>
 80007ce:	078d      	lsls	r5, r1, #30
 80007d0:	d533      	bpl.n	800083a <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80007d2:	681a      	ldr	r2, [r3, #0]
 80007d4:	0694      	lsls	r4, r2, #26
 80007d6:	d406      	bmi.n	80007e6 <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80007d8:	681a      	ldr	r2, [r3, #0]
 80007da:	f022 020a 	bic.w	r2, r2, #10
 80007de:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80007e0:	2201      	movs	r2, #1
 80007e2:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80007e6:	4a21      	ldr	r2, [pc, #132]	; (800086c <HAL_DMA_IRQHandler+0x120>)
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d019      	beq.n	8000820 <HAL_DMA_IRQHandler+0xd4>
 80007ec:	3214      	adds	r2, #20
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d018      	beq.n	8000824 <HAL_DMA_IRQHandler+0xd8>
 80007f2:	3214      	adds	r2, #20
 80007f4:	4293      	cmp	r3, r2
 80007f6:	d017      	beq.n	8000828 <HAL_DMA_IRQHandler+0xdc>
 80007f8:	3214      	adds	r2, #20
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d017      	beq.n	800082e <HAL_DMA_IRQHandler+0xe2>
 80007fe:	3214      	adds	r2, #20
 8000800:	4293      	cmp	r3, r2
 8000802:	d017      	beq.n	8000834 <HAL_DMA_IRQHandler+0xe8>
 8000804:	3214      	adds	r2, #20
 8000806:	4293      	cmp	r3, r2
 8000808:	bf0c      	ite	eq
 800080a:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 800080e:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8000812:	4a17      	ldr	r2, [pc, #92]	; (8000870 <HAL_DMA_IRQHandler+0x124>)
 8000814:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8000816:	2300      	movs	r3, #0
 8000818:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 800081c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800081e:	e7c1      	b.n	80007a4 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000820:	2302      	movs	r3, #2
 8000822:	e7f6      	b.n	8000812 <HAL_DMA_IRQHandler+0xc6>
 8000824:	2320      	movs	r3, #32
 8000826:	e7f4      	b.n	8000812 <HAL_DMA_IRQHandler+0xc6>
 8000828:	f44f 7300 	mov.w	r3, #512	; 0x200
 800082c:	e7f1      	b.n	8000812 <HAL_DMA_IRQHandler+0xc6>
 800082e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000832:	e7ee      	b.n	8000812 <HAL_DMA_IRQHandler+0xc6>
 8000834:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000838:	e7eb      	b.n	8000812 <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800083a:	2508      	movs	r5, #8
 800083c:	4095      	lsls	r5, r2
 800083e:	4225      	tst	r5, r4
 8000840:	d011      	beq.n	8000866 <HAL_DMA_IRQHandler+0x11a>
 8000842:	0709      	lsls	r1, r1, #28
 8000844:	d50f      	bpl.n	8000866 <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000846:	6819      	ldr	r1, [r3, #0]
 8000848:	f021 010e 	bic.w	r1, r1, #14
 800084c:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800084e:	2301      	movs	r3, #1
 8000850:	fa03 f202 	lsl.w	r2, r3, r2
 8000854:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000856:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8000858:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 800085c:	2300      	movs	r3, #0
 800085e:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8000862:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000864:	e79e      	b.n	80007a4 <HAL_DMA_IRQHandler+0x58>
}
 8000866:	bc70      	pop	{r4, r5, r6}
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	40020008 	.word	0x40020008
 8000870:	40020000 	.word	0x40020000

08000874 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000874:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000878:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 800087a:	4626      	mov	r6, r4
 800087c:	4b66      	ldr	r3, [pc, #408]	; (8000a18 <HAL_GPIO_Init+0x1a4>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800087e:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 8000a28 <HAL_GPIO_Init+0x1b4>
 8000882:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 8000a2c <HAL_GPIO_Init+0x1b8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000886:	680a      	ldr	r2, [r1, #0]
 8000888:	fa32 f506 	lsrs.w	r5, r2, r6
 800088c:	d102      	bne.n	8000894 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 800088e:	b003      	add	sp, #12
 8000890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8000894:	f04f 0801 	mov.w	r8, #1
 8000898:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800089c:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 80008a0:	4590      	cmp	r8, r2
 80008a2:	d17f      	bne.n	80009a4 <HAL_GPIO_Init+0x130>
      switch (GPIO_Init->Mode)
 80008a4:	684d      	ldr	r5, [r1, #4]
 80008a6:	2d12      	cmp	r5, #18
 80008a8:	f000 80aa 	beq.w	8000a00 <HAL_GPIO_Init+0x18c>
 80008ac:	f200 8083 	bhi.w	80009b6 <HAL_GPIO_Init+0x142>
 80008b0:	2d02      	cmp	r5, #2
 80008b2:	f000 80a2 	beq.w	80009fa <HAL_GPIO_Init+0x186>
 80008b6:	d877      	bhi.n	80009a8 <HAL_GPIO_Init+0x134>
 80008b8:	2d00      	cmp	r5, #0
 80008ba:	f000 8089 	beq.w	80009d0 <HAL_GPIO_Init+0x15c>
 80008be:	2d01      	cmp	r5, #1
 80008c0:	f000 8099 	beq.w	80009f6 <HAL_GPIO_Init+0x182>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80008c4:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80008c8:	2aff      	cmp	r2, #255	; 0xff
 80008ca:	bf93      	iteet	ls
 80008cc:	4682      	movls	sl, r0
 80008ce:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80008d2:	3d08      	subhi	r5, #8
 80008d4:	f8d0 b000 	ldrls.w	fp, [r0]
 80008d8:	bf92      	itee	ls
 80008da:	00b5      	lslls	r5, r6, #2
 80008dc:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80008e0:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80008e2:	fa09 f805 	lsl.w	r8, r9, r5
 80008e6:	ea2b 0808 	bic.w	r8, fp, r8
 80008ea:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80008ee:	bf88      	it	hi
 80008f0:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80008f4:	ea48 0505 	orr.w	r5, r8, r5
 80008f8:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008fc:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000900:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000904:	d04e      	beq.n	80009a4 <HAL_GPIO_Init+0x130>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000906:	4d45      	ldr	r5, [pc, #276]	; (8000a1c <HAL_GPIO_Init+0x1a8>)
 8000908:	4f44      	ldr	r7, [pc, #272]	; (8000a1c <HAL_GPIO_Init+0x1a8>)
 800090a:	69ad      	ldr	r5, [r5, #24]
 800090c:	f026 0803 	bic.w	r8, r6, #3
 8000910:	f045 0501 	orr.w	r5, r5, #1
 8000914:	61bd      	str	r5, [r7, #24]
 8000916:	69bd      	ldr	r5, [r7, #24]
 8000918:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800091c:	f005 0501 	and.w	r5, r5, #1
 8000920:	9501      	str	r5, [sp, #4]
 8000922:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000926:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800092a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800092c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8000930:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000934:	fa09 f90b 	lsl.w	r9, r9, fp
 8000938:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800093c:	4d38      	ldr	r5, [pc, #224]	; (8000a20 <HAL_GPIO_Init+0x1ac>)
 800093e:	42a8      	cmp	r0, r5
 8000940:	d063      	beq.n	8000a0a <HAL_GPIO_Init+0x196>
 8000942:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000946:	42a8      	cmp	r0, r5
 8000948:	d061      	beq.n	8000a0e <HAL_GPIO_Init+0x19a>
 800094a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800094e:	42a8      	cmp	r0, r5
 8000950:	d05f      	beq.n	8000a12 <HAL_GPIO_Init+0x19e>
 8000952:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000956:	42a8      	cmp	r0, r5
 8000958:	bf0c      	ite	eq
 800095a:	2503      	moveq	r5, #3
 800095c:	2504      	movne	r5, #4
 800095e:	fa05 f50b 	lsl.w	r5, r5, fp
 8000962:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8000966:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 800096a:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800096c:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000970:	bf14      	ite	ne
 8000972:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000974:	4395      	biceq	r5, r2
 8000976:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8000978:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800097a:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800097e:	bf14      	ite	ne
 8000980:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000982:	4395      	biceq	r5, r2
 8000984:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8000986:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000988:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 800098c:	bf14      	ite	ne
 800098e:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000990:	4395      	biceq	r5, r2
 8000992:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8000994:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000996:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800099a:	bf14      	ite	ne
 800099c:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800099e:	ea25 0202 	biceq.w	r2, r5, r2
 80009a2:	60da      	str	r2, [r3, #12]
	position++;
 80009a4:	3601      	adds	r6, #1
 80009a6:	e76e      	b.n	8000886 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 80009a8:	2d03      	cmp	r5, #3
 80009aa:	d022      	beq.n	80009f2 <HAL_GPIO_Init+0x17e>
 80009ac:	2d11      	cmp	r5, #17
 80009ae:	d189      	bne.n	80008c4 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80009b0:	68cc      	ldr	r4, [r1, #12]
 80009b2:	3404      	adds	r4, #4
          break;
 80009b4:	e786      	b.n	80008c4 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 80009b6:	4f1b      	ldr	r7, [pc, #108]	; (8000a24 <HAL_GPIO_Init+0x1b0>)
 80009b8:	42bd      	cmp	r5, r7
 80009ba:	d009      	beq.n	80009d0 <HAL_GPIO_Init+0x15c>
 80009bc:	d812      	bhi.n	80009e4 <HAL_GPIO_Init+0x170>
 80009be:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8000a30 <HAL_GPIO_Init+0x1bc>
 80009c2:	454d      	cmp	r5, r9
 80009c4:	d004      	beq.n	80009d0 <HAL_GPIO_Init+0x15c>
 80009c6:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80009ca:	454d      	cmp	r5, r9
 80009cc:	f47f af7a 	bne.w	80008c4 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80009d0:	688c      	ldr	r4, [r1, #8]
 80009d2:	b1c4      	cbz	r4, 8000a06 <HAL_GPIO_Init+0x192>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80009d4:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 80009d6:	bf0c      	ite	eq
 80009d8:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80009dc:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009e0:	2408      	movs	r4, #8
 80009e2:	e76f      	b.n	80008c4 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 80009e4:	4575      	cmp	r5, lr
 80009e6:	d0f3      	beq.n	80009d0 <HAL_GPIO_Init+0x15c>
 80009e8:	4565      	cmp	r5, ip
 80009ea:	d0f1      	beq.n	80009d0 <HAL_GPIO_Init+0x15c>
 80009ec:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000a34 <HAL_GPIO_Init+0x1c0>
 80009f0:	e7eb      	b.n	80009ca <HAL_GPIO_Init+0x156>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80009f2:	2400      	movs	r4, #0
 80009f4:	e766      	b.n	80008c4 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80009f6:	68cc      	ldr	r4, [r1, #12]
          break;
 80009f8:	e764      	b.n	80008c4 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80009fa:	68cc      	ldr	r4, [r1, #12]
 80009fc:	3408      	adds	r4, #8
          break;
 80009fe:	e761      	b.n	80008c4 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a00:	68cc      	ldr	r4, [r1, #12]
 8000a02:	340c      	adds	r4, #12
          break;
 8000a04:	e75e      	b.n	80008c4 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a06:	2404      	movs	r4, #4
 8000a08:	e75c      	b.n	80008c4 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a0a:	2500      	movs	r5, #0
 8000a0c:	e7a7      	b.n	800095e <HAL_GPIO_Init+0xea>
 8000a0e:	2501      	movs	r5, #1
 8000a10:	e7a5      	b.n	800095e <HAL_GPIO_Init+0xea>
 8000a12:	2502      	movs	r5, #2
 8000a14:	e7a3      	b.n	800095e <HAL_GPIO_Init+0xea>
 8000a16:	bf00      	nop
 8000a18:	40010400 	.word	0x40010400
 8000a1c:	40021000 	.word	0x40021000
 8000a20:	40010800 	.word	0x40010800
 8000a24:	10210000 	.word	0x10210000
 8000a28:	10310000 	.word	0x10310000
 8000a2c:	10320000 	.word	0x10320000
 8000a30:	10110000 	.word	0x10110000
 8000a34:	10220000 	.word	0x10220000

08000a38 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000a38:	b10a      	cbz	r2, 8000a3e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a3a:	6101      	str	r1, [r0, #16]
 8000a3c:	4770      	bx	lr
 8000a3e:	0409      	lsls	r1, r1, #16
 8000a40:	e7fb      	b.n	8000a3a <HAL_GPIO_WritePin+0x2>
	...

08000a44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a44:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000a48:	4605      	mov	r5, r0
 8000a4a:	b908      	cbnz	r0, 8000a50 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8000a4c:	2001      	movs	r0, #1
 8000a4e:	e03c      	b.n	8000aca <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a50:	6803      	ldr	r3, [r0, #0]
 8000a52:	07db      	lsls	r3, r3, #31
 8000a54:	d410      	bmi.n	8000a78 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a56:	682b      	ldr	r3, [r5, #0]
 8000a58:	079f      	lsls	r7, r3, #30
 8000a5a:	d45d      	bmi.n	8000b18 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a5c:	682b      	ldr	r3, [r5, #0]
 8000a5e:	0719      	lsls	r1, r3, #28
 8000a60:	f100 8094 	bmi.w	8000b8c <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a64:	682b      	ldr	r3, [r5, #0]
 8000a66:	075a      	lsls	r2, r3, #29
 8000a68:	f100 80be 	bmi.w	8000be8 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000a6c:	69e8      	ldr	r0, [r5, #28]
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	f040 812c 	bne.w	8000ccc <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 8000a74:	2000      	movs	r0, #0
 8000a76:	e028      	b.n	8000aca <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000a78:	4c8f      	ldr	r4, [pc, #572]	; (8000cb8 <HAL_RCC_OscConfig+0x274>)
 8000a7a:	6863      	ldr	r3, [r4, #4]
 8000a7c:	f003 030c 	and.w	r3, r3, #12
 8000a80:	2b04      	cmp	r3, #4
 8000a82:	d007      	beq.n	8000a94 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000a84:	6863      	ldr	r3, [r4, #4]
 8000a86:	f003 030c 	and.w	r3, r3, #12
 8000a8a:	2b08      	cmp	r3, #8
 8000a8c:	d109      	bne.n	8000aa2 <HAL_RCC_OscConfig+0x5e>
 8000a8e:	6863      	ldr	r3, [r4, #4]
 8000a90:	03de      	lsls	r6, r3, #15
 8000a92:	d506      	bpl.n	8000aa2 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a94:	6823      	ldr	r3, [r4, #0]
 8000a96:	039c      	lsls	r4, r3, #14
 8000a98:	d5dd      	bpl.n	8000a56 <HAL_RCC_OscConfig+0x12>
 8000a9a:	686b      	ldr	r3, [r5, #4]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d1da      	bne.n	8000a56 <HAL_RCC_OscConfig+0x12>
 8000aa0:	e7d4      	b.n	8000a4c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000aa2:	686b      	ldr	r3, [r5, #4]
 8000aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000aa8:	d112      	bne.n	8000ad0 <HAL_RCC_OscConfig+0x8c>
 8000aaa:	6823      	ldr	r3, [r4, #0]
 8000aac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ab0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000ab2:	f7ff fb8d 	bl	80001d0 <HAL_GetTick>
 8000ab6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ab8:	6823      	ldr	r3, [r4, #0]
 8000aba:	0398      	lsls	r0, r3, #14
 8000abc:	d4cb      	bmi.n	8000a56 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000abe:	f7ff fb87 	bl	80001d0 <HAL_GetTick>
 8000ac2:	1b80      	subs	r0, r0, r6
 8000ac4:	2864      	cmp	r0, #100	; 0x64
 8000ac6:	d9f7      	bls.n	8000ab8 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000ac8:	2003      	movs	r0, #3
}
 8000aca:	b002      	add	sp, #8
 8000acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ad0:	b99b      	cbnz	r3, 8000afa <HAL_RCC_OscConfig+0xb6>
 8000ad2:	6823      	ldr	r3, [r4, #0]
 8000ad4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ad8:	6023      	str	r3, [r4, #0]
 8000ada:	6823      	ldr	r3, [r4, #0]
 8000adc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ae0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000ae2:	f7ff fb75 	bl	80001d0 <HAL_GetTick>
 8000ae6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ae8:	6823      	ldr	r3, [r4, #0]
 8000aea:	0399      	lsls	r1, r3, #14
 8000aec:	d5b3      	bpl.n	8000a56 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000aee:	f7ff fb6f 	bl	80001d0 <HAL_GetTick>
 8000af2:	1b80      	subs	r0, r0, r6
 8000af4:	2864      	cmp	r0, #100	; 0x64
 8000af6:	d9f7      	bls.n	8000ae8 <HAL_RCC_OscConfig+0xa4>
 8000af8:	e7e6      	b.n	8000ac8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000afa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000afe:	6823      	ldr	r3, [r4, #0]
 8000b00:	d103      	bne.n	8000b0a <HAL_RCC_OscConfig+0xc6>
 8000b02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b06:	6023      	str	r3, [r4, #0]
 8000b08:	e7cf      	b.n	8000aaa <HAL_RCC_OscConfig+0x66>
 8000b0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b0e:	6023      	str	r3, [r4, #0]
 8000b10:	6823      	ldr	r3, [r4, #0]
 8000b12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b16:	e7cb      	b.n	8000ab0 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b18:	4c67      	ldr	r4, [pc, #412]	; (8000cb8 <HAL_RCC_OscConfig+0x274>)
 8000b1a:	6863      	ldr	r3, [r4, #4]
 8000b1c:	f013 0f0c 	tst.w	r3, #12
 8000b20:	d007      	beq.n	8000b32 <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000b22:	6863      	ldr	r3, [r4, #4]
 8000b24:	f003 030c 	and.w	r3, r3, #12
 8000b28:	2b08      	cmp	r3, #8
 8000b2a:	d110      	bne.n	8000b4e <HAL_RCC_OscConfig+0x10a>
 8000b2c:	6863      	ldr	r3, [r4, #4]
 8000b2e:	03da      	lsls	r2, r3, #15
 8000b30:	d40d      	bmi.n	8000b4e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b32:	6823      	ldr	r3, [r4, #0]
 8000b34:	079b      	lsls	r3, r3, #30
 8000b36:	d502      	bpl.n	8000b3e <HAL_RCC_OscConfig+0xfa>
 8000b38:	692b      	ldr	r3, [r5, #16]
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d186      	bne.n	8000a4c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b3e:	6823      	ldr	r3, [r4, #0]
 8000b40:	696a      	ldr	r2, [r5, #20]
 8000b42:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000b46:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000b4a:	6023      	str	r3, [r4, #0]
 8000b4c:	e786      	b.n	8000a5c <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000b4e:	692a      	ldr	r2, [r5, #16]
 8000b50:	4b5a      	ldr	r3, [pc, #360]	; (8000cbc <HAL_RCC_OscConfig+0x278>)
 8000b52:	b16a      	cbz	r2, 8000b70 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8000b54:	2201      	movs	r2, #1
 8000b56:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000b58:	f7ff fb3a 	bl	80001d0 <HAL_GetTick>
 8000b5c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b5e:	6823      	ldr	r3, [r4, #0]
 8000b60:	079f      	lsls	r7, r3, #30
 8000b62:	d4ec      	bmi.n	8000b3e <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000b64:	f7ff fb34 	bl	80001d0 <HAL_GetTick>
 8000b68:	1b80      	subs	r0, r0, r6
 8000b6a:	2802      	cmp	r0, #2
 8000b6c:	d9f7      	bls.n	8000b5e <HAL_RCC_OscConfig+0x11a>
 8000b6e:	e7ab      	b.n	8000ac8 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000b70:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000b72:	f7ff fb2d 	bl	80001d0 <HAL_GetTick>
 8000b76:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b78:	6823      	ldr	r3, [r4, #0]
 8000b7a:	0798      	lsls	r0, r3, #30
 8000b7c:	f57f af6e 	bpl.w	8000a5c <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000b80:	f7ff fb26 	bl	80001d0 <HAL_GetTick>
 8000b84:	1b80      	subs	r0, r0, r6
 8000b86:	2802      	cmp	r0, #2
 8000b88:	d9f6      	bls.n	8000b78 <HAL_RCC_OscConfig+0x134>
 8000b8a:	e79d      	b.n	8000ac8 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000b8c:	69aa      	ldr	r2, [r5, #24]
 8000b8e:	4c4a      	ldr	r4, [pc, #296]	; (8000cb8 <HAL_RCC_OscConfig+0x274>)
 8000b90:	4b4b      	ldr	r3, [pc, #300]	; (8000cc0 <HAL_RCC_OscConfig+0x27c>)
 8000b92:	b1da      	cbz	r2, 8000bcc <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8000b94:	2201      	movs	r2, #1
 8000b96:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000b98:	f7ff fb1a 	bl	80001d0 <HAL_GetTick>
 8000b9c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000ba0:	079b      	lsls	r3, r3, #30
 8000ba2:	d50d      	bpl.n	8000bc0 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000ba4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000ba8:	4b46      	ldr	r3, [pc, #280]	; (8000cc4 <HAL_RCC_OscConfig+0x280>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	fbb3 f3f2 	udiv	r3, r3, r2
 8000bb0:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8000bb2:	bf00      	nop
  }
  while (Delay --);
 8000bb4:	9b01      	ldr	r3, [sp, #4]
 8000bb6:	1e5a      	subs	r2, r3, #1
 8000bb8:	9201      	str	r2, [sp, #4]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d1f9      	bne.n	8000bb2 <HAL_RCC_OscConfig+0x16e>
 8000bbe:	e751      	b.n	8000a64 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000bc0:	f7ff fb06 	bl	80001d0 <HAL_GetTick>
 8000bc4:	1b80      	subs	r0, r0, r6
 8000bc6:	2802      	cmp	r0, #2
 8000bc8:	d9e9      	bls.n	8000b9e <HAL_RCC_OscConfig+0x15a>
 8000bca:	e77d      	b.n	8000ac8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000bcc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000bce:	f7ff faff 	bl	80001d0 <HAL_GetTick>
 8000bd2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000bd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000bd6:	079f      	lsls	r7, r3, #30
 8000bd8:	f57f af44 	bpl.w	8000a64 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000bdc:	f7ff faf8 	bl	80001d0 <HAL_GetTick>
 8000be0:	1b80      	subs	r0, r0, r6
 8000be2:	2802      	cmp	r0, #2
 8000be4:	d9f6      	bls.n	8000bd4 <HAL_RCC_OscConfig+0x190>
 8000be6:	e76f      	b.n	8000ac8 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000be8:	4c33      	ldr	r4, [pc, #204]	; (8000cb8 <HAL_RCC_OscConfig+0x274>)
 8000bea:	69e3      	ldr	r3, [r4, #28]
 8000bec:	00d8      	lsls	r0, r3, #3
 8000bee:	d424      	bmi.n	8000c3a <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8000bf0:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000bf2:	69e3      	ldr	r3, [r4, #28]
 8000bf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bf8:	61e3      	str	r3, [r4, #28]
 8000bfa:	69e3      	ldr	r3, [r4, #28]
 8000bfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c00:	9300      	str	r3, [sp, #0]
 8000c02:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c04:	4e30      	ldr	r6, [pc, #192]	; (8000cc8 <HAL_RCC_OscConfig+0x284>)
 8000c06:	6833      	ldr	r3, [r6, #0]
 8000c08:	05d9      	lsls	r1, r3, #23
 8000c0a:	d518      	bpl.n	8000c3e <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c0c:	68eb      	ldr	r3, [r5, #12]
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d126      	bne.n	8000c60 <HAL_RCC_OscConfig+0x21c>
 8000c12:	6a23      	ldr	r3, [r4, #32]
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000c1a:	f7ff fad9 	bl	80001d0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000c1e:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000c22:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c24:	6a23      	ldr	r3, [r4, #32]
 8000c26:	079b      	lsls	r3, r3, #30
 8000c28:	d53f      	bpl.n	8000caa <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 8000c2a:	2f00      	cmp	r7, #0
 8000c2c:	f43f af1e 	beq.w	8000a6c <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c30:	69e3      	ldr	r3, [r4, #28]
 8000c32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000c36:	61e3      	str	r3, [r4, #28]
 8000c38:	e718      	b.n	8000a6c <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8000c3a:	2700      	movs	r7, #0
 8000c3c:	e7e2      	b.n	8000c04 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c3e:	6833      	ldr	r3, [r6, #0]
 8000c40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c44:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000c46:	f7ff fac3 	bl	80001d0 <HAL_GetTick>
 8000c4a:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c4c:	6833      	ldr	r3, [r6, #0]
 8000c4e:	05da      	lsls	r2, r3, #23
 8000c50:	d4dc      	bmi.n	8000c0c <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c52:	f7ff fabd 	bl	80001d0 <HAL_GetTick>
 8000c56:	eba0 0008 	sub.w	r0, r0, r8
 8000c5a:	2864      	cmp	r0, #100	; 0x64
 8000c5c:	d9f6      	bls.n	8000c4c <HAL_RCC_OscConfig+0x208>
 8000c5e:	e733      	b.n	8000ac8 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c60:	b9ab      	cbnz	r3, 8000c8e <HAL_RCC_OscConfig+0x24a>
 8000c62:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000c64:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c68:	f023 0301 	bic.w	r3, r3, #1
 8000c6c:	6223      	str	r3, [r4, #32]
 8000c6e:	6a23      	ldr	r3, [r4, #32]
 8000c70:	f023 0304 	bic.w	r3, r3, #4
 8000c74:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000c76:	f7ff faab 	bl	80001d0 <HAL_GetTick>
 8000c7a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c7c:	6a23      	ldr	r3, [r4, #32]
 8000c7e:	0798      	lsls	r0, r3, #30
 8000c80:	d5d3      	bpl.n	8000c2a <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000c82:	f7ff faa5 	bl	80001d0 <HAL_GetTick>
 8000c86:	1b80      	subs	r0, r0, r6
 8000c88:	4540      	cmp	r0, r8
 8000c8a:	d9f7      	bls.n	8000c7c <HAL_RCC_OscConfig+0x238>
 8000c8c:	e71c      	b.n	8000ac8 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c8e:	2b05      	cmp	r3, #5
 8000c90:	6a23      	ldr	r3, [r4, #32]
 8000c92:	d103      	bne.n	8000c9c <HAL_RCC_OscConfig+0x258>
 8000c94:	f043 0304 	orr.w	r3, r3, #4
 8000c98:	6223      	str	r3, [r4, #32]
 8000c9a:	e7ba      	b.n	8000c12 <HAL_RCC_OscConfig+0x1ce>
 8000c9c:	f023 0301 	bic.w	r3, r3, #1
 8000ca0:	6223      	str	r3, [r4, #32]
 8000ca2:	6a23      	ldr	r3, [r4, #32]
 8000ca4:	f023 0304 	bic.w	r3, r3, #4
 8000ca8:	e7b6      	b.n	8000c18 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000caa:	f7ff fa91 	bl	80001d0 <HAL_GetTick>
 8000cae:	eba0 0008 	sub.w	r0, r0, r8
 8000cb2:	42b0      	cmp	r0, r6
 8000cb4:	d9b6      	bls.n	8000c24 <HAL_RCC_OscConfig+0x1e0>
 8000cb6:	e707      	b.n	8000ac8 <HAL_RCC_OscConfig+0x84>
 8000cb8:	40021000 	.word	0x40021000
 8000cbc:	42420000 	.word	0x42420000
 8000cc0:	42420480 	.word	0x42420480
 8000cc4:	20000008 	.word	0x20000008
 8000cc8:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ccc:	4b2a      	ldr	r3, [pc, #168]	; (8000d78 <HAL_RCC_OscConfig+0x334>)
 8000cce:	685a      	ldr	r2, [r3, #4]
 8000cd0:	461c      	mov	r4, r3
 8000cd2:	f002 020c 	and.w	r2, r2, #12
 8000cd6:	2a08      	cmp	r2, #8
 8000cd8:	d03d      	beq.n	8000d56 <HAL_RCC_OscConfig+0x312>
 8000cda:	2300      	movs	r3, #0
 8000cdc:	4e27      	ldr	r6, [pc, #156]	; (8000d7c <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000cde:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000ce0:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ce2:	d12b      	bne.n	8000d3c <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8000ce4:	f7ff fa74 	bl	80001d0 <HAL_GetTick>
 8000ce8:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000cea:	6823      	ldr	r3, [r4, #0]
 8000cec:	0199      	lsls	r1, r3, #6
 8000cee:	d41f      	bmi.n	8000d30 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000cf0:	6a2b      	ldr	r3, [r5, #32]
 8000cf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cf6:	d105      	bne.n	8000d04 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000cf8:	6862      	ldr	r2, [r4, #4]
 8000cfa:	68a9      	ldr	r1, [r5, #8]
 8000cfc:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000d00:	430a      	orrs	r2, r1
 8000d02:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d04:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000d06:	6862      	ldr	r2, [r4, #4]
 8000d08:	430b      	orrs	r3, r1
 8000d0a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000d12:	2301      	movs	r3, #1
 8000d14:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000d16:	f7ff fa5b 	bl	80001d0 <HAL_GetTick>
 8000d1a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d1c:	6823      	ldr	r3, [r4, #0]
 8000d1e:	019a      	lsls	r2, r3, #6
 8000d20:	f53f aea8 	bmi.w	8000a74 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d24:	f7ff fa54 	bl	80001d0 <HAL_GetTick>
 8000d28:	1b40      	subs	r0, r0, r5
 8000d2a:	2802      	cmp	r0, #2
 8000d2c:	d9f6      	bls.n	8000d1c <HAL_RCC_OscConfig+0x2d8>
 8000d2e:	e6cb      	b.n	8000ac8 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d30:	f7ff fa4e 	bl	80001d0 <HAL_GetTick>
 8000d34:	1bc0      	subs	r0, r0, r7
 8000d36:	2802      	cmp	r0, #2
 8000d38:	d9d7      	bls.n	8000cea <HAL_RCC_OscConfig+0x2a6>
 8000d3a:	e6c5      	b.n	8000ac8 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000d3c:	f7ff fa48 	bl	80001d0 <HAL_GetTick>
 8000d40:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d42:	6823      	ldr	r3, [r4, #0]
 8000d44:	019b      	lsls	r3, r3, #6
 8000d46:	f57f ae95 	bpl.w	8000a74 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d4a:	f7ff fa41 	bl	80001d0 <HAL_GetTick>
 8000d4e:	1b40      	subs	r0, r0, r5
 8000d50:	2802      	cmp	r0, #2
 8000d52:	d9f6      	bls.n	8000d42 <HAL_RCC_OscConfig+0x2fe>
 8000d54:	e6b8      	b.n	8000ac8 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000d56:	2801      	cmp	r0, #1
 8000d58:	f43f aeb7 	beq.w	8000aca <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8000d5c:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000d5e:	6a2b      	ldr	r3, [r5, #32]
 8000d60:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8000d64:	429a      	cmp	r2, r3
 8000d66:	f47f ae71 	bne.w	8000a4c <HAL_RCC_OscConfig+0x8>
 8000d6a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000d6c:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8000d70:	1ac0      	subs	r0, r0, r3
 8000d72:	bf18      	it	ne
 8000d74:	2001      	movne	r0, #1
 8000d76:	e6a8      	b.n	8000aca <HAL_RCC_OscConfig+0x86>
 8000d78:	40021000 	.word	0x40021000
 8000d7c:	42420060 	.word	0x42420060

08000d80 <HAL_RCC_GetSysClockFreq>:
{
 8000d80:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000d82:	4b19      	ldr	r3, [pc, #100]	; (8000de8 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000d84:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000d86:	ac02      	add	r4, sp, #8
 8000d88:	f103 0510 	add.w	r5, r3, #16
 8000d8c:	4622      	mov	r2, r4
 8000d8e:	6818      	ldr	r0, [r3, #0]
 8000d90:	6859      	ldr	r1, [r3, #4]
 8000d92:	3308      	adds	r3, #8
 8000d94:	c203      	stmia	r2!, {r0, r1}
 8000d96:	42ab      	cmp	r3, r5
 8000d98:	4614      	mov	r4, r2
 8000d9a:	d1f7      	bne.n	8000d8c <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	f88d 3004 	strb.w	r3, [sp, #4]
 8000da2:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000da4:	4911      	ldr	r1, [pc, #68]	; (8000dec <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000da6:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8000daa:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000dac:	f003 020c 	and.w	r2, r3, #12
 8000db0:	2a08      	cmp	r2, #8
 8000db2:	d117      	bne.n	8000de4 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000db4:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000db8:	a806      	add	r0, sp, #24
 8000dba:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000dbc:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000dbe:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000dc2:	d50c      	bpl.n	8000dde <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000dc4:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000dc6:	480a      	ldr	r0, [pc, #40]	; (8000df0 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000dc8:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000dcc:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000dce:	aa06      	add	r2, sp, #24
 8000dd0:	4413      	add	r3, r2
 8000dd2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000dd6:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000dda:	b007      	add	sp, #28
 8000ddc:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000dde:	4805      	ldr	r0, [pc, #20]	; (8000df4 <HAL_RCC_GetSysClockFreq+0x74>)
 8000de0:	4350      	muls	r0, r2
 8000de2:	e7fa      	b.n	8000dda <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000de4:	4802      	ldr	r0, [pc, #8]	; (8000df0 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8000de6:	e7f8      	b.n	8000dda <HAL_RCC_GetSysClockFreq+0x5a>
 8000de8:	08001a2c 	.word	0x08001a2c
 8000dec:	40021000 	.word	0x40021000
 8000df0:	007a1200 	.word	0x007a1200
 8000df4:	003d0900 	.word	0x003d0900

08000df8 <HAL_RCC_ClockConfig>:
{
 8000df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000dfc:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8000dfe:	4604      	mov	r4, r0
 8000e00:	b910      	cbnz	r0, 8000e08 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000e02:	2001      	movs	r0, #1
 8000e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000e08:	4a45      	ldr	r2, [pc, #276]	; (8000f20 <HAL_RCC_ClockConfig+0x128>)
 8000e0a:	6813      	ldr	r3, [r2, #0]
 8000e0c:	f003 0307 	and.w	r3, r3, #7
 8000e10:	428b      	cmp	r3, r1
 8000e12:	d329      	bcc.n	8000e68 <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000e14:	6821      	ldr	r1, [r4, #0]
 8000e16:	078e      	lsls	r6, r1, #30
 8000e18:	d431      	bmi.n	8000e7e <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e1a:	07ca      	lsls	r2, r1, #31
 8000e1c:	d444      	bmi.n	8000ea8 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000e1e:	4a40      	ldr	r2, [pc, #256]	; (8000f20 <HAL_RCC_ClockConfig+0x128>)
 8000e20:	6813      	ldr	r3, [r2, #0]
 8000e22:	f003 0307 	and.w	r3, r3, #7
 8000e26:	429d      	cmp	r5, r3
 8000e28:	d367      	bcc.n	8000efa <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e2a:	6822      	ldr	r2, [r4, #0]
 8000e2c:	4d3d      	ldr	r5, [pc, #244]	; (8000f24 <HAL_RCC_ClockConfig+0x12c>)
 8000e2e:	f012 0f04 	tst.w	r2, #4
 8000e32:	d16e      	bne.n	8000f12 <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e34:	0713      	lsls	r3, r2, #28
 8000e36:	d506      	bpl.n	8000e46 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000e38:	686b      	ldr	r3, [r5, #4]
 8000e3a:	6922      	ldr	r2, [r4, #16]
 8000e3c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000e40:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000e44:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000e46:	f7ff ff9b 	bl	8000d80 <HAL_RCC_GetSysClockFreq>
 8000e4a:	686b      	ldr	r3, [r5, #4]
 8000e4c:	4a36      	ldr	r2, [pc, #216]	; (8000f28 <HAL_RCC_ClockConfig+0x130>)
 8000e4e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000e52:	5cd3      	ldrb	r3, [r2, r3]
 8000e54:	40d8      	lsrs	r0, r3
 8000e56:	4b35      	ldr	r3, [pc, #212]	; (8000f2c <HAL_RCC_ClockConfig+0x134>)
 8000e58:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8000e5a:	4b35      	ldr	r3, [pc, #212]	; (8000f30 <HAL_RCC_ClockConfig+0x138>)
 8000e5c:	6818      	ldr	r0, [r3, #0]
 8000e5e:	f7ff f975 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8000e62:	2000      	movs	r0, #0
 8000e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e68:	6813      	ldr	r3, [r2, #0]
 8000e6a:	f023 0307 	bic.w	r3, r3, #7
 8000e6e:	430b      	orrs	r3, r1
 8000e70:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e72:	6813      	ldr	r3, [r2, #0]
 8000e74:	f003 0307 	and.w	r3, r3, #7
 8000e78:	4299      	cmp	r1, r3
 8000e7a:	d1c2      	bne.n	8000e02 <HAL_RCC_ClockConfig+0xa>
 8000e7c:	e7ca      	b.n	8000e14 <HAL_RCC_ClockConfig+0x1c>
 8000e7e:	4b29      	ldr	r3, [pc, #164]	; (8000f24 <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e80:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000e84:	bf1e      	ittt	ne
 8000e86:	685a      	ldrne	r2, [r3, #4]
 8000e88:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8000e8c:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e8e:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000e90:	bf42      	ittt	mi
 8000e92:	685a      	ldrmi	r2, [r3, #4]
 8000e94:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8000e98:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e9a:	685a      	ldr	r2, [r3, #4]
 8000e9c:	68a0      	ldr	r0, [r4, #8]
 8000e9e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000ea2:	4302      	orrs	r2, r0
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	e7b8      	b.n	8000e1a <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ea8:	6862      	ldr	r2, [r4, #4]
 8000eaa:	4e1e      	ldr	r6, [pc, #120]	; (8000f24 <HAL_RCC_ClockConfig+0x12c>)
 8000eac:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eae:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000eb0:	d11b      	bne.n	8000eea <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eb2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000eb6:	d0a4      	beq.n	8000e02 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000eb8:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000eba:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000ebe:	f023 0303 	bic.w	r3, r3, #3
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000ec6:	f7ff f983 	bl	80001d0 <HAL_GetTick>
 8000eca:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000ecc:	6873      	ldr	r3, [r6, #4]
 8000ece:	6862      	ldr	r2, [r4, #4]
 8000ed0:	f003 030c 	and.w	r3, r3, #12
 8000ed4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000ed8:	d0a1      	beq.n	8000e1e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000eda:	f7ff f979 	bl	80001d0 <HAL_GetTick>
 8000ede:	1bc0      	subs	r0, r0, r7
 8000ee0:	4540      	cmp	r0, r8
 8000ee2:	d9f3      	bls.n	8000ecc <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8000ee4:	2003      	movs	r0, #3
}
 8000ee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000eea:	2a02      	cmp	r2, #2
 8000eec:	d102      	bne.n	8000ef4 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000eee:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000ef2:	e7e0      	b.n	8000eb6 <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ef4:	f013 0f02 	tst.w	r3, #2
 8000ef8:	e7dd      	b.n	8000eb6 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000efa:	6813      	ldr	r3, [r2, #0]
 8000efc:	f023 0307 	bic.w	r3, r3, #7
 8000f00:	432b      	orrs	r3, r5
 8000f02:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f04:	6813      	ldr	r3, [r2, #0]
 8000f06:	f003 0307 	and.w	r3, r3, #7
 8000f0a:	429d      	cmp	r5, r3
 8000f0c:	f47f af79 	bne.w	8000e02 <HAL_RCC_ClockConfig+0xa>
 8000f10:	e78b      	b.n	8000e2a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000f12:	686b      	ldr	r3, [r5, #4]
 8000f14:	68e1      	ldr	r1, [r4, #12]
 8000f16:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f1a:	430b      	orrs	r3, r1
 8000f1c:	606b      	str	r3, [r5, #4]
 8000f1e:	e789      	b.n	8000e34 <HAL_RCC_ClockConfig+0x3c>
 8000f20:	40022000 	.word	0x40022000
 8000f24:	40021000 	.word	0x40021000
 8000f28:	08001a3c 	.word	0x08001a3c
 8000f2c:	20000008 	.word	0x20000008
 8000f30:	20000004 	.word	0x20000004

08000f34 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000f34:	4b04      	ldr	r3, [pc, #16]	; (8000f48 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000f36:	4a05      	ldr	r2, [pc, #20]	; (8000f4c <HAL_RCC_GetPCLK1Freq+0x18>)
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000f3e:	5cd3      	ldrb	r3, [r2, r3]
 8000f40:	4a03      	ldr	r2, [pc, #12]	; (8000f50 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000f42:	6810      	ldr	r0, [r2, #0]
}
 8000f44:	40d8      	lsrs	r0, r3
 8000f46:	4770      	bx	lr
 8000f48:	40021000 	.word	0x40021000
 8000f4c:	08001a4c 	.word	0x08001a4c
 8000f50:	20000008 	.word	0x20000008

08000f54 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000f54:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000f56:	4a05      	ldr	r2, [pc, #20]	; (8000f6c <HAL_RCC_GetPCLK2Freq+0x18>)
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000f5e:	5cd3      	ldrb	r3, [r2, r3]
 8000f60:	4a03      	ldr	r2, [pc, #12]	; (8000f70 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000f62:	6810      	ldr	r0, [r2, #0]
}
 8000f64:	40d8      	lsrs	r0, r3
 8000f66:	4770      	bx	lr
 8000f68:	40021000 	.word	0x40021000
 8000f6c:	08001a4c 	.word	0x08001a4c
 8000f70:	20000008 	.word	0x20000008

08000f74 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000f74:	6803      	ldr	r3, [r0, #0]
{
 8000f76:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000f7a:	07d9      	lsls	r1, r3, #31
{
 8000f7c:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000f7e:	d520      	bpl.n	8000fc2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f80:	4c35      	ldr	r4, [pc, #212]	; (8001058 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8000f82:	69e3      	ldr	r3, [r4, #28]
 8000f84:	00da      	lsls	r2, r3, #3
 8000f86:	d432      	bmi.n	8000fee <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8000f88:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f8a:	69e3      	ldr	r3, [r4, #28]
 8000f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f90:	61e3      	str	r3, [r4, #28]
 8000f92:	69e3      	ldr	r3, [r4, #28]
 8000f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f98:	9301      	str	r3, [sp, #4]
 8000f9a:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f9c:	4e2f      	ldr	r6, [pc, #188]	; (800105c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8000f9e:	6833      	ldr	r3, [r6, #0]
 8000fa0:	05db      	lsls	r3, r3, #23
 8000fa2:	d526      	bpl.n	8000ff2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000fa4:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000fa6:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8000faa:	d136      	bne.n	800101a <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000fac:	6a23      	ldr	r3, [r4, #32]
 8000fae:	686a      	ldr	r2, [r5, #4]
 8000fb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000fb8:	b11f      	cbz	r7, 8000fc2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fba:	69e3      	ldr	r3, [r4, #28]
 8000fbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fc0:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8000fc2:	6828      	ldr	r0, [r5, #0]
 8000fc4:	0783      	lsls	r3, r0, #30
 8000fc6:	d506      	bpl.n	8000fd6 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8000fc8:	4a23      	ldr	r2, [pc, #140]	; (8001058 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8000fca:	68a9      	ldr	r1, [r5, #8]
 8000fcc:	6853      	ldr	r3, [r2, #4]
 8000fce:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000fd2:	430b      	orrs	r3, r1
 8000fd4:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8000fd6:	f010 0010 	ands.w	r0, r0, #16
 8000fda:	d01b      	beq.n	8001014 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8000fdc:	4a1e      	ldr	r2, [pc, #120]	; (8001058 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8000fde:	68e9      	ldr	r1, [r5, #12]
 8000fe0:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8000fe2:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8000fe4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000fe8:	430b      	orrs	r3, r1
 8000fea:	6053      	str	r3, [r2, #4]
 8000fec:	e012      	b.n	8001014 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus pwrclkchanged = RESET;
 8000fee:	2700      	movs	r7, #0
 8000ff0:	e7d4      	b.n	8000f9c <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ff2:	6833      	ldr	r3, [r6, #0]
 8000ff4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ff8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000ffa:	f7ff f8e9 	bl	80001d0 <HAL_GetTick>
 8000ffe:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001000:	6833      	ldr	r3, [r6, #0]
 8001002:	05d8      	lsls	r0, r3, #23
 8001004:	d4ce      	bmi.n	8000fa4 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001006:	f7ff f8e3 	bl	80001d0 <HAL_GetTick>
 800100a:	eba0 0008 	sub.w	r0, r0, r8
 800100e:	2864      	cmp	r0, #100	; 0x64
 8001010:	d9f6      	bls.n	8001000 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8001012:	2003      	movs	r0, #3
}
 8001014:	b002      	add	sp, #8
 8001016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800101a:	686a      	ldr	r2, [r5, #4]
 800101c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001020:	4293      	cmp	r3, r2
 8001022:	d0c3      	beq.n	8000fac <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001024:	2001      	movs	r0, #1
 8001026:	4a0e      	ldr	r2, [pc, #56]	; (8001060 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001028:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 800102a:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800102c:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800102e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001032:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8001034:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001036:	07d9      	lsls	r1, r3, #31
 8001038:	d5b8      	bpl.n	8000fac <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 800103a:	f7ff f8c9 	bl	80001d0 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800103e:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001042:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001044:	6a23      	ldr	r3, [r4, #32]
 8001046:	079a      	lsls	r2, r3, #30
 8001048:	d4b0      	bmi.n	8000fac <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800104a:	f7ff f8c1 	bl	80001d0 <HAL_GetTick>
 800104e:	1b80      	subs	r0, r0, r6
 8001050:	4540      	cmp	r0, r8
 8001052:	d9f7      	bls.n	8001044 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8001054:	e7dd      	b.n	8001012 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8001056:	bf00      	nop
 8001058:	40021000 	.word	0x40021000
 800105c:	40007000 	.word	0x40007000
 8001060:	42420440 	.word	0x42420440

08001064 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001064:	6a03      	ldr	r3, [r0, #32]
{
 8001066:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001068:	f023 0301 	bic.w	r3, r3, #1
 800106c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800106e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001070:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001072:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001074:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001076:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800107a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800107c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800107e:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001082:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001084:	4d0a      	ldr	r5, [pc, #40]	; (80010b0 <TIM_OC1_SetConfig+0x4c>)
 8001086:	42a8      	cmp	r0, r5
 8001088:	d10b      	bne.n	80010a2 <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800108a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800108c:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001090:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001092:	698e      	ldr	r6, [r1, #24]
 8001094:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001096:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 800109a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 800109c:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80010a0:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80010a2:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80010a4:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80010a6:	684a      	ldr	r2, [r1, #4]
 80010a8:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80010aa:	6203      	str	r3, [r0, #32]
 80010ac:	bd70      	pop	{r4, r5, r6, pc}
 80010ae:	bf00      	nop
 80010b0:	40012c00 	.word	0x40012c00

080010b4 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80010b4:	6a03      	ldr	r3, [r0, #32]
{
 80010b6:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80010b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010bc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80010be:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80010c0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80010c2:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80010c4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80010c6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80010ca:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80010cc:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80010ce:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80010d2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80010d6:	4d0b      	ldr	r5, [pc, #44]	; (8001104 <TIM_OC3_SetConfig+0x50>)
 80010d8:	42a8      	cmp	r0, r5
 80010da:	d10d      	bne.n	80010f8 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80010dc:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80010de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80010e2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80010e6:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80010e8:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80010ea:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80010ee:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 80010f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80010f4:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80010f8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80010fa:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80010fc:	684a      	ldr	r2, [r1, #4]
 80010fe:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001100:	6203      	str	r3, [r0, #32]
 8001102:	bd70      	pop	{r4, r5, r6, pc}
 8001104:	40012c00 	.word	0x40012c00

08001108 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001108:	6a03      	ldr	r3, [r0, #32]
{
 800110a:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800110c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001110:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001112:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001114:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001116:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001118:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800111a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800111e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001122:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001124:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001128:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800112c:	4d06      	ldr	r5, [pc, #24]	; (8001148 <TIM_OC4_SetConfig+0x40>)
 800112e:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001130:	bf02      	ittt	eq
 8001132:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001134:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001138:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800113c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800113e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001140:	684a      	ldr	r2, [r1, #4]
 8001142:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001144:	6203      	str	r3, [r0, #32]
 8001146:	bd30      	pop	{r4, r5, pc}
 8001148:	40012c00 	.word	0x40012c00

0800114c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800114c:	4a1a      	ldr	r2, [pc, #104]	; (80011b8 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 800114e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001150:	4290      	cmp	r0, r2
 8001152:	d00a      	beq.n	800116a <TIM_Base_SetConfig+0x1e>
 8001154:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001158:	d007      	beq.n	800116a <TIM_Base_SetConfig+0x1e>
 800115a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800115e:	4290      	cmp	r0, r2
 8001160:	d003      	beq.n	800116a <TIM_Base_SetConfig+0x1e>
 8001162:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001166:	4290      	cmp	r0, r2
 8001168:	d115      	bne.n	8001196 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 800116a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800116c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001170:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001172:	4a11      	ldr	r2, [pc, #68]	; (80011b8 <TIM_Base_SetConfig+0x6c>)
 8001174:	4290      	cmp	r0, r2
 8001176:	d00a      	beq.n	800118e <TIM_Base_SetConfig+0x42>
 8001178:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800117c:	d007      	beq.n	800118e <TIM_Base_SetConfig+0x42>
 800117e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001182:	4290      	cmp	r0, r2
 8001184:	d003      	beq.n	800118e <TIM_Base_SetConfig+0x42>
 8001186:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800118a:	4290      	cmp	r0, r2
 800118c:	d103      	bne.n	8001196 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800118e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001190:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001194:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001196:	694a      	ldr	r2, [r1, #20]
 8001198:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800119c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800119e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80011a0:	688b      	ldr	r3, [r1, #8]
 80011a2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80011a4:	680b      	ldr	r3, [r1, #0]
 80011a6:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80011a8:	4b03      	ldr	r3, [pc, #12]	; (80011b8 <TIM_Base_SetConfig+0x6c>)
 80011aa:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 80011ac:	bf04      	itt	eq
 80011ae:	690b      	ldreq	r3, [r1, #16]
 80011b0:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80011b2:	2301      	movs	r3, #1
 80011b4:	6143      	str	r3, [r0, #20]
 80011b6:	4770      	bx	lr
 80011b8:	40012c00 	.word	0x40012c00

080011bc <HAL_TIM_PWM_Init>:
{
 80011bc:	b510      	push	{r4, lr}
  if (htim == NULL)
 80011be:	4604      	mov	r4, r0
 80011c0:	b330      	cbz	r0, 8001210 <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 80011c2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80011c6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80011ca:	b91b      	cbnz	r3, 80011d4 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80011cc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80011d0:	f000 fb46 	bl	8001860 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80011d4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80011d6:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80011d8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80011dc:	1d21      	adds	r1, r4, #4
 80011de:	f7ff ffb5 	bl	800114c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80011e2:	2301      	movs	r3, #1
  return HAL_OK;
 80011e4:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80011e6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80011ea:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80011ee:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80011f2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80011f6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80011fa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80011fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001202:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8001206:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800120a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800120e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001210:	2001      	movs	r0, #1
}
 8001212:	bd10      	pop	{r4, pc}

08001214 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001214:	6a03      	ldr	r3, [r0, #32]
{
 8001216:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001218:	f023 0310 	bic.w	r3, r3, #16
 800121c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800121e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8001220:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001222:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001224:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001226:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800122a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800122e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001230:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001234:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001238:	4d0b      	ldr	r5, [pc, #44]	; (8001268 <TIM_OC2_SetConfig+0x54>)
 800123a:	42a8      	cmp	r0, r5
 800123c:	d10d      	bne.n	800125a <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800123e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001240:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001244:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001248:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800124a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800124c:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001250:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8001252:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001256:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 800125a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800125c:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800125e:	684a      	ldr	r2, [r1, #4]
 8001260:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001262:	6203      	str	r3, [r0, #32]
 8001264:	bd70      	pop	{r4, r5, r6, pc}
 8001266:	bf00      	nop
 8001268:	40012c00 	.word	0x40012c00

0800126c <HAL_TIM_PWM_ConfigChannel>:
{
 800126c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800126e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001272:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8001274:	2b01      	cmp	r3, #1
 8001276:	d054      	beq.n	8001322 <HAL_TIM_PWM_ConfigChannel+0xb6>
 8001278:	2301      	movs	r3, #1
 800127a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 800127e:	2a0c      	cmp	r2, #12
 8001280:	d818      	bhi.n	80012b4 <HAL_TIM_PWM_ConfigChannel+0x48>
 8001282:	e8df f002 	tbb	[pc, r2]
 8001286:	1707      	.short	0x1707
 8001288:	171b1717 	.word	0x171b1717
 800128c:	172c1717 	.word	0x172c1717
 8001290:	1717      	.short	0x1717
 8001292:	3d          	.byte	0x3d
 8001293:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001294:	6800      	ldr	r0, [r0, #0]
 8001296:	f7ff fee5 	bl	8001064 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800129a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800129c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800129e:	699a      	ldr	r2, [r3, #24]
 80012a0:	f042 0208 	orr.w	r2, r2, #8
 80012a4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80012a6:	699a      	ldr	r2, [r3, #24]
 80012a8:	f022 0204 	bic.w	r2, r2, #4
 80012ac:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80012ae:	699a      	ldr	r2, [r3, #24]
 80012b0:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80012b2:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 80012b4:	2000      	movs	r0, #0
 80012b6:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 80012ba:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80012bc:	6800      	ldr	r0, [r0, #0]
 80012be:	f7ff ffa9 	bl	8001214 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80012c2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80012c4:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80012c6:	699a      	ldr	r2, [r3, #24]
 80012c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80012cc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80012ce:	699a      	ldr	r2, [r3, #24]
 80012d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80012d4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80012d6:	699a      	ldr	r2, [r3, #24]
 80012d8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80012dc:	e7e9      	b.n	80012b2 <HAL_TIM_PWM_ConfigChannel+0x46>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80012de:	6800      	ldr	r0, [r0, #0]
 80012e0:	f7ff fee8 	bl	80010b4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80012e4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80012e6:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80012e8:	69da      	ldr	r2, [r3, #28]
 80012ea:	f042 0208 	orr.w	r2, r2, #8
 80012ee:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80012f0:	69da      	ldr	r2, [r3, #28]
 80012f2:	f022 0204 	bic.w	r2, r2, #4
 80012f6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80012f8:	69da      	ldr	r2, [r3, #28]
 80012fa:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80012fc:	61da      	str	r2, [r3, #28]
      break;
 80012fe:	e7d9      	b.n	80012b4 <HAL_TIM_PWM_ConfigChannel+0x48>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001300:	6800      	ldr	r0, [r0, #0]
 8001302:	f7ff ff01 	bl	8001108 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001306:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001308:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800130a:	69da      	ldr	r2, [r3, #28]
 800130c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001310:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001312:	69da      	ldr	r2, [r3, #28]
 8001314:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001318:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800131a:	69da      	ldr	r2, [r3, #28]
 800131c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001320:	e7ec      	b.n	80012fc <HAL_TIM_PWM_ConfigChannel+0x90>
  __HAL_LOCK(htim);
 8001322:	2002      	movs	r0, #2
}
 8001324:	bd38      	pop	{r3, r4, r5, pc}
	...

08001328 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001328:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800132c:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 800132e:	2b01      	cmp	r3, #1
 8001330:	f04f 0302 	mov.w	r3, #2
 8001334:	d025      	beq.n	8001382 <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 8001336:	2201      	movs	r2, #1

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001338:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800133c:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800133e:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 8001340:	685c      	ldr	r4, [r3, #4]
  __HAL_LOCK(htim);
 8001342:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpcr2 &= ~TIM_CR2_MMS;
 8001346:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800134a:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 800134c:	689a      	ldr	r2, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800134e:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001350:	4c0d      	ldr	r4, [pc, #52]	; (8001388 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8001352:	42a3      	cmp	r3, r4
 8001354:	d00a      	beq.n	800136c <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8001356:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800135a:	d007      	beq.n	800136c <HAL_TIMEx_MasterConfigSynchronization+0x44>
 800135c:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8001360:	42a3      	cmp	r3, r4
 8001362:	d003      	beq.n	800136c <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8001364:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001368:	42a3      	cmp	r3, r4
 800136a:	d104      	bne.n	8001376 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800136c:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800136e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001372:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001374:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001376:	2301      	movs	r3, #1
 8001378:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800137c:	2300      	movs	r3, #0
 800137e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001382:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001384:	bd30      	pop	{r4, r5, pc}
 8001386:	bf00      	nop
 8001388:	40012c00 	.word	0x40012c00

0800138c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800138c:	b538      	push	{r3, r4, r5, lr}
 800138e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001390:	6803      	ldr	r3, [r0, #0]
 8001392:	68c1      	ldr	r1, [r0, #12]
 8001394:	691a      	ldr	r2, [r3, #16]
 8001396:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800139a:	430a      	orrs	r2, r1
 800139c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800139e:	6882      	ldr	r2, [r0, #8]
 80013a0:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80013a2:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80013a4:	4302      	orrs	r2, r0
 80013a6:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80013a8:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 80013ac:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80013b0:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80013b2:	430a      	orrs	r2, r1
 80013b4:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80013b6:	695a      	ldr	r2, [r3, #20]
 80013b8:	69a1      	ldr	r1, [r4, #24]
 80013ba:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80013be:	430a      	orrs	r2, r1
 80013c0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80013c2:	4a0e      	ldr	r2, [pc, #56]	; (80013fc <UART_SetConfig+0x70>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d115      	bne.n	80013f4 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80013c8:	f7ff fdc4 	bl	8000f54 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80013cc:	2319      	movs	r3, #25
 80013ce:	4358      	muls	r0, r3
 80013d0:	6863      	ldr	r3, [r4, #4]
 80013d2:	2264      	movs	r2, #100	; 0x64
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	fbb0 f0f3 	udiv	r0, r0, r3
 80013da:	fbb0 f1f2 	udiv	r1, r0, r2
 80013de:	fb02 0311 	mls	r3, r2, r1, r0
 80013e2:	011b      	lsls	r3, r3, #4
 80013e4:	3332      	adds	r3, #50	; 0x32
 80013e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80013ea:	6825      	ldr	r5, [r4, #0]
 80013ec:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80013f0:	60ab      	str	r3, [r5, #8]
 80013f2:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 80013f4:	f7ff fd9e 	bl	8000f34 <HAL_RCC_GetPCLK1Freq>
 80013f8:	e7e8      	b.n	80013cc <UART_SetConfig+0x40>
 80013fa:	bf00      	nop
 80013fc:	40013800 	.word	0x40013800

08001400 <HAL_UART_Init>:
{
 8001400:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001402:	4604      	mov	r4, r0
 8001404:	b340      	cbz	r0, 8001458 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001406:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800140a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800140e:	b91b      	cbnz	r3, 8001418 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001410:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8001414:	f000 fa5e 	bl	80018d4 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001418:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800141a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800141c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8001420:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8001422:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8001424:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001428:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800142a:	f7ff ffaf 	bl	800138c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800142e:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001430:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001432:	691a      	ldr	r2, [r3, #16]
 8001434:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001438:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800143a:	695a      	ldr	r2, [r3, #20]
 800143c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001440:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001442:	68da      	ldr	r2, [r3, #12]
 8001444:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001448:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800144a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800144c:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800144e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001452:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  return HAL_OK;
 8001456:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001458:	2001      	movs	r0, #1
}
 800145a:	bd10      	pop	{r4, pc}

0800145c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800145c:	2228      	movs	r2, #40	; 0x28
void SystemClock_Config(void) {
 800145e:	b510      	push	{r4, lr}
 8001460:	b094      	sub	sp, #80	; 0x50
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001462:	eb0d 0002 	add.w	r0, sp, r2
 8001466:	2100      	movs	r1, #0
 8001468:	f000 facc 	bl	8001a04 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800146c:	2214      	movs	r2, #20
 800146e:	2100      	movs	r1, #0
 8001470:	eb0d 0002 	add.w	r0, sp, r2
 8001474:	f000 fac6 	bl	8001a04 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001478:	2100      	movs	r1, #0
 800147a:	2210      	movs	r2, #16
 800147c:	a801      	add	r0, sp, #4
 800147e:	f000 fac1 	bl	8001a04 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001482:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001486:	2201      	movs	r2, #1
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001488:	2402      	movs	r4, #2
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800148a:	930b      	str	r3, [sp, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800148c:	9312      	str	r3, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800148e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001492:	a80a      	add	r0, sp, #40	; 0x28
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001494:	920a      	str	r2, [sp, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001496:	920e      	str	r2, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001498:	9313      	str	r3, [sp, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800149a:	9411      	str	r4, [sp, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800149c:	f7ff fad2 	bl	8000a44 <HAL_RCC_OscConfig>
		Error_Handler();
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80014a0:	230f      	movs	r3, #15
 80014a2:	9305      	str	r3, [sp, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014a4:	2300      	movs	r3, #0
 80014a6:	9307      	str	r3, [sp, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014ac:	9308      	str	r3, [sp, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 80014ae:	f44f 63c0 	mov.w	r3, #1536	; 0x600

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80014b2:	4621      	mov	r1, r4
 80014b4:	a805      	add	r0, sp, #20
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 80014b6:	9309      	str	r3, [sp, #36]	; 0x24
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014b8:	9406      	str	r4, [sp, #24]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80014ba:	f7ff fc9d 	bl	8000df8 <HAL_RCC_ClockConfig>
		Error_Handler();
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 80014be:	f44f 4340 	mov.w	r3, #49152	; 0xc000
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80014c2:	a801      	add	r0, sp, #4
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80014c4:	9401      	str	r4, [sp, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 80014c6:	9303      	str	r3, [sp, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80014c8:	f7ff fd54 	bl	8000f74 <HAL_RCCEx_PeriphCLKConfig>
		Error_Handler();
	}
}
 80014cc:	b014      	add	sp, #80	; 0x50
 80014ce:	bd10      	pop	{r4, pc}

080014d0 <main>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80014d0:	f04f 0810 	mov.w	r8, #16
int main(void) {
 80014d4:	b580      	push	{r7, lr}

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE()
 80014d6:	4d83      	ldr	r5, [pc, #524]	; (80016e4 <main+0x214>)
int main(void) {
 80014d8:	b090      	sub	sp, #64	; 0x40
	HAL_Init();
 80014da:	f7fe fe5b 	bl	8000194 <HAL_Init>
	SystemClock_Config();
 80014de:	f7ff ffbd 	bl	800145c <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80014e2:	4642      	mov	r2, r8
 80014e4:	2100      	movs	r1, #0
 80014e6:	a809      	add	r0, sp, #36	; 0x24
 80014e8:	f000 fa8c 	bl	8001a04 <memset>
	__HAL_RCC_GPIOC_CLK_ENABLE()
 80014ec:	69ab      	ldr	r3, [r5, #24]
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
	;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 80014ee:	2200      	movs	r2, #0
	__HAL_RCC_GPIOC_CLK_ENABLE()
 80014f0:	ea43 0308 	orr.w	r3, r3, r8
 80014f4:	61ab      	str	r3, [r5, #24]
 80014f6:	69ab      	ldr	r3, [r5, #24]
	HAL_GPIO_WritePin(GPIOA,
 80014f8:	21dc      	movs	r1, #220	; 0xdc
	__HAL_RCC_GPIOC_CLK_ENABLE()
 80014fa:	ea03 0308 	and.w	r3, r3, r8
 80014fe:	9303      	str	r3, [sp, #12]
 8001500:	9b03      	ldr	r3, [sp, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE()
 8001502:	69ab      	ldr	r3, [r5, #24]
	HAL_GPIO_WritePin(GPIOA,
 8001504:	4878      	ldr	r0, [pc, #480]	; (80016e8 <main+0x218>)
	__HAL_RCC_GPIOD_CLK_ENABLE()
 8001506:	f043 0320 	orr.w	r3, r3, #32
 800150a:	61ab      	str	r3, [r5, #24]
 800150c:	69ab      	ldr	r3, [r5, #24]
	/*Configure GPIO pins : RTDS_Pin EVMS_RELAY_Pin PUMP_Pin RFE_ENABLE_Pin
	 DRIVE_ENABLE_Pin */
	GPIO_InitStruct.Pin = RTDS_Pin | EVMS_RELAY_Pin | PUMP_Pin | RFE_ENABLE_Pin
			| DRIVE_ENABLE_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2400      	movs	r4, #0
	__HAL_RCC_GPIOD_CLK_ENABLE()
 8001510:	f003 0320 	and.w	r3, r3, #32
 8001514:	9304      	str	r3, [sp, #16]
 8001516:	9b04      	ldr	r3, [sp, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8001518:	69ab      	ldr	r3, [r5, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151a:	2601      	movs	r6, #1
	__HAL_RCC_GPIOA_CLK_ENABLE()
 800151c:	f043 0304 	orr.w	r3, r3, #4
 8001520:	61ab      	str	r3, [r5, #24]
 8001522:	69ab      	ldr	r3, [r5, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001524:	f04f 0902 	mov.w	r9, #2
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8001528:	f003 0304 	and.w	r3, r3, #4
 800152c:	9305      	str	r3, [sp, #20]
 800152e:	9b05      	ldr	r3, [sp, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8001530:	69ab      	ldr	r3, [r5, #24]
	hadc1.Init.NbrOfConversion = 3;
 8001532:	2703      	movs	r7, #3
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8001534:	f043 0308 	orr.w	r3, r3, #8
 8001538:	61ab      	str	r3, [r5, #24]
 800153a:	69ab      	ldr	r3, [r5, #24]
 800153c:	f003 0308 	and.w	r3, r3, #8
 8001540:	9306      	str	r3, [sp, #24]
 8001542:	9b06      	ldr	r3, [sp, #24]
	HAL_GPIO_WritePin(GPIOA,
 8001544:	f7ff fa78 	bl	8000a38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, PRECHARGE_RELAY_Pin | AIR_POSITIVE_Pin,
 8001548:	2200      	movs	r2, #0
 800154a:	21c0      	movs	r1, #192	; 0xc0
 800154c:	4867      	ldr	r0, [pc, #412]	; (80016ec <main+0x21c>)
 800154e:	f7ff fa73 	bl	8000a38 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = RTDS_Pin | EVMS_RELAY_Pin | PUMP_Pin | RFE_ENABLE_Pin
 8001552:	23dc      	movs	r3, #220	; 0xdc
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001554:	a909      	add	r1, sp, #36	; 0x24
 8001556:	4864      	ldr	r0, [pc, #400]	; (80016e8 <main+0x218>)
	GPIO_InitStruct.Pin = RTDS_Pin | EVMS_RELAY_Pin | PUMP_Pin | RFE_ENABLE_Pin
 8001558:	9309      	str	r3, [sp, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155a:	960a      	str	r6, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	940b      	str	r4, [sp, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155e:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001562:	f7ff f987 	bl	8000874 <HAL_GPIO_Init>

	/*Configure GPIO pins : START_BTN_Pin RTD_BTN_Pin ENDURANCE_BTN_Pin ACCELERATION_BTN_Pin
	 DC60_INPUT_Pin DC90_INPUT_Pin BAMOCAR_ERR_Pin */
	GPIO_InitStruct.Pin = START_BTN_Pin | RTD_BTN_Pin | ENDURANCE_BTN_Pin
 8001566:	f24f 0338 	movw	r3, #61496	; 0xf038
			| ACCELERATION_BTN_Pin | DC60_INPUT_Pin | DC90_INPUT_Pin
			| BAMOCAR_ERR_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800156a:	a909      	add	r1, sp, #36	; 0x24
 800156c:	485f      	ldr	r0, [pc, #380]	; (80016ec <main+0x21c>)
	GPIO_InitStruct.Pin = START_BTN_Pin | RTD_BTN_Pin | ENDURANCE_BTN_Pin
 800156e:	9309      	str	r3, [sp, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001570:	940a      	str	r4, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001572:	940b      	str	r4, [sp, #44]	; 0x2c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001574:	f7ff f97e 	bl	8000874 <HAL_GPIO_Init>

	/*Configure GPIO pins : SKIDPAD_BTN_Pin PRE_CHARGE_FB_Pin AIR_POSITIVE_FB_Pin AIR_NEGATIVE_FB_Pin */
	GPIO_InitStruct.Pin = SKIDPAD_BTN_Pin | PRE_CHARGE_FB_Pin
 8001578:	f44f 4307 	mov.w	r3, #34560	; 0x8700
			| AIR_POSITIVE_FB_Pin | AIR_NEGATIVE_FB_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157c:	a909      	add	r1, sp, #36	; 0x24
 800157e:	485a      	ldr	r0, [pc, #360]	; (80016e8 <main+0x218>)
	GPIO_InitStruct.Pin = SKIDPAD_BTN_Pin | PRE_CHARGE_FB_Pin
 8001580:	9309      	str	r3, [sp, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001582:	940a      	str	r4, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	940b      	str	r4, [sp, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001586:	f7ff f975 	bl	8000874 <HAL_GPIO_Init>

	/*Configure GPIO pins : PRECHARGE_RELAY_Pin AIR_POSITIVE_Pin */
	GPIO_InitStruct.Pin = PRECHARGE_RELAY_Pin | AIR_POSITIVE_Pin;
 800158a:	23c0      	movs	r3, #192	; 0xc0
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800158c:	a909      	add	r1, sp, #36	; 0x24
 800158e:	4857      	ldr	r0, [pc, #348]	; (80016ec <main+0x21c>)
	GPIO_InitStruct.Pin = PRECHARGE_RELAY_Pin | AIR_POSITIVE_Pin;
 8001590:	9309      	str	r3, [sp, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001592:	960a      	str	r6, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	940b      	str	r4, [sp, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001596:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800159a:	f7ff f96b 	bl	8000874 <HAL_GPIO_Init>
	__HAL_RCC_DMA1_CLK_ENABLE()
 800159e:	696b      	ldr	r3, [r5, #20]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80015a0:	4622      	mov	r2, r4
	__HAL_RCC_DMA1_CLK_ENABLE()
 80015a2:	4333      	orrs	r3, r6
 80015a4:	616b      	str	r3, [r5, #20]
 80015a6:	696b      	ldr	r3, [r5, #20]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80015a8:	4621      	mov	r1, r4
	__HAL_RCC_DMA1_CLK_ENABLE()
 80015aa:	4033      	ands	r3, r6
 80015ac:	9302      	str	r3, [sp, #8]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80015ae:	200b      	movs	r0, #11
	__HAL_RCC_DMA1_CLK_ENABLE()
 80015b0:	9b02      	ldr	r3, [sp, #8]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80015b2:	f7ff f843 	bl	800063c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80015b6:	200b      	movs	r0, #11
 80015b8:	f7ff f874 	bl	80006a4 <HAL_NVIC_EnableIRQ>
	hadc1.Instance = ADC1;
 80015bc:	4d4c      	ldr	r5, [pc, #304]	; (80016f0 <main+0x220>)
 80015be:	4b4d      	ldr	r3, [pc, #308]	; (80016f4 <main+0x224>)
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80015c0:	4628      	mov	r0, r5
	hadc1.Instance = ADC1;
 80015c2:	602b      	str	r3, [r5, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80015c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015c8:	60ab      	str	r3, [r5, #8]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015ca:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
	hadc1.Init.ContinuousConvMode = ENABLE;
 80015ce:	732e      	strb	r6, [r5, #12]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015d0:	61eb      	str	r3, [r5, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015d2:	752c      	strb	r4, [r5, #20]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015d4:	606c      	str	r4, [r5, #4]
	hadc1.Init.NbrOfConversion = 3;
 80015d6:	612f      	str	r7, [r5, #16]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 80015d8:	9409      	str	r4, [sp, #36]	; 0x24
 80015da:	940a      	str	r4, [sp, #40]	; 0x28
 80015dc:	940b      	str	r4, [sp, #44]	; 0x2c
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80015de:	f7fe fea7 	bl	8000330 <HAL_ADC_Init>
	sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 80015e2:	2306      	movs	r3, #6
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80015e4:	a909      	add	r1, sp, #36	; 0x24
 80015e6:	4628      	mov	r0, r5
	sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 80015e8:	930b      	str	r3, [sp, #44]	; 0x2c
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80015ea:	960a      	str	r6, [sp, #40]	; 0x28
	sConfig.Channel = ADC_CHANNEL_0;
 80015ec:	9409      	str	r4, [sp, #36]	; 0x24
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80015ee:	f7fe fdf5 	bl	80001dc <HAL_ADC_ConfigChannel>
	sConfig.Channel = ADC_CHANNEL_1;
 80015f2:	9609      	str	r6, [sp, #36]	; 0x24
	sConfig.Channel = ADC_CHANNEL_5;
 80015f4:	2605      	movs	r6, #5
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80015f6:	a909      	add	r1, sp, #36	; 0x24
 80015f8:	4628      	mov	r0, r5
	sConfig.Rank = ADC_REGULAR_RANK_2;
 80015fa:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80015fe:	f7fe fded 	bl	80001dc <HAL_ADC_ConfigChannel>
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001602:	a909      	add	r1, sp, #36	; 0x24
 8001604:	4628      	mov	r0, r5
	sConfig.Channel = ADC_CHANNEL_5;
 8001606:	9609      	str	r6, [sp, #36]	; 0x24
	sConfig.Rank = ADC_REGULAR_RANK_3;
 8001608:	970a      	str	r7, [sp, #40]	; 0x28
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800160a:	f7fe fde7 	bl	80001dc <HAL_ADC_ConfigChannel>
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800160e:	221c      	movs	r2, #28
 8001610:	4621      	mov	r1, r4
 8001612:	a809      	add	r0, sp, #36	; 0x24
	htim3.Instance = TIM3;
 8001614:	4d38      	ldr	r5, [pc, #224]	; (80016f8 <main+0x228>)
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001616:	9407      	str	r4, [sp, #28]
 8001618:	9408      	str	r4, [sp, #32]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800161a:	f000 f9f3 	bl	8001a04 <memset>
	htim3.Instance = TIM3;
 800161e:	4b37      	ldr	r3, [pc, #220]	; (80016fc <main+0x22c>)
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8001620:	4628      	mov	r0, r5
	htim3.Init.Prescaler = 4 - 1;
 8001622:	e885 0088 	stmia.w	r5, {r3, r7}
	htim3.Init.Period = 200 - 1;
 8001626:	23c7      	movs	r3, #199	; 0xc7
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001628:	60ac      	str	r4, [r5, #8]
	htim3.Init.Period = 200 - 1;
 800162a:	60eb      	str	r3, [r5, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800162c:	612c      	str	r4, [r5, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800162e:	61ac      	str	r4, [r5, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8001630:	f7ff fdc4 	bl	80011bc <HAL_TIM_PWM_Init>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001634:	a907      	add	r1, sp, #28
 8001636:	4628      	mov	r0, r5
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001638:	9407      	str	r4, [sp, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800163a:	9408      	str	r4, [sp, #32]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 800163c:	f7ff fe74 	bl	8001328 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001640:	2360      	movs	r3, #96	; 0x60
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3)
 8001642:	a909      	add	r1, sp, #36	; 0x24
 8001644:	2208      	movs	r2, #8
 8001646:	4628      	mov	r0, r5
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001648:	9309      	str	r3, [sp, #36]	; 0x24
	sConfigOC.Pulse = 0;
 800164a:	940a      	str	r4, [sp, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800164c:	940b      	str	r4, [sp, #44]	; 0x2c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800164e:	940d      	str	r4, [sp, #52]	; 0x34
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3)
 8001650:	f7ff fe0c 	bl	800126c <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_MspPostInit(&htim3);
 8001654:	4628      	mov	r0, r5
 8001656:	f000 f917 	bl	8001888 <HAL_TIM_MspPostInit>
	huart3.Init.BaudRate = 9600;
 800165a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
	huart3.Instance = USART3;
 800165e:	4828      	ldr	r0, [pc, #160]	; (8001700 <main+0x230>)
	huart3.Init.BaudRate = 9600;
 8001660:	4a28      	ldr	r2, [pc, #160]	; (8001704 <main+0x234>)
	hcan.Instance = CAN1;
 8001662:	4d29      	ldr	r5, [pc, #164]	; (8001708 <main+0x238>)
	huart3.Init.BaudRate = 9600;
 8001664:	e880 000c 	stmia.w	r0, {r2, r3}
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001668:	230c      	movs	r3, #12
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800166a:	6084      	str	r4, [r0, #8]
	huart3.Init.Mode = UART_MODE_TX_RX;
 800166c:	6143      	str	r3, [r0, #20]
	huart3.Init.StopBits = UART_STOPBITS_1;
 800166e:	60c4      	str	r4, [r0, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001670:	6104      	str	r4, [r0, #16]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001672:	6184      	str	r4, [r0, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001674:	61c4      	str	r4, [r0, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8001676:	f7ff fec3 	bl	8001400 <HAL_UART_Init>
	hcan.Instance = CAN1;
 800167a:	4b24      	ldr	r3, [pc, #144]	; (800170c <main+0x23c>)
	if (HAL_CAN_Init(&hcan) != HAL_OK) {
 800167c:	4628      	mov	r0, r5
	hcan.Init.Prescaler = 16;
 800167e:	e885 0108 	stmia.w	r5, {r3, r8}
	hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 8001682:	f44f 2330 	mov.w	r3, #720896	; 0xb0000
 8001686:	612b      	str	r3, [r5, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_5TQ;
 8001688:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
	hcan.Init.Mode = CAN_MODE_NORMAL;
 800168c:	60ac      	str	r4, [r5, #8]
	hcan.Init.TimeSeg2 = CAN_BS2_5TQ;
 800168e:	616b      	str	r3, [r5, #20]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001690:	60ec      	str	r4, [r5, #12]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8001692:	762c      	strb	r4, [r5, #24]
	hcan.Init.AutoBusOff = DISABLE;
 8001694:	766c      	strb	r4, [r5, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 8001696:	76ac      	strb	r4, [r5, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 8001698:	76ec      	strb	r4, [r5, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 800169a:	772c      	strb	r4, [r5, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 800169c:	776c      	strb	r4, [r5, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK) {
 800169e:	f7fe fec7 	bl	8000430 <HAL_CAN_Init>
	HAL_CAN_Start(&hcan);
 80016a2:	4628      	mov	r0, r5
 80016a4:	f7fe ff3f 	bl	8000526 <HAL_CAN_Start>
	CAN_TxHeaderTypeDef tx_header = { .DLC = 5, .StdId = 0x7FA, .IDE = 0, .RTR =
 80016a8:	2218      	movs	r2, #24
 80016aa:	4621      	mov	r1, r4
 80016ac:	a809      	add	r0, sp, #36	; 0x24
 80016ae:	f000 f9a9 	bl	8001a04 <memset>
 80016b2:	f240 73fa 	movw	r3, #2042	; 0x7fa
 80016b6:	9309      	str	r3, [sp, #36]	; 0x24
	unsigned char data[8] = { 'C', 'U', 'R', 'T', 0, 0, 0 };
 80016b8:	2343      	movs	r3, #67	; 0x43
 80016ba:	f88d 301c 	strb.w	r3, [sp, #28]
 80016be:	2355      	movs	r3, #85	; 0x55
 80016c0:	f88d 301d 	strb.w	r3, [sp, #29]
 80016c4:	2352      	movs	r3, #82	; 0x52
 80016c6:	f88d 301e 	strb.w	r3, [sp, #30]
 80016ca:	2354      	movs	r3, #84	; 0x54
	CAN_TxHeaderTypeDef tx_header = { .DLC = 5, .StdId = 0x7FA, .IDE = 0, .RTR =
 80016cc:	960d      	str	r6, [sp, #52]	; 0x34
	unsigned char data[8] = { 'C', 'U', 'R', 'T', 0, 0, 0 };
 80016ce:	9408      	str	r4, [sp, #32]
 80016d0:	f88d 301f 	strb.w	r3, [sp, #31]
		HAL_CAN_AddTxMessage(&hcan, &tx_header, data, &dummy);
 80016d4:	ab01      	add	r3, sp, #4
 80016d6:	aa07      	add	r2, sp, #28
 80016d8:	a909      	add	r1, sp, #36	; 0x24
 80016da:	4628      	mov	r0, r5
 80016dc:	f7fe ff4e 	bl	800057c <HAL_CAN_AddTxMessage>
 80016e0:	e7f8      	b.n	80016d4 <main+0x204>
 80016e2:	bf00      	nop
 80016e4:	40021000 	.word	0x40021000
 80016e8:	40010800 	.word	0x40010800
 80016ec:	40010c00 	.word	0x40010c00
 80016f0:	200000b8 	.word	0x200000b8
 80016f4:	40012400 	.word	0x40012400
 80016f8:	20000070 	.word	0x20000070
 80016fc:	40000400 	.word	0x40000400
 8001700:	2000002c 	.word	0x2000002c
 8001704:	40004800 	.word	0x40004800
 8001708:	20000168 	.word	0x20000168
 800170c:	40006400 	.word	0x40006400

08001710 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001710:	4770      	bx	lr
	...

08001714 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001714:	4b0e      	ldr	r3, [pc, #56]	; (8001750 <HAL_MspInit+0x3c>)
{
 8001716:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001718:	699a      	ldr	r2, [r3, #24]
 800171a:	f042 0201 	orr.w	r2, r2, #1
 800171e:	619a      	str	r2, [r3, #24]
 8001720:	699a      	ldr	r2, [r3, #24]
 8001722:	f002 0201 	and.w	r2, r2, #1
 8001726:	9200      	str	r2, [sp, #0]
 8001728:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800172a:	69da      	ldr	r2, [r3, #28]
 800172c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001730:	61da      	str	r2, [r3, #28]
 8001732:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001734:	4a07      	ldr	r2, [pc, #28]	; (8001754 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800173a:	9301      	str	r3, [sp, #4]
 800173c:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800173e:	6853      	ldr	r3, [r2, #4]
 8001740:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001744:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001748:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800174a:	b002      	add	sp, #8
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	40021000 	.word	0x40021000
 8001754:	40010000 	.word	0x40010000

08001758 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001758:	b530      	push	{r4, r5, lr}
 800175a:	4605      	mov	r5, r0
 800175c:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175e:	2210      	movs	r2, #16
 8001760:	2100      	movs	r1, #0
 8001762:	a802      	add	r0, sp, #8
 8001764:	f000 f94e 	bl	8001a04 <memset>
  if(hadc->Instance==ADC1)
 8001768:	682a      	ldr	r2, [r5, #0]
 800176a:	4b1d      	ldr	r3, [pc, #116]	; (80017e0 <HAL_ADC_MspInit+0x88>)
 800176c:	429a      	cmp	r2, r3
 800176e:	d134      	bne.n	80017da <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001770:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8001774:	699a      	ldr	r2, [r3, #24]
    PA1     ------> ADC1_IN1
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = APPS1_Pin|APPS2_Pin|BRAKES_ANGLE_SENSOR_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001776:	481b      	ldr	r0, [pc, #108]	; (80017e4 <HAL_ADC_MspInit+0x8c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001778:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800177c:	619a      	str	r2, [r3, #24]
 800177e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001780:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001782:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001786:	9200      	str	r2, [sp, #0]
 8001788:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800178a:	699a      	ldr	r2, [r3, #24]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800178c:	4c16      	ldr	r4, [pc, #88]	; (80017e8 <HAL_ADC_MspInit+0x90>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800178e:	f042 0204 	orr.w	r2, r2, #4
 8001792:	619a      	str	r2, [r3, #24]
 8001794:	699b      	ldr	r3, [r3, #24]
 8001796:	f003 0304 	and.w	r3, r3, #4
 800179a:	9301      	str	r3, [sp, #4]
 800179c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = APPS1_Pin|APPS2_Pin|BRAKES_ANGLE_SENSOR_Pin;
 800179e:	2323      	movs	r3, #35	; 0x23
 80017a0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017a2:	2303      	movs	r3, #3
 80017a4:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a6:	f7ff f865 	bl	8000874 <HAL_GPIO_Init>
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80017aa:	2280      	movs	r2, #128	; 0x80
 80017ac:	60e2      	str	r2, [r4, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017b2:	6122      	str	r2, [r4, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80017b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_adc1.Instance = DMA1_Channel1;
 80017b8:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <HAL_ADC_MspInit+0x94>)
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80017ba:	6162      	str	r2, [r4, #20]
    hdma_adc1.Instance = DMA1_Channel1;
 80017bc:	6023      	str	r3, [r4, #0]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80017be:	2220      	movs	r2, #32
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017c0:	2300      	movs	r3, #0
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80017c2:	4620      	mov	r0, r4
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017c4:	6063      	str	r3, [r4, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80017c6:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80017c8:	61a2      	str	r2, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80017ca:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80017cc:	f7fe ff8e 	bl	80006ec <HAL_DMA_Init>
 80017d0:	b108      	cbz	r0, 80017d6 <HAL_ADC_MspInit+0x7e>
    {
      Error_Handler();
 80017d2:	f7ff ff9d 	bl	8001710 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80017d6:	622c      	str	r4, [r5, #32]
 80017d8:	6265      	str	r5, [r4, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017da:	b007      	add	sp, #28
 80017dc:	bd30      	pop	{r4, r5, pc}
 80017de:	bf00      	nop
 80017e0:	40012400 	.word	0x40012400
 80017e4:	40010800 	.word	0x40010800
 80017e8:	2000011c 	.word	0x2000011c
 80017ec:	40020008 	.word	0x40020008

080017f0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80017f0:	b510      	push	{r4, lr}
 80017f2:	4604      	mov	r4, r0
 80017f4:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f6:	2210      	movs	r2, #16
 80017f8:	2100      	movs	r1, #0
 80017fa:	a802      	add	r0, sp, #8
 80017fc:	f000 f902 	bl	8001a04 <memset>
  if(hcan->Instance==CAN1)
 8001800:	6822      	ldr	r2, [r4, #0]
 8001802:	4b15      	ldr	r3, [pc, #84]	; (8001858 <HAL_CAN_MspInit+0x68>)
 8001804:	429a      	cmp	r2, r3
 8001806:	d125      	bne.n	8001854 <HAL_CAN_MspInit+0x64>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001808:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 800180c:	69da      	ldr	r2, [r3, #28]
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180e:	a902      	add	r1, sp, #8
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001810:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001814:	61da      	str	r2, [r3, #28]
 8001816:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001818:	4810      	ldr	r0, [pc, #64]	; (800185c <HAL_CAN_MspInit+0x6c>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 800181a:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800181e:	9200      	str	r2, [sp, #0]
 8001820:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001822:	699a      	ldr	r2, [r3, #24]
 8001824:	f042 0204 	orr.w	r2, r2, #4
 8001828:	619a      	str	r2, [r3, #24]
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	f003 0304 	and.w	r3, r3, #4
 8001830:	9301      	str	r3, [sp, #4]
 8001832:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001834:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001838:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183a:	f7ff f81b 	bl	8000874 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800183e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001842:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001844:	2302      	movs	r3, #2
 8001846:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001848:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184a:	a902      	add	r1, sp, #8
 800184c:	4803      	ldr	r0, [pc, #12]	; (800185c <HAL_CAN_MspInit+0x6c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800184e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001850:	f7ff f810 	bl	8000874 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001854:	b006      	add	sp, #24
 8001856:	bd10      	pop	{r4, pc}
 8001858:	40006400 	.word	0x40006400
 800185c:	40010800 	.word	0x40010800

08001860 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM3)
 8001860:	6802      	ldr	r2, [r0, #0]
 8001862:	4b08      	ldr	r3, [pc, #32]	; (8001884 <HAL_TIM_PWM_MspInit+0x24>)
{
 8001864:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM3)
 8001866:	429a      	cmp	r2, r3
 8001868:	d10a      	bne.n	8001880 <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800186a:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 800186e:	69da      	ldr	r2, [r3, #28]
 8001870:	f042 0202 	orr.w	r2, r2, #2
 8001874:	61da      	str	r2, [r3, #28]
 8001876:	69db      	ldr	r3, [r3, #28]
 8001878:	f003 0302 	and.w	r3, r3, #2
 800187c:	9301      	str	r3, [sp, #4]
 800187e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001880:	b002      	add	sp, #8
 8001882:	4770      	bx	lr
 8001884:	40000400 	.word	0x40000400

08001888 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001888:	b510      	push	{r4, lr}
 800188a:	4604      	mov	r4, r0
 800188c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188e:	2210      	movs	r2, #16
 8001890:	2100      	movs	r1, #0
 8001892:	a802      	add	r0, sp, #8
 8001894:	f000 f8b6 	bl	8001a04 <memset>
  if(htim->Instance==TIM3)
 8001898:	6822      	ldr	r2, [r4, #0]
 800189a:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <HAL_TIM_MspPostInit+0x44>)
 800189c:	429a      	cmp	r2, r3
 800189e:	d113      	bne.n	80018c8 <HAL_TIM_MspPostInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a0:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 80018a4:	699a      	ldr	r2, [r3, #24]
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = MOTOR_PWM_OUTPUT_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(MOTOR_PWM_OUTPUT_GPIO_Port, &GPIO_InitStruct);
 80018a6:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a8:	f042 0208 	orr.w	r2, r2, #8
 80018ac:	619a      	str	r2, [r3, #24]
 80018ae:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(MOTOR_PWM_OUTPUT_GPIO_Port, &GPIO_InitStruct);
 80018b0:	4807      	ldr	r0, [pc, #28]	; (80018d0 <HAL_TIM_MspPostInit+0x48>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b2:	f003 0308 	and.w	r3, r3, #8
 80018b6:	9301      	str	r3, [sp, #4]
 80018b8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = MOTOR_PWM_OUTPUT_Pin;
 80018ba:	2301      	movs	r3, #1
 80018bc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018be:	2302      	movs	r3, #2
 80018c0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(MOTOR_PWM_OUTPUT_GPIO_Port, &GPIO_InitStruct);
 80018c4:	f7fe ffd6 	bl	8000874 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80018c8:	b006      	add	sp, #24
 80018ca:	bd10      	pop	{r4, pc}
 80018cc:	40000400 	.word	0x40000400
 80018d0:	40010c00 	.word	0x40010c00

080018d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018d4:	b510      	push	{r4, lr}
 80018d6:	4604      	mov	r4, r0
 80018d8:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018da:	2210      	movs	r2, #16
 80018dc:	2100      	movs	r1, #0
 80018de:	a802      	add	r0, sp, #8
 80018e0:	f000 f890 	bl	8001a04 <memset>
  if(huart->Instance==USART3)
 80018e4:	6822      	ldr	r2, [r4, #0]
 80018e6:	4b17      	ldr	r3, [pc, #92]	; (8001944 <HAL_UART_MspInit+0x70>)
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d128      	bne.n	800193e <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80018ec:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 80018f0:	69da      	ldr	r2, [r3, #28]
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f2:	a902      	add	r1, sp, #8
    __HAL_RCC_USART3_CLK_ENABLE();
 80018f4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80018f8:	61da      	str	r2, [r3, #28]
 80018fa:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018fc:	4812      	ldr	r0, [pc, #72]	; (8001948 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80018fe:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8001902:	9200      	str	r2, [sp, #0]
 8001904:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001906:	699a      	ldr	r2, [r3, #24]
 8001908:	f042 0208 	orr.w	r2, r2, #8
 800190c:	619a      	str	r2, [r3, #24]
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	f003 0308 	and.w	r3, r3, #8
 8001914:	9301      	str	r3, [sp, #4]
 8001916:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001918:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800191c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191e:	2302      	movs	r3, #2
 8001920:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001922:	2303      	movs	r3, #3
 8001924:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001926:	f7fe ffa5 	bl	8000874 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800192a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800192e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001930:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001932:	a902      	add	r1, sp, #8
 8001934:	4804      	ldr	r0, [pc, #16]	; (8001948 <HAL_UART_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001936:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001938:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800193a:	f7fe ff9b 	bl	8000874 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800193e:	b006      	add	sp, #24
 8001940:	bd10      	pop	{r4, pc}
 8001942:	bf00      	nop
 8001944:	40004800 	.word	0x40004800
 8001948:	40010c00 	.word	0x40010c00

0800194c <NMI_Handler>:
 800194c:	4770      	bx	lr

0800194e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800194e:	e7fe      	b.n	800194e <HardFault_Handler>

08001950 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001950:	e7fe      	b.n	8001950 <MemManage_Handler>

08001952 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001952:	e7fe      	b.n	8001952 <BusFault_Handler>

08001954 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001954:	e7fe      	b.n	8001954 <UsageFault_Handler>

08001956 <SVC_Handler>:
 8001956:	4770      	bx	lr

08001958 <DebugMon_Handler>:
 8001958:	4770      	bx	lr

0800195a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800195a:	4770      	bx	lr

0800195c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800195c:	f7fe bc2c 	b.w	80001b8 <HAL_IncTick>

08001960 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001960:	4801      	ldr	r0, [pc, #4]	; (8001968 <DMA1_Channel1_IRQHandler+0x8>)
 8001962:	f7fe bef3 	b.w	800074c <HAL_DMA_IRQHandler>
 8001966:	bf00      	nop
 8001968:	2000011c 	.word	0x2000011c

0800196c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800196c:	4770      	bx	lr
	...

08001970 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001970:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001972:	e003      	b.n	800197c <LoopCopyDataInit>

08001974 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001974:	4b0b      	ldr	r3, [pc, #44]	; (80019a4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001976:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001978:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800197a:	3104      	adds	r1, #4

0800197c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800197c:	480a      	ldr	r0, [pc, #40]	; (80019a8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800197e:	4b0b      	ldr	r3, [pc, #44]	; (80019ac <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001980:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001982:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001984:	d3f6      	bcc.n	8001974 <CopyDataInit>
  ldr r2, =_sbss
 8001986:	4a0a      	ldr	r2, [pc, #40]	; (80019b0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001988:	e002      	b.n	8001990 <LoopFillZerobss>

0800198a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800198a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800198c:	f842 3b04 	str.w	r3, [r2], #4

08001990 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001990:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001992:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001994:	d3f9      	bcc.n	800198a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001996:	f7ff ffe9 	bl	800196c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800199a:	f000 f80f 	bl	80019bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800199e:	f7ff fd97 	bl	80014d0 <main>
  bx lr
 80019a2:	4770      	bx	lr
  ldr r3, =_sidata
 80019a4:	08001a5c 	.word	0x08001a5c
  ldr r0, =_sdata
 80019a8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80019ac:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80019b0:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80019b4:	20000190 	.word	0x20000190

080019b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019b8:	e7fe      	b.n	80019b8 <ADC1_2_IRQHandler>
	...

080019bc <__libc_init_array>:
 80019bc:	b570      	push	{r4, r5, r6, lr}
 80019be:	2500      	movs	r5, #0
 80019c0:	4e0c      	ldr	r6, [pc, #48]	; (80019f4 <__libc_init_array+0x38>)
 80019c2:	4c0d      	ldr	r4, [pc, #52]	; (80019f8 <__libc_init_array+0x3c>)
 80019c4:	1ba4      	subs	r4, r4, r6
 80019c6:	10a4      	asrs	r4, r4, #2
 80019c8:	42a5      	cmp	r5, r4
 80019ca:	d109      	bne.n	80019e0 <__libc_init_array+0x24>
 80019cc:	f000 f822 	bl	8001a14 <_init>
 80019d0:	2500      	movs	r5, #0
 80019d2:	4e0a      	ldr	r6, [pc, #40]	; (80019fc <__libc_init_array+0x40>)
 80019d4:	4c0a      	ldr	r4, [pc, #40]	; (8001a00 <__libc_init_array+0x44>)
 80019d6:	1ba4      	subs	r4, r4, r6
 80019d8:	10a4      	asrs	r4, r4, #2
 80019da:	42a5      	cmp	r5, r4
 80019dc:	d105      	bne.n	80019ea <__libc_init_array+0x2e>
 80019de:	bd70      	pop	{r4, r5, r6, pc}
 80019e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80019e4:	4798      	blx	r3
 80019e6:	3501      	adds	r5, #1
 80019e8:	e7ee      	b.n	80019c8 <__libc_init_array+0xc>
 80019ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80019ee:	4798      	blx	r3
 80019f0:	3501      	adds	r5, #1
 80019f2:	e7f2      	b.n	80019da <__libc_init_array+0x1e>
 80019f4:	08001a54 	.word	0x08001a54
 80019f8:	08001a54 	.word	0x08001a54
 80019fc:	08001a54 	.word	0x08001a54
 8001a00:	08001a58 	.word	0x08001a58

08001a04 <memset>:
 8001a04:	4603      	mov	r3, r0
 8001a06:	4402      	add	r2, r0
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d100      	bne.n	8001a0e <memset+0xa>
 8001a0c:	4770      	bx	lr
 8001a0e:	f803 1b01 	strb.w	r1, [r3], #1
 8001a12:	e7f9      	b.n	8001a08 <memset+0x4>

08001a14 <_init>:
 8001a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a16:	bf00      	nop
 8001a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a1a:	bc08      	pop	{r3}
 8001a1c:	469e      	mov	lr, r3
 8001a1e:	4770      	bx	lr

08001a20 <_fini>:
 8001a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a22:	bf00      	nop
 8001a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a26:	bc08      	pop	{r3}
 8001a28:	469e      	mov	lr, r3
 8001a2a:	4770      	bx	lr
