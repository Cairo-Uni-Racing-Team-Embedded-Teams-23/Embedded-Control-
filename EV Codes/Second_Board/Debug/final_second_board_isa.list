
final_second_board_isa.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001244  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08001350  08001350  00011350  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001378  08001378  00011378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800137c  0800137c  0001137c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08001380  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000d8  2000000c  0800138c  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200000e4  0800138c  000200e4  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00008bef  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001d7e  00000000  00000000  00028c24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000328f  00000000  00000000  0002a9a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000006a8  00000000  00000000  0002dc38  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000008c8  00000000  00000000  0002e2e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003dab  00000000  00000000  0002eba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000246d  00000000  00000000  00032953  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00034dc0  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001164  00000000  00000000  00034e3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001338 	.word	0x08001338

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001338 	.word	0x08001338

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	4b0e      	ldr	r3, [pc, #56]	; (8000188 <HAL_InitTick+0x3c>)
{
 8000150:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0b      	ldr	r2, [pc, #44]	; (800018c <HAL_InitTick+0x40>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 f9b4 	bl	80004d0 <HAL_SYSTICK_Config>
 8000168:	4604      	mov	r4, r0
 800016a:	b958      	cbnz	r0, 8000184 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016c:	2d0f      	cmp	r5, #15
 800016e:	d809      	bhi.n	8000184 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000170:	4602      	mov	r2, r0
 8000172:	4629      	mov	r1, r5
 8000174:	f04f 30ff 	mov.w	r0, #4294967295
 8000178:	f000 f968 	bl	800044c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <HAL_InitTick+0x44>)
 800017e:	4620      	mov	r0, r4
 8000180:	601d      	str	r5, [r3, #0]
 8000182:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000184:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000186:	bd38      	pop	{r3, r4, r5, pc}
 8000188:	20000000 	.word	0x20000000
 800018c:	20000008 	.word	0x20000008
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 f941 	bl	8000428 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f000 ffba 	bl	8001124 <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <HAL_IncTick+0x14>)
 80001bc:	6811      	ldr	r1, [r2, #0]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	20000028 	.word	0x20000028
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000028 	.word	0x20000028

080001dc <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 80001dc:	2300      	movs	r3, #0
{ 
 80001de:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 80001e0:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80001e2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80001e6:	2b01      	cmp	r3, #1
 80001e8:	d074      	beq.n	80002d4 <HAL_ADC_ConfigChannel+0xf8>
 80001ea:	2301      	movs	r3, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80001ec:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 80001ee:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 80001f2:	2d06      	cmp	r5, #6
 80001f4:	6802      	ldr	r2, [r0, #0]
 80001f6:	ea4f 0385 	mov.w	r3, r5, lsl #2
 80001fa:	680c      	ldr	r4, [r1, #0]
 80001fc:	d825      	bhi.n	800024a <HAL_ADC_ConfigChannel+0x6e>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80001fe:	442b      	add	r3, r5
 8000200:	251f      	movs	r5, #31
 8000202:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8000204:	3b05      	subs	r3, #5
 8000206:	409d      	lsls	r5, r3
 8000208:	ea26 0505 	bic.w	r5, r6, r5
 800020c:	fa04 f303 	lsl.w	r3, r4, r3
 8000210:	432b      	orrs	r3, r5
 8000212:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000214:	2c09      	cmp	r4, #9
 8000216:	ea4f 0344 	mov.w	r3, r4, lsl #1
 800021a:	688d      	ldr	r5, [r1, #8]
 800021c:	d92f      	bls.n	800027e <HAL_ADC_ConfigChannel+0xa2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800021e:	2607      	movs	r6, #7
 8000220:	4423      	add	r3, r4
 8000222:	68d1      	ldr	r1, [r2, #12]
 8000224:	3b1e      	subs	r3, #30
 8000226:	409e      	lsls	r6, r3
 8000228:	ea21 0106 	bic.w	r1, r1, r6
 800022c:	fa05 f303 	lsl.w	r3, r5, r3
 8000230:	430b      	orrs	r3, r1
 8000232:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000234:	f1a4 0310 	sub.w	r3, r4, #16
 8000238:	2b01      	cmp	r3, #1
 800023a:	d92b      	bls.n	8000294 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800023c:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800023e:	2200      	movs	r2, #0
 8000240:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8000244:	4618      	mov	r0, r3
 8000246:	b002      	add	sp, #8
 8000248:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 800024a:	2d0c      	cmp	r5, #12
 800024c:	d80b      	bhi.n	8000266 <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800024e:	442b      	add	r3, r5
 8000250:	251f      	movs	r5, #31
 8000252:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8000254:	3b23      	subs	r3, #35	; 0x23
 8000256:	409d      	lsls	r5, r3
 8000258:	ea26 0505 	bic.w	r5, r6, r5
 800025c:	fa04 f303 	lsl.w	r3, r4, r3
 8000260:	432b      	orrs	r3, r5
 8000262:	6313      	str	r3, [r2, #48]	; 0x30
 8000264:	e7d6      	b.n	8000214 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000266:	442b      	add	r3, r5
 8000268:	251f      	movs	r5, #31
 800026a:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 800026c:	3b41      	subs	r3, #65	; 0x41
 800026e:	409d      	lsls	r5, r3
 8000270:	ea26 0505 	bic.w	r5, r6, r5
 8000274:	fa04 f303 	lsl.w	r3, r4, r3
 8000278:	432b      	orrs	r3, r5
 800027a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800027c:	e7ca      	b.n	8000214 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800027e:	2607      	movs	r6, #7
 8000280:	6911      	ldr	r1, [r2, #16]
 8000282:	4423      	add	r3, r4
 8000284:	409e      	lsls	r6, r3
 8000286:	ea21 0106 	bic.w	r1, r1, r6
 800028a:	fa05 f303 	lsl.w	r3, r5, r3
 800028e:	430b      	orrs	r3, r1
 8000290:	6113      	str	r3, [r2, #16]
 8000292:	e7cf      	b.n	8000234 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 8000294:	4b10      	ldr	r3, [pc, #64]	; (80002d8 <HAL_ADC_ConfigChannel+0xfc>)
 8000296:	429a      	cmp	r2, r3
 8000298:	d116      	bne.n	80002c8 <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800029a:	6893      	ldr	r3, [r2, #8]
 800029c:	021b      	lsls	r3, r3, #8
 800029e:	d4cd      	bmi.n	800023c <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80002a0:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80002a2:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80002a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80002a8:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80002aa:	d1c7      	bne.n	800023c <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80002ac:	4b0b      	ldr	r3, [pc, #44]	; (80002dc <HAL_ADC_ConfigChannel+0x100>)
 80002ae:	4a0c      	ldr	r2, [pc, #48]	; (80002e0 <HAL_ADC_ConfigChannel+0x104>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	fbb3 f2f2 	udiv	r2, r3, r2
 80002b6:	230a      	movs	r3, #10
 80002b8:	4353      	muls	r3, r2
            wait_loop_index--;
 80002ba:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80002bc:	9b01      	ldr	r3, [sp, #4]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d0bc      	beq.n	800023c <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 80002c2:	9b01      	ldr	r3, [sp, #4]
 80002c4:	3b01      	subs	r3, #1
 80002c6:	e7f8      	b.n	80002ba <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80002c8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80002ca:	f043 0320 	orr.w	r3, r3, #32
 80002ce:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80002d0:	2301      	movs	r3, #1
 80002d2:	e7b4      	b.n	800023e <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 80002d4:	2302      	movs	r3, #2
 80002d6:	e7b5      	b.n	8000244 <HAL_ADC_ConfigChannel+0x68>
 80002d8:	40012400 	.word	0x40012400
 80002dc:	20000008 	.word	0x20000008
 80002e0:	000f4240 	.word	0x000f4240

080002e4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80002e4:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80002e6:	6803      	ldr	r3, [r0, #0]
{
 80002e8:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80002ea:	689a      	ldr	r2, [r3, #8]
 80002ec:	07d2      	lsls	r2, r2, #31
 80002ee:	d401      	bmi.n	80002f4 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80002f0:	2000      	movs	r0, #0
 80002f2:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 80002f4:	689a      	ldr	r2, [r3, #8]
 80002f6:	f022 0201 	bic.w	r2, r2, #1
 80002fa:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80002fc:	f7ff ff68 	bl	80001d0 <HAL_GetTick>
 8000300:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000302:	6823      	ldr	r3, [r4, #0]
 8000304:	689b      	ldr	r3, [r3, #8]
 8000306:	07db      	lsls	r3, r3, #31
 8000308:	d5f2      	bpl.n	80002f0 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800030a:	f7ff ff61 	bl	80001d0 <HAL_GetTick>
 800030e:	1b40      	subs	r0, r0, r5
 8000310:	2802      	cmp	r0, #2
 8000312:	d9f6      	bls.n	8000302 <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000314:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000316:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000318:	f043 0310 	orr.w	r3, r3, #16
 800031c:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800031e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000320:	f043 0301 	orr.w	r3, r3, #1
 8000324:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000326:	bd38      	pop	{r3, r4, r5, pc}

08000328 <HAL_ADC_Init>:
{
 8000328:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 800032a:	4604      	mov	r4, r0
 800032c:	2800      	cmp	r0, #0
 800032e:	d071      	beq.n	8000414 <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000330:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000332:	b923      	cbnz	r3, 800033e <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8000334:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8000336:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 800033a:	f000 ff15 	bl	8001168 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800033e:	4620      	mov	r0, r4
 8000340:	f7ff ffd0 	bl	80002e4 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000344:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000346:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 800034a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800034c:	d164      	bne.n	8000418 <HAL_ADC_Init+0xf0>
 800034e:	2800      	cmp	r0, #0
 8000350:	d162      	bne.n	8000418 <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000352:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8000354:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000358:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 800035a:	f023 0302 	bic.w	r3, r3, #2
 800035e:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000362:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000364:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8000366:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000368:	7b23      	ldrb	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800036a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800036e:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000372:	d038      	beq.n	80003e6 <HAL_ADC_Init+0xbe>
 8000374:	2901      	cmp	r1, #1
 8000376:	bf14      	ite	ne
 8000378:	4606      	movne	r6, r0
 800037a:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800037e:	7d25      	ldrb	r5, [r4, #20]
 8000380:	2d01      	cmp	r5, #1
 8000382:	d107      	bne.n	8000394 <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000384:	2b00      	cmp	r3, #0
 8000386:	d130      	bne.n	80003ea <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000388:	69a3      	ldr	r3, [r4, #24]
 800038a:	3b01      	subs	r3, #1
 800038c:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 8000390:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8000394:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000396:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 800039a:	685d      	ldr	r5, [r3, #4]
 800039c:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 80003a0:	ea45 0506 	orr.w	r5, r5, r6
 80003a4:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80003a6:	689e      	ldr	r6, [r3, #8]
 80003a8:	4d1d      	ldr	r5, [pc, #116]	; (8000420 <HAL_ADC_Init+0xf8>)
 80003aa:	ea05 0506 	and.w	r5, r5, r6
 80003ae:	ea45 0502 	orr.w	r5, r5, r2
 80003b2:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80003b4:	d001      	beq.n	80003ba <HAL_ADC_Init+0x92>
 80003b6:	2901      	cmp	r1, #1
 80003b8:	d120      	bne.n	80003fc <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80003ba:	6921      	ldr	r1, [r4, #16]
 80003bc:	3901      	subs	r1, #1
 80003be:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80003c0:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80003c2:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 80003c6:	4329      	orrs	r1, r5
 80003c8:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80003ca:	6899      	ldr	r1, [r3, #8]
 80003cc:	4b15      	ldr	r3, [pc, #84]	; (8000424 <HAL_ADC_Init+0xfc>)
 80003ce:	400b      	ands	r3, r1
 80003d0:	429a      	cmp	r2, r3
 80003d2:	d115      	bne.n	8000400 <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 80003d4:	2300      	movs	r3, #0
 80003d6:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80003d8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80003da:	f023 0303 	bic.w	r3, r3, #3
 80003de:	f043 0301 	orr.w	r3, r3, #1
 80003e2:	62a3      	str	r3, [r4, #40]	; 0x28
 80003e4:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80003e6:	460e      	mov	r6, r1
 80003e8:	e7c9      	b.n	800037e <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80003ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80003ec:	f043 0320 	orr.w	r3, r3, #32
 80003f0:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003f2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80003f4:	f043 0301 	orr.w	r3, r3, #1
 80003f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80003fa:	e7cb      	b.n	8000394 <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 80003fc:	2100      	movs	r1, #0
 80003fe:	e7df      	b.n	80003c0 <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 8000400:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000402:	f023 0312 	bic.w	r3, r3, #18
 8000406:	f043 0310 	orr.w	r3, r3, #16
 800040a:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800040c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800040e:	f043 0301 	orr.w	r3, r3, #1
 8000412:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8000414:	2001      	movs	r0, #1
}
 8000416:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000418:	f043 0310 	orr.w	r3, r3, #16
 800041c:	62a3      	str	r3, [r4, #40]	; 0x28
 800041e:	e7f9      	b.n	8000414 <HAL_ADC_Init+0xec>
 8000420:	ffe1f7fd 	.word	0xffe1f7fd
 8000424:	ff1f0efe 	.word	0xff1f0efe

08000428 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000428:	4a07      	ldr	r2, [pc, #28]	; (8000448 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800042a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800042c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800042e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000432:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000436:	041b      	lsls	r3, r3, #16
 8000438:	0c1b      	lsrs	r3, r3, #16
 800043a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800043e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000442:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000444:	60d3      	str	r3, [r2, #12]
 8000446:	4770      	bx	lr
 8000448:	e000ed00 	.word	0xe000ed00

0800044c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800044c:	4b17      	ldr	r3, [pc, #92]	; (80004ac <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800044e:	b530      	push	{r4, r5, lr}
 8000450:	68dc      	ldr	r4, [r3, #12]
 8000452:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000456:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800045a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800045c:	2b04      	cmp	r3, #4
 800045e:	bf28      	it	cs
 8000460:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000462:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000464:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000468:	bf98      	it	ls
 800046a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800046c:	fa05 f303 	lsl.w	r3, r5, r3
 8000470:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000474:	bf88      	it	hi
 8000476:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000478:	4019      	ands	r1, r3
 800047a:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800047c:	fa05 f404 	lsl.w	r4, r5, r4
 8000480:	3c01      	subs	r4, #1
 8000482:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000484:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000486:	ea42 0201 	orr.w	r2, r2, r1
 800048a:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800048e:	bfa9      	itett	ge
 8000490:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000494:	4b06      	ldrlt	r3, [pc, #24]	; (80004b0 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000496:	b2d2      	uxtbge	r2, r2
 8000498:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800049c:	bfbb      	ittet	lt
 800049e:	f000 000f 	andlt.w	r0, r0, #15
 80004a2:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004a4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004a8:	541a      	strblt	r2, [r3, r0]
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	e000ed00 	.word	0xe000ed00
 80004b0:	e000ed14 	.word	0xe000ed14

080004b4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80004b4:	2800      	cmp	r0, #0
 80004b6:	db08      	blt.n	80004ca <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004b8:	2301      	movs	r3, #1
 80004ba:	0942      	lsrs	r2, r0, #5
 80004bc:	f000 001f 	and.w	r0, r0, #31
 80004c0:	fa03 f000 	lsl.w	r0, r3, r0
 80004c4:	4b01      	ldr	r3, [pc, #4]	; (80004cc <HAL_NVIC_EnableIRQ+0x18>)
 80004c6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80004ca:	4770      	bx	lr
 80004cc:	e000e100 	.word	0xe000e100

080004d0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80004d0:	3801      	subs	r0, #1
 80004d2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80004d6:	d20a      	bcs.n	80004ee <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004d8:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004da:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004dc:	4a06      	ldr	r2, [pc, #24]	; (80004f8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004de:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004e0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004e4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004e6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004e8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004ea:	601a      	str	r2, [r3, #0]
 80004ec:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80004ee:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	e000e010 	.word	0xe000e010
 80004f8:	e000ed00 	.word	0xe000ed00

080004fc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80004fc:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80004fe:	b330      	cbz	r0, 800054e <HAL_DMA_Init+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000500:	2214      	movs	r2, #20
 8000502:	6801      	ldr	r1, [r0, #0]
 8000504:	4b13      	ldr	r3, [pc, #76]	; (8000554 <HAL_DMA_Init+0x58>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000506:	6884      	ldr	r4, [r0, #8]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000508:	440b      	add	r3, r1
 800050a:	fbb3 f3f2 	udiv	r3, r3, r2
 800050e:	009b      	lsls	r3, r3, #2
 8000510:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000512:	4b11      	ldr	r3, [pc, #68]	; (8000558 <HAL_DMA_Init+0x5c>)
  tmp = hdma->Instance->CCR;
 8000514:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 8000516:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp |=  hdma->Init.Direction        |
 8000518:	6843      	ldr	r3, [r0, #4]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800051a:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
  tmp |=  hdma->Init.Direction        |
 800051e:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000520:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000522:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000526:	4323      	orrs	r3, r4
 8000528:	6904      	ldr	r4, [r0, #16]
 800052a:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800052c:	6944      	ldr	r4, [r0, #20]
 800052e:	4323      	orrs	r3, r4
 8000530:	6984      	ldr	r4, [r0, #24]
 8000532:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8000534:	69c4      	ldr	r4, [r0, #28]
 8000536:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8000538:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800053a:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800053c:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800053e:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000540:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000544:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000546:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 800054a:	4618      	mov	r0, r3
 800054c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800054e:	2001      	movs	r0, #1
}
 8000550:	bd10      	pop	{r4, pc}
 8000552:	bf00      	nop
 8000554:	bffdfff8 	.word	0xbffdfff8
 8000558:	40020000 	.word	0x40020000

0800055c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800055c:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
  uint32_t source_it = hdma->Instance->CCR;
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800055e:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000560:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000562:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000564:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000566:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000568:	4095      	lsls	r5, r2
 800056a:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 800056c:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800056e:	d032      	beq.n	80005d6 <HAL_DMA_IRQHandler+0x7a>
 8000570:	074d      	lsls	r5, r1, #29
 8000572:	d530      	bpl.n	80005d6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000574:	681a      	ldr	r2, [r3, #0]
 8000576:	0696      	lsls	r6, r2, #26
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000578:	bf5e      	ittt	pl
 800057a:	681a      	ldrpl	r2, [r3, #0]
 800057c:	f022 0204 	bicpl.w	r2, r2, #4
 8000580:	601a      	strpl	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000582:	4a3e      	ldr	r2, [pc, #248]	; (800067c <HAL_DMA_IRQHandler+0x120>)
 8000584:	4293      	cmp	r3, r2
 8000586:	d019      	beq.n	80005bc <HAL_DMA_IRQHandler+0x60>
 8000588:	3214      	adds	r2, #20
 800058a:	4293      	cmp	r3, r2
 800058c:	d018      	beq.n	80005c0 <HAL_DMA_IRQHandler+0x64>
 800058e:	3214      	adds	r2, #20
 8000590:	4293      	cmp	r3, r2
 8000592:	d017      	beq.n	80005c4 <HAL_DMA_IRQHandler+0x68>
 8000594:	3214      	adds	r2, #20
 8000596:	4293      	cmp	r3, r2
 8000598:	d017      	beq.n	80005ca <HAL_DMA_IRQHandler+0x6e>
 800059a:	3214      	adds	r2, #20
 800059c:	4293      	cmp	r3, r2
 800059e:	d017      	beq.n	80005d0 <HAL_DMA_IRQHandler+0x74>
 80005a0:	3214      	adds	r2, #20
 80005a2:	4293      	cmp	r3, r2
 80005a4:	bf0c      	ite	eq
 80005a6:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 80005aa:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 80005ae:	4a34      	ldr	r2, [pc, #208]	; (8000680 <HAL_DMA_IRQHandler+0x124>)
 80005b0:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80005b2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    if (hdma->XferErrorCallback != NULL)
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d05e      	beq.n	8000676 <HAL_DMA_IRQHandler+0x11a>
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
    }
  }
  return;
}
 80005b8:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80005ba:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80005bc:	2304      	movs	r3, #4
 80005be:	e7f6      	b.n	80005ae <HAL_DMA_IRQHandler+0x52>
 80005c0:	2340      	movs	r3, #64	; 0x40
 80005c2:	e7f4      	b.n	80005ae <HAL_DMA_IRQHandler+0x52>
 80005c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005c8:	e7f1      	b.n	80005ae <HAL_DMA_IRQHandler+0x52>
 80005ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80005ce:	e7ee      	b.n	80005ae <HAL_DMA_IRQHandler+0x52>
 80005d0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80005d4:	e7eb      	b.n	80005ae <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80005d6:	2502      	movs	r5, #2
 80005d8:	4095      	lsls	r5, r2
 80005da:	4225      	tst	r5, r4
 80005dc:	d035      	beq.n	800064a <HAL_DMA_IRQHandler+0xee>
 80005de:	078d      	lsls	r5, r1, #30
 80005e0:	d533      	bpl.n	800064a <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80005e2:	681a      	ldr	r2, [r3, #0]
 80005e4:	0694      	lsls	r4, r2, #26
 80005e6:	d406      	bmi.n	80005f6 <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	f022 020a 	bic.w	r2, r2, #10
 80005ee:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80005f0:	2201      	movs	r2, #1
 80005f2:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80005f6:	4a21      	ldr	r2, [pc, #132]	; (800067c <HAL_DMA_IRQHandler+0x120>)
 80005f8:	4293      	cmp	r3, r2
 80005fa:	d019      	beq.n	8000630 <HAL_DMA_IRQHandler+0xd4>
 80005fc:	3214      	adds	r2, #20
 80005fe:	4293      	cmp	r3, r2
 8000600:	d018      	beq.n	8000634 <HAL_DMA_IRQHandler+0xd8>
 8000602:	3214      	adds	r2, #20
 8000604:	4293      	cmp	r3, r2
 8000606:	d017      	beq.n	8000638 <HAL_DMA_IRQHandler+0xdc>
 8000608:	3214      	adds	r2, #20
 800060a:	4293      	cmp	r3, r2
 800060c:	d017      	beq.n	800063e <HAL_DMA_IRQHandler+0xe2>
 800060e:	3214      	adds	r2, #20
 8000610:	4293      	cmp	r3, r2
 8000612:	d017      	beq.n	8000644 <HAL_DMA_IRQHandler+0xe8>
 8000614:	3214      	adds	r2, #20
 8000616:	4293      	cmp	r3, r2
 8000618:	bf0c      	ite	eq
 800061a:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 800061e:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8000622:	4a17      	ldr	r2, [pc, #92]	; (8000680 <HAL_DMA_IRQHandler+0x124>)
 8000624:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8000626:	2300      	movs	r3, #0
 8000628:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 800062c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800062e:	e7c1      	b.n	80005b4 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000630:	2302      	movs	r3, #2
 8000632:	e7f6      	b.n	8000622 <HAL_DMA_IRQHandler+0xc6>
 8000634:	2320      	movs	r3, #32
 8000636:	e7f4      	b.n	8000622 <HAL_DMA_IRQHandler+0xc6>
 8000638:	f44f 7300 	mov.w	r3, #512	; 0x200
 800063c:	e7f1      	b.n	8000622 <HAL_DMA_IRQHandler+0xc6>
 800063e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000642:	e7ee      	b.n	8000622 <HAL_DMA_IRQHandler+0xc6>
 8000644:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000648:	e7eb      	b.n	8000622 <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800064a:	2508      	movs	r5, #8
 800064c:	4095      	lsls	r5, r2
 800064e:	4225      	tst	r5, r4
 8000650:	d011      	beq.n	8000676 <HAL_DMA_IRQHandler+0x11a>
 8000652:	0709      	lsls	r1, r1, #28
 8000654:	d50f      	bpl.n	8000676 <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000656:	6819      	ldr	r1, [r3, #0]
 8000658:	f021 010e 	bic.w	r1, r1, #14
 800065c:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800065e:	2301      	movs	r3, #1
 8000660:	fa03 f202 	lsl.w	r2, r3, r2
 8000664:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000666:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8000668:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 800066c:	2300      	movs	r3, #0
 800066e:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8000672:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000674:	e79e      	b.n	80005b4 <HAL_DMA_IRQHandler+0x58>
}
 8000676:	bc70      	pop	{r4, r5, r6}
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	40020008 	.word	0x40020008
 8000680:	40020000 	.word	0x40020000

08000684 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000684:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000688:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 800068a:	4626      	mov	r6, r4
 800068c:	4b66      	ldr	r3, [pc, #408]	; (8000828 <HAL_GPIO_Init+0x1a4>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800068e:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 8000838 <HAL_GPIO_Init+0x1b4>
 8000692:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 800083c <HAL_GPIO_Init+0x1b8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000696:	680a      	ldr	r2, [r1, #0]
 8000698:	fa32 f506 	lsrs.w	r5, r2, r6
 800069c:	d102      	bne.n	80006a4 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 800069e:	b003      	add	sp, #12
 80006a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80006a4:	f04f 0801 	mov.w	r8, #1
 80006a8:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006ac:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 80006b0:	4590      	cmp	r8, r2
 80006b2:	d17f      	bne.n	80007b4 <HAL_GPIO_Init+0x130>
      switch (GPIO_Init->Mode)
 80006b4:	684d      	ldr	r5, [r1, #4]
 80006b6:	2d12      	cmp	r5, #18
 80006b8:	f000 80aa 	beq.w	8000810 <HAL_GPIO_Init+0x18c>
 80006bc:	f200 8083 	bhi.w	80007c6 <HAL_GPIO_Init+0x142>
 80006c0:	2d02      	cmp	r5, #2
 80006c2:	f000 80a2 	beq.w	800080a <HAL_GPIO_Init+0x186>
 80006c6:	d877      	bhi.n	80007b8 <HAL_GPIO_Init+0x134>
 80006c8:	2d00      	cmp	r5, #0
 80006ca:	f000 8089 	beq.w	80007e0 <HAL_GPIO_Init+0x15c>
 80006ce:	2d01      	cmp	r5, #1
 80006d0:	f000 8099 	beq.w	8000806 <HAL_GPIO_Init+0x182>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80006d4:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80006d8:	2aff      	cmp	r2, #255	; 0xff
 80006da:	bf93      	iteet	ls
 80006dc:	4682      	movls	sl, r0
 80006de:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80006e2:	3d08      	subhi	r5, #8
 80006e4:	f8d0 b000 	ldrls.w	fp, [r0]
 80006e8:	bf92      	itee	ls
 80006ea:	00b5      	lslls	r5, r6, #2
 80006ec:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80006f0:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80006f2:	fa09 f805 	lsl.w	r8, r9, r5
 80006f6:	ea2b 0808 	bic.w	r8, fp, r8
 80006fa:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80006fe:	bf88      	it	hi
 8000700:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000704:	ea48 0505 	orr.w	r5, r8, r5
 8000708:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800070c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000710:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000714:	d04e      	beq.n	80007b4 <HAL_GPIO_Init+0x130>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000716:	4d45      	ldr	r5, [pc, #276]	; (800082c <HAL_GPIO_Init+0x1a8>)
 8000718:	4f44      	ldr	r7, [pc, #272]	; (800082c <HAL_GPIO_Init+0x1a8>)
 800071a:	69ad      	ldr	r5, [r5, #24]
 800071c:	f026 0803 	bic.w	r8, r6, #3
 8000720:	f045 0501 	orr.w	r5, r5, #1
 8000724:	61bd      	str	r5, [r7, #24]
 8000726:	69bd      	ldr	r5, [r7, #24]
 8000728:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800072c:	f005 0501 	and.w	r5, r5, #1
 8000730:	9501      	str	r5, [sp, #4]
 8000732:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000736:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800073a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800073c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8000740:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000744:	fa09 f90b 	lsl.w	r9, r9, fp
 8000748:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800074c:	4d38      	ldr	r5, [pc, #224]	; (8000830 <HAL_GPIO_Init+0x1ac>)
 800074e:	42a8      	cmp	r0, r5
 8000750:	d063      	beq.n	800081a <HAL_GPIO_Init+0x196>
 8000752:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000756:	42a8      	cmp	r0, r5
 8000758:	d061      	beq.n	800081e <HAL_GPIO_Init+0x19a>
 800075a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800075e:	42a8      	cmp	r0, r5
 8000760:	d05f      	beq.n	8000822 <HAL_GPIO_Init+0x19e>
 8000762:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000766:	42a8      	cmp	r0, r5
 8000768:	bf0c      	ite	eq
 800076a:	2503      	moveq	r5, #3
 800076c:	2504      	movne	r5, #4
 800076e:	fa05 f50b 	lsl.w	r5, r5, fp
 8000772:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8000776:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 800077a:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800077c:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000780:	bf14      	ite	ne
 8000782:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000784:	4395      	biceq	r5, r2
 8000786:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8000788:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800078a:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800078e:	bf14      	ite	ne
 8000790:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000792:	4395      	biceq	r5, r2
 8000794:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8000796:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000798:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 800079c:	bf14      	ite	ne
 800079e:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80007a0:	4395      	biceq	r5, r2
 80007a2:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 80007a4:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007a6:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80007aa:	bf14      	ite	ne
 80007ac:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80007ae:	ea25 0202 	biceq.w	r2, r5, r2
 80007b2:	60da      	str	r2, [r3, #12]
	position++;
 80007b4:	3601      	adds	r6, #1
 80007b6:	e76e      	b.n	8000696 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 80007b8:	2d03      	cmp	r5, #3
 80007ba:	d022      	beq.n	8000802 <HAL_GPIO_Init+0x17e>
 80007bc:	2d11      	cmp	r5, #17
 80007be:	d189      	bne.n	80006d4 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80007c0:	68cc      	ldr	r4, [r1, #12]
 80007c2:	3404      	adds	r4, #4
          break;
 80007c4:	e786      	b.n	80006d4 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 80007c6:	4f1b      	ldr	r7, [pc, #108]	; (8000834 <HAL_GPIO_Init+0x1b0>)
 80007c8:	42bd      	cmp	r5, r7
 80007ca:	d009      	beq.n	80007e0 <HAL_GPIO_Init+0x15c>
 80007cc:	d812      	bhi.n	80007f4 <HAL_GPIO_Init+0x170>
 80007ce:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8000840 <HAL_GPIO_Init+0x1bc>
 80007d2:	454d      	cmp	r5, r9
 80007d4:	d004      	beq.n	80007e0 <HAL_GPIO_Init+0x15c>
 80007d6:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80007da:	454d      	cmp	r5, r9
 80007dc:	f47f af7a 	bne.w	80006d4 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80007e0:	688c      	ldr	r4, [r1, #8]
 80007e2:	b1c4      	cbz	r4, 8000816 <HAL_GPIO_Init+0x192>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80007e4:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 80007e6:	bf0c      	ite	eq
 80007e8:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80007ec:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80007f0:	2408      	movs	r4, #8
 80007f2:	e76f      	b.n	80006d4 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 80007f4:	4575      	cmp	r5, lr
 80007f6:	d0f3      	beq.n	80007e0 <HAL_GPIO_Init+0x15c>
 80007f8:	4565      	cmp	r5, ip
 80007fa:	d0f1      	beq.n	80007e0 <HAL_GPIO_Init+0x15c>
 80007fc:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000844 <HAL_GPIO_Init+0x1c0>
 8000800:	e7eb      	b.n	80007da <HAL_GPIO_Init+0x156>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000802:	2400      	movs	r4, #0
 8000804:	e766      	b.n	80006d4 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000806:	68cc      	ldr	r4, [r1, #12]
          break;
 8000808:	e764      	b.n	80006d4 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800080a:	68cc      	ldr	r4, [r1, #12]
 800080c:	3408      	adds	r4, #8
          break;
 800080e:	e761      	b.n	80006d4 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000810:	68cc      	ldr	r4, [r1, #12]
 8000812:	340c      	adds	r4, #12
          break;
 8000814:	e75e      	b.n	80006d4 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000816:	2404      	movs	r4, #4
 8000818:	e75c      	b.n	80006d4 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800081a:	2500      	movs	r5, #0
 800081c:	e7a7      	b.n	800076e <HAL_GPIO_Init+0xea>
 800081e:	2501      	movs	r5, #1
 8000820:	e7a5      	b.n	800076e <HAL_GPIO_Init+0xea>
 8000822:	2502      	movs	r5, #2
 8000824:	e7a3      	b.n	800076e <HAL_GPIO_Init+0xea>
 8000826:	bf00      	nop
 8000828:	40010400 	.word	0x40010400
 800082c:	40021000 	.word	0x40021000
 8000830:	40010800 	.word	0x40010800
 8000834:	10210000 	.word	0x10210000
 8000838:	10310000 	.word	0x10310000
 800083c:	10320000 	.word	0x10320000
 8000840:	10110000 	.word	0x10110000
 8000844:	10220000 	.word	0x10220000

08000848 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000848:	b10a      	cbz	r2, 800084e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800084a:	6101      	str	r1, [r0, #16]
 800084c:	4770      	bx	lr
 800084e:	0409      	lsls	r1, r1, #16
 8000850:	e7fb      	b.n	800084a <HAL_GPIO_WritePin+0x2>
	...

08000854 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000854:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000858:	4605      	mov	r5, r0
 800085a:	b908      	cbnz	r0, 8000860 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 800085c:	2001      	movs	r0, #1
 800085e:	e03c      	b.n	80008da <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000860:	6803      	ldr	r3, [r0, #0]
 8000862:	07db      	lsls	r3, r3, #31
 8000864:	d410      	bmi.n	8000888 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000866:	682b      	ldr	r3, [r5, #0]
 8000868:	079f      	lsls	r7, r3, #30
 800086a:	d45d      	bmi.n	8000928 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800086c:	682b      	ldr	r3, [r5, #0]
 800086e:	0719      	lsls	r1, r3, #28
 8000870:	f100 8094 	bmi.w	800099c <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000874:	682b      	ldr	r3, [r5, #0]
 8000876:	075a      	lsls	r2, r3, #29
 8000878:	f100 80be 	bmi.w	80009f8 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800087c:	69e8      	ldr	r0, [r5, #28]
 800087e:	2800      	cmp	r0, #0
 8000880:	f040 812c 	bne.w	8000adc <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 8000884:	2000      	movs	r0, #0
 8000886:	e028      	b.n	80008da <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000888:	4c8f      	ldr	r4, [pc, #572]	; (8000ac8 <HAL_RCC_OscConfig+0x274>)
 800088a:	6863      	ldr	r3, [r4, #4]
 800088c:	f003 030c 	and.w	r3, r3, #12
 8000890:	2b04      	cmp	r3, #4
 8000892:	d007      	beq.n	80008a4 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000894:	6863      	ldr	r3, [r4, #4]
 8000896:	f003 030c 	and.w	r3, r3, #12
 800089a:	2b08      	cmp	r3, #8
 800089c:	d109      	bne.n	80008b2 <HAL_RCC_OscConfig+0x5e>
 800089e:	6863      	ldr	r3, [r4, #4]
 80008a0:	03de      	lsls	r6, r3, #15
 80008a2:	d506      	bpl.n	80008b2 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008a4:	6823      	ldr	r3, [r4, #0]
 80008a6:	039c      	lsls	r4, r3, #14
 80008a8:	d5dd      	bpl.n	8000866 <HAL_RCC_OscConfig+0x12>
 80008aa:	686b      	ldr	r3, [r5, #4]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d1da      	bne.n	8000866 <HAL_RCC_OscConfig+0x12>
 80008b0:	e7d4      	b.n	800085c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008b2:	686b      	ldr	r3, [r5, #4]
 80008b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008b8:	d112      	bne.n	80008e0 <HAL_RCC_OscConfig+0x8c>
 80008ba:	6823      	ldr	r3, [r4, #0]
 80008bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008c0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80008c2:	f7ff fc85 	bl	80001d0 <HAL_GetTick>
 80008c6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008c8:	6823      	ldr	r3, [r4, #0]
 80008ca:	0398      	lsls	r0, r3, #14
 80008cc:	d4cb      	bmi.n	8000866 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80008ce:	f7ff fc7f 	bl	80001d0 <HAL_GetTick>
 80008d2:	1b80      	subs	r0, r0, r6
 80008d4:	2864      	cmp	r0, #100	; 0x64
 80008d6:	d9f7      	bls.n	80008c8 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80008d8:	2003      	movs	r0, #3
}
 80008da:	b002      	add	sp, #8
 80008dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008e0:	b99b      	cbnz	r3, 800090a <HAL_RCC_OscConfig+0xb6>
 80008e2:	6823      	ldr	r3, [r4, #0]
 80008e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008e8:	6023      	str	r3, [r4, #0]
 80008ea:	6823      	ldr	r3, [r4, #0]
 80008ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008f0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80008f2:	f7ff fc6d 	bl	80001d0 <HAL_GetTick>
 80008f6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008f8:	6823      	ldr	r3, [r4, #0]
 80008fa:	0399      	lsls	r1, r3, #14
 80008fc:	d5b3      	bpl.n	8000866 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80008fe:	f7ff fc67 	bl	80001d0 <HAL_GetTick>
 8000902:	1b80      	subs	r0, r0, r6
 8000904:	2864      	cmp	r0, #100	; 0x64
 8000906:	d9f7      	bls.n	80008f8 <HAL_RCC_OscConfig+0xa4>
 8000908:	e7e6      	b.n	80008d8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800090a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800090e:	6823      	ldr	r3, [r4, #0]
 8000910:	d103      	bne.n	800091a <HAL_RCC_OscConfig+0xc6>
 8000912:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000916:	6023      	str	r3, [r4, #0]
 8000918:	e7cf      	b.n	80008ba <HAL_RCC_OscConfig+0x66>
 800091a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800091e:	6023      	str	r3, [r4, #0]
 8000920:	6823      	ldr	r3, [r4, #0]
 8000922:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000926:	e7cb      	b.n	80008c0 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000928:	4c67      	ldr	r4, [pc, #412]	; (8000ac8 <HAL_RCC_OscConfig+0x274>)
 800092a:	6863      	ldr	r3, [r4, #4]
 800092c:	f013 0f0c 	tst.w	r3, #12
 8000930:	d007      	beq.n	8000942 <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000932:	6863      	ldr	r3, [r4, #4]
 8000934:	f003 030c 	and.w	r3, r3, #12
 8000938:	2b08      	cmp	r3, #8
 800093a:	d110      	bne.n	800095e <HAL_RCC_OscConfig+0x10a>
 800093c:	6863      	ldr	r3, [r4, #4]
 800093e:	03da      	lsls	r2, r3, #15
 8000940:	d40d      	bmi.n	800095e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000942:	6823      	ldr	r3, [r4, #0]
 8000944:	079b      	lsls	r3, r3, #30
 8000946:	d502      	bpl.n	800094e <HAL_RCC_OscConfig+0xfa>
 8000948:	692b      	ldr	r3, [r5, #16]
 800094a:	2b01      	cmp	r3, #1
 800094c:	d186      	bne.n	800085c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800094e:	6823      	ldr	r3, [r4, #0]
 8000950:	696a      	ldr	r2, [r5, #20]
 8000952:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000956:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800095a:	6023      	str	r3, [r4, #0]
 800095c:	e786      	b.n	800086c <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800095e:	692a      	ldr	r2, [r5, #16]
 8000960:	4b5a      	ldr	r3, [pc, #360]	; (8000acc <HAL_RCC_OscConfig+0x278>)
 8000962:	b16a      	cbz	r2, 8000980 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8000964:	2201      	movs	r2, #1
 8000966:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000968:	f7ff fc32 	bl	80001d0 <HAL_GetTick>
 800096c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800096e:	6823      	ldr	r3, [r4, #0]
 8000970:	079f      	lsls	r7, r3, #30
 8000972:	d4ec      	bmi.n	800094e <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000974:	f7ff fc2c 	bl	80001d0 <HAL_GetTick>
 8000978:	1b80      	subs	r0, r0, r6
 800097a:	2802      	cmp	r0, #2
 800097c:	d9f7      	bls.n	800096e <HAL_RCC_OscConfig+0x11a>
 800097e:	e7ab      	b.n	80008d8 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000980:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000982:	f7ff fc25 	bl	80001d0 <HAL_GetTick>
 8000986:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000988:	6823      	ldr	r3, [r4, #0]
 800098a:	0798      	lsls	r0, r3, #30
 800098c:	f57f af6e 	bpl.w	800086c <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000990:	f7ff fc1e 	bl	80001d0 <HAL_GetTick>
 8000994:	1b80      	subs	r0, r0, r6
 8000996:	2802      	cmp	r0, #2
 8000998:	d9f6      	bls.n	8000988 <HAL_RCC_OscConfig+0x134>
 800099a:	e79d      	b.n	80008d8 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800099c:	69aa      	ldr	r2, [r5, #24]
 800099e:	4c4a      	ldr	r4, [pc, #296]	; (8000ac8 <HAL_RCC_OscConfig+0x274>)
 80009a0:	4b4b      	ldr	r3, [pc, #300]	; (8000ad0 <HAL_RCC_OscConfig+0x27c>)
 80009a2:	b1da      	cbz	r2, 80009dc <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 80009a4:	2201      	movs	r2, #1
 80009a6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80009a8:	f7ff fc12 	bl	80001d0 <HAL_GetTick>
 80009ac:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80009b0:	079b      	lsls	r3, r3, #30
 80009b2:	d50d      	bpl.n	80009d0 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80009b4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80009b8:	4b46      	ldr	r3, [pc, #280]	; (8000ad4 <HAL_RCC_OscConfig+0x280>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80009c0:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80009c2:	bf00      	nop
  }
  while (Delay --);
 80009c4:	9b01      	ldr	r3, [sp, #4]
 80009c6:	1e5a      	subs	r2, r3, #1
 80009c8:	9201      	str	r2, [sp, #4]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d1f9      	bne.n	80009c2 <HAL_RCC_OscConfig+0x16e>
 80009ce:	e751      	b.n	8000874 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80009d0:	f7ff fbfe 	bl	80001d0 <HAL_GetTick>
 80009d4:	1b80      	subs	r0, r0, r6
 80009d6:	2802      	cmp	r0, #2
 80009d8:	d9e9      	bls.n	80009ae <HAL_RCC_OscConfig+0x15a>
 80009da:	e77d      	b.n	80008d8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 80009dc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80009de:	f7ff fbf7 	bl	80001d0 <HAL_GetTick>
 80009e2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80009e6:	079f      	lsls	r7, r3, #30
 80009e8:	f57f af44 	bpl.w	8000874 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80009ec:	f7ff fbf0 	bl	80001d0 <HAL_GetTick>
 80009f0:	1b80      	subs	r0, r0, r6
 80009f2:	2802      	cmp	r0, #2
 80009f4:	d9f6      	bls.n	80009e4 <HAL_RCC_OscConfig+0x190>
 80009f6:	e76f      	b.n	80008d8 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009f8:	4c33      	ldr	r4, [pc, #204]	; (8000ac8 <HAL_RCC_OscConfig+0x274>)
 80009fa:	69e3      	ldr	r3, [r4, #28]
 80009fc:	00d8      	lsls	r0, r3, #3
 80009fe:	d424      	bmi.n	8000a4a <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8000a00:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a02:	69e3      	ldr	r3, [r4, #28]
 8000a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a08:	61e3      	str	r3, [r4, #28]
 8000a0a:	69e3      	ldr	r3, [r4, #28]
 8000a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a10:	9300      	str	r3, [sp, #0]
 8000a12:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a14:	4e30      	ldr	r6, [pc, #192]	; (8000ad8 <HAL_RCC_OscConfig+0x284>)
 8000a16:	6833      	ldr	r3, [r6, #0]
 8000a18:	05d9      	lsls	r1, r3, #23
 8000a1a:	d518      	bpl.n	8000a4e <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a1c:	68eb      	ldr	r3, [r5, #12]
 8000a1e:	2b01      	cmp	r3, #1
 8000a20:	d126      	bne.n	8000a70 <HAL_RCC_OscConfig+0x21c>
 8000a22:	6a23      	ldr	r3, [r4, #32]
 8000a24:	f043 0301 	orr.w	r3, r3, #1
 8000a28:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000a2a:	f7ff fbd1 	bl	80001d0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000a2e:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000a32:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a34:	6a23      	ldr	r3, [r4, #32]
 8000a36:	079b      	lsls	r3, r3, #30
 8000a38:	d53f      	bpl.n	8000aba <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 8000a3a:	2f00      	cmp	r7, #0
 8000a3c:	f43f af1e 	beq.w	800087c <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000a40:	69e3      	ldr	r3, [r4, #28]
 8000a42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000a46:	61e3      	str	r3, [r4, #28]
 8000a48:	e718      	b.n	800087c <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8000a4a:	2700      	movs	r7, #0
 8000a4c:	e7e2      	b.n	8000a14 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a4e:	6833      	ldr	r3, [r6, #0]
 8000a50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a54:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000a56:	f7ff fbbb 	bl	80001d0 <HAL_GetTick>
 8000a5a:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a5c:	6833      	ldr	r3, [r6, #0]
 8000a5e:	05da      	lsls	r2, r3, #23
 8000a60:	d4dc      	bmi.n	8000a1c <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a62:	f7ff fbb5 	bl	80001d0 <HAL_GetTick>
 8000a66:	eba0 0008 	sub.w	r0, r0, r8
 8000a6a:	2864      	cmp	r0, #100	; 0x64
 8000a6c:	d9f6      	bls.n	8000a5c <HAL_RCC_OscConfig+0x208>
 8000a6e:	e733      	b.n	80008d8 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a70:	b9ab      	cbnz	r3, 8000a9e <HAL_RCC_OscConfig+0x24a>
 8000a72:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000a74:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a78:	f023 0301 	bic.w	r3, r3, #1
 8000a7c:	6223      	str	r3, [r4, #32]
 8000a7e:	6a23      	ldr	r3, [r4, #32]
 8000a80:	f023 0304 	bic.w	r3, r3, #4
 8000a84:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000a86:	f7ff fba3 	bl	80001d0 <HAL_GetTick>
 8000a8a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a8c:	6a23      	ldr	r3, [r4, #32]
 8000a8e:	0798      	lsls	r0, r3, #30
 8000a90:	d5d3      	bpl.n	8000a3a <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000a92:	f7ff fb9d 	bl	80001d0 <HAL_GetTick>
 8000a96:	1b80      	subs	r0, r0, r6
 8000a98:	4540      	cmp	r0, r8
 8000a9a:	d9f7      	bls.n	8000a8c <HAL_RCC_OscConfig+0x238>
 8000a9c:	e71c      	b.n	80008d8 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a9e:	2b05      	cmp	r3, #5
 8000aa0:	6a23      	ldr	r3, [r4, #32]
 8000aa2:	d103      	bne.n	8000aac <HAL_RCC_OscConfig+0x258>
 8000aa4:	f043 0304 	orr.w	r3, r3, #4
 8000aa8:	6223      	str	r3, [r4, #32]
 8000aaa:	e7ba      	b.n	8000a22 <HAL_RCC_OscConfig+0x1ce>
 8000aac:	f023 0301 	bic.w	r3, r3, #1
 8000ab0:	6223      	str	r3, [r4, #32]
 8000ab2:	6a23      	ldr	r3, [r4, #32]
 8000ab4:	f023 0304 	bic.w	r3, r3, #4
 8000ab8:	e7b6      	b.n	8000a28 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000aba:	f7ff fb89 	bl	80001d0 <HAL_GetTick>
 8000abe:	eba0 0008 	sub.w	r0, r0, r8
 8000ac2:	42b0      	cmp	r0, r6
 8000ac4:	d9b6      	bls.n	8000a34 <HAL_RCC_OscConfig+0x1e0>
 8000ac6:	e707      	b.n	80008d8 <HAL_RCC_OscConfig+0x84>
 8000ac8:	40021000 	.word	0x40021000
 8000acc:	42420000 	.word	0x42420000
 8000ad0:	42420480 	.word	0x42420480
 8000ad4:	20000008 	.word	0x20000008
 8000ad8:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000adc:	4b2a      	ldr	r3, [pc, #168]	; (8000b88 <HAL_RCC_OscConfig+0x334>)
 8000ade:	685a      	ldr	r2, [r3, #4]
 8000ae0:	461c      	mov	r4, r3
 8000ae2:	f002 020c 	and.w	r2, r2, #12
 8000ae6:	2a08      	cmp	r2, #8
 8000ae8:	d03d      	beq.n	8000b66 <HAL_RCC_OscConfig+0x312>
 8000aea:	2300      	movs	r3, #0
 8000aec:	4e27      	ldr	r6, [pc, #156]	; (8000b8c <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000aee:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000af0:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000af2:	d12b      	bne.n	8000b4c <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8000af4:	f7ff fb6c 	bl	80001d0 <HAL_GetTick>
 8000af8:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000afa:	6823      	ldr	r3, [r4, #0]
 8000afc:	0199      	lsls	r1, r3, #6
 8000afe:	d41f      	bmi.n	8000b40 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000b00:	6a2b      	ldr	r3, [r5, #32]
 8000b02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b06:	d105      	bne.n	8000b14 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000b08:	6862      	ldr	r2, [r4, #4]
 8000b0a:	68a9      	ldr	r1, [r5, #8]
 8000b0c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000b10:	430a      	orrs	r2, r1
 8000b12:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000b14:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000b16:	6862      	ldr	r2, [r4, #4]
 8000b18:	430b      	orrs	r3, r1
 8000b1a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000b22:	2301      	movs	r3, #1
 8000b24:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000b26:	f7ff fb53 	bl	80001d0 <HAL_GetTick>
 8000b2a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000b2c:	6823      	ldr	r3, [r4, #0]
 8000b2e:	019a      	lsls	r2, r3, #6
 8000b30:	f53f aea8 	bmi.w	8000884 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000b34:	f7ff fb4c 	bl	80001d0 <HAL_GetTick>
 8000b38:	1b40      	subs	r0, r0, r5
 8000b3a:	2802      	cmp	r0, #2
 8000b3c:	d9f6      	bls.n	8000b2c <HAL_RCC_OscConfig+0x2d8>
 8000b3e:	e6cb      	b.n	80008d8 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000b40:	f7ff fb46 	bl	80001d0 <HAL_GetTick>
 8000b44:	1bc0      	subs	r0, r0, r7
 8000b46:	2802      	cmp	r0, #2
 8000b48:	d9d7      	bls.n	8000afa <HAL_RCC_OscConfig+0x2a6>
 8000b4a:	e6c5      	b.n	80008d8 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000b4c:	f7ff fb40 	bl	80001d0 <HAL_GetTick>
 8000b50:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b52:	6823      	ldr	r3, [r4, #0]
 8000b54:	019b      	lsls	r3, r3, #6
 8000b56:	f57f ae95 	bpl.w	8000884 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000b5a:	f7ff fb39 	bl	80001d0 <HAL_GetTick>
 8000b5e:	1b40      	subs	r0, r0, r5
 8000b60:	2802      	cmp	r0, #2
 8000b62:	d9f6      	bls.n	8000b52 <HAL_RCC_OscConfig+0x2fe>
 8000b64:	e6b8      	b.n	80008d8 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000b66:	2801      	cmp	r0, #1
 8000b68:	f43f aeb7 	beq.w	80008da <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8000b6c:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000b6e:	6a2b      	ldr	r3, [r5, #32]
 8000b70:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8000b74:	429a      	cmp	r2, r3
 8000b76:	f47f ae71 	bne.w	800085c <HAL_RCC_OscConfig+0x8>
 8000b7a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000b7c:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8000b80:	1ac0      	subs	r0, r0, r3
 8000b82:	bf18      	it	ne
 8000b84:	2001      	movne	r0, #1
 8000b86:	e6a8      	b.n	80008da <HAL_RCC_OscConfig+0x86>
 8000b88:	40021000 	.word	0x40021000
 8000b8c:	42420060 	.word	0x42420060

08000b90 <HAL_RCC_GetSysClockFreq>:
{
 8000b90:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000b92:	4b19      	ldr	r3, [pc, #100]	; (8000bf8 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000b94:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000b96:	ac02      	add	r4, sp, #8
 8000b98:	f103 0510 	add.w	r5, r3, #16
 8000b9c:	4622      	mov	r2, r4
 8000b9e:	6818      	ldr	r0, [r3, #0]
 8000ba0:	6859      	ldr	r1, [r3, #4]
 8000ba2:	3308      	adds	r3, #8
 8000ba4:	c203      	stmia	r2!, {r0, r1}
 8000ba6:	42ab      	cmp	r3, r5
 8000ba8:	4614      	mov	r4, r2
 8000baa:	d1f7      	bne.n	8000b9c <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000bac:	2301      	movs	r3, #1
 8000bae:	f88d 3004 	strb.w	r3, [sp, #4]
 8000bb2:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000bb4:	4911      	ldr	r1, [pc, #68]	; (8000bfc <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000bb6:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8000bba:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000bbc:	f003 020c 	and.w	r2, r3, #12
 8000bc0:	2a08      	cmp	r2, #8
 8000bc2:	d117      	bne.n	8000bf4 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000bc4:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000bc8:	a806      	add	r0, sp, #24
 8000bca:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000bcc:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000bce:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000bd2:	d50c      	bpl.n	8000bee <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000bd4:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000bd6:	480a      	ldr	r0, [pc, #40]	; (8000c00 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000bd8:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000bdc:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000bde:	aa06      	add	r2, sp, #24
 8000be0:	4413      	add	r3, r2
 8000be2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000be6:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000bea:	b007      	add	sp, #28
 8000bec:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000bee:	4805      	ldr	r0, [pc, #20]	; (8000c04 <HAL_RCC_GetSysClockFreq+0x74>)
 8000bf0:	4350      	muls	r0, r2
 8000bf2:	e7fa      	b.n	8000bea <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000bf4:	4802      	ldr	r0, [pc, #8]	; (8000c00 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8000bf6:	e7f8      	b.n	8000bea <HAL_RCC_GetSysClockFreq+0x5a>
 8000bf8:	08001350 	.word	0x08001350
 8000bfc:	40021000 	.word	0x40021000
 8000c00:	007a1200 	.word	0x007a1200
 8000c04:	003d0900 	.word	0x003d0900

08000c08 <HAL_RCC_ClockConfig>:
{
 8000c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c0c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8000c0e:	4604      	mov	r4, r0
 8000c10:	b910      	cbnz	r0, 8000c18 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000c12:	2001      	movs	r0, #1
 8000c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000c18:	4a45      	ldr	r2, [pc, #276]	; (8000d30 <HAL_RCC_ClockConfig+0x128>)
 8000c1a:	6813      	ldr	r3, [r2, #0]
 8000c1c:	f003 0307 	and.w	r3, r3, #7
 8000c20:	428b      	cmp	r3, r1
 8000c22:	d329      	bcc.n	8000c78 <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c24:	6821      	ldr	r1, [r4, #0]
 8000c26:	078e      	lsls	r6, r1, #30
 8000c28:	d431      	bmi.n	8000c8e <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c2a:	07ca      	lsls	r2, r1, #31
 8000c2c:	d444      	bmi.n	8000cb8 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000c2e:	4a40      	ldr	r2, [pc, #256]	; (8000d30 <HAL_RCC_ClockConfig+0x128>)
 8000c30:	6813      	ldr	r3, [r2, #0]
 8000c32:	f003 0307 	and.w	r3, r3, #7
 8000c36:	429d      	cmp	r5, r3
 8000c38:	d367      	bcc.n	8000d0a <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c3a:	6822      	ldr	r2, [r4, #0]
 8000c3c:	4d3d      	ldr	r5, [pc, #244]	; (8000d34 <HAL_RCC_ClockConfig+0x12c>)
 8000c3e:	f012 0f04 	tst.w	r2, #4
 8000c42:	d16e      	bne.n	8000d22 <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c44:	0713      	lsls	r3, r2, #28
 8000c46:	d506      	bpl.n	8000c56 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000c48:	686b      	ldr	r3, [r5, #4]
 8000c4a:	6922      	ldr	r2, [r4, #16]
 8000c4c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000c50:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000c54:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000c56:	f7ff ff9b 	bl	8000b90 <HAL_RCC_GetSysClockFreq>
 8000c5a:	686b      	ldr	r3, [r5, #4]
 8000c5c:	4a36      	ldr	r2, [pc, #216]	; (8000d38 <HAL_RCC_ClockConfig+0x130>)
 8000c5e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000c62:	5cd3      	ldrb	r3, [r2, r3]
 8000c64:	40d8      	lsrs	r0, r3
 8000c66:	4b35      	ldr	r3, [pc, #212]	; (8000d3c <HAL_RCC_ClockConfig+0x134>)
 8000c68:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8000c6a:	4b35      	ldr	r3, [pc, #212]	; (8000d40 <HAL_RCC_ClockConfig+0x138>)
 8000c6c:	6818      	ldr	r0, [r3, #0]
 8000c6e:	f7ff fa6d 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8000c72:	2000      	movs	r0, #0
 8000c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c78:	6813      	ldr	r3, [r2, #0]
 8000c7a:	f023 0307 	bic.w	r3, r3, #7
 8000c7e:	430b      	orrs	r3, r1
 8000c80:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c82:	6813      	ldr	r3, [r2, #0]
 8000c84:	f003 0307 	and.w	r3, r3, #7
 8000c88:	4299      	cmp	r1, r3
 8000c8a:	d1c2      	bne.n	8000c12 <HAL_RCC_ClockConfig+0xa>
 8000c8c:	e7ca      	b.n	8000c24 <HAL_RCC_ClockConfig+0x1c>
 8000c8e:	4b29      	ldr	r3, [pc, #164]	; (8000d34 <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c90:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000c94:	bf1e      	ittt	ne
 8000c96:	685a      	ldrne	r2, [r3, #4]
 8000c98:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8000c9c:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c9e:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000ca0:	bf42      	ittt	mi
 8000ca2:	685a      	ldrmi	r2, [r3, #4]
 8000ca4:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8000ca8:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000caa:	685a      	ldr	r2, [r3, #4]
 8000cac:	68a0      	ldr	r0, [r4, #8]
 8000cae:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000cb2:	4302      	orrs	r2, r0
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	e7b8      	b.n	8000c2a <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000cb8:	6862      	ldr	r2, [r4, #4]
 8000cba:	4e1e      	ldr	r6, [pc, #120]	; (8000d34 <HAL_RCC_ClockConfig+0x12c>)
 8000cbc:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cbe:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000cc0:	d11b      	bne.n	8000cfa <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cc2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cc6:	d0a4      	beq.n	8000c12 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000cc8:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cca:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000cce:	f023 0303 	bic.w	r3, r3, #3
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000cd6:	f7ff fa7b 	bl	80001d0 <HAL_GetTick>
 8000cda:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000cdc:	6873      	ldr	r3, [r6, #4]
 8000cde:	6862      	ldr	r2, [r4, #4]
 8000ce0:	f003 030c 	and.w	r3, r3, #12
 8000ce4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000ce8:	d0a1      	beq.n	8000c2e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cea:	f7ff fa71 	bl	80001d0 <HAL_GetTick>
 8000cee:	1bc0      	subs	r0, r0, r7
 8000cf0:	4540      	cmp	r0, r8
 8000cf2:	d9f3      	bls.n	8000cdc <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8000cf4:	2003      	movs	r0, #3
}
 8000cf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000cfa:	2a02      	cmp	r2, #2
 8000cfc:	d102      	bne.n	8000d04 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cfe:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000d02:	e7e0      	b.n	8000cc6 <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d04:	f013 0f02 	tst.w	r3, #2
 8000d08:	e7dd      	b.n	8000cc6 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d0a:	6813      	ldr	r3, [r2, #0]
 8000d0c:	f023 0307 	bic.w	r3, r3, #7
 8000d10:	432b      	orrs	r3, r5
 8000d12:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d14:	6813      	ldr	r3, [r2, #0]
 8000d16:	f003 0307 	and.w	r3, r3, #7
 8000d1a:	429d      	cmp	r5, r3
 8000d1c:	f47f af79 	bne.w	8000c12 <HAL_RCC_ClockConfig+0xa>
 8000d20:	e78b      	b.n	8000c3a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d22:	686b      	ldr	r3, [r5, #4]
 8000d24:	68e1      	ldr	r1, [r4, #12]
 8000d26:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000d2a:	430b      	orrs	r3, r1
 8000d2c:	606b      	str	r3, [r5, #4]
 8000d2e:	e789      	b.n	8000c44 <HAL_RCC_ClockConfig+0x3c>
 8000d30:	40022000 	.word	0x40022000
 8000d34:	40021000 	.word	0x40021000
 8000d38:	08001360 	.word	0x08001360
 8000d3c:	20000008 	.word	0x20000008
 8000d40:	20000004 	.word	0x20000004

08000d44 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000d44:	4b04      	ldr	r3, [pc, #16]	; (8000d58 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000d46:	4a05      	ldr	r2, [pc, #20]	; (8000d5c <HAL_RCC_GetPCLK1Freq+0x18>)
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000d4e:	5cd3      	ldrb	r3, [r2, r3]
 8000d50:	4a03      	ldr	r2, [pc, #12]	; (8000d60 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000d52:	6810      	ldr	r0, [r2, #0]
}
 8000d54:	40d8      	lsrs	r0, r3
 8000d56:	4770      	bx	lr
 8000d58:	40021000 	.word	0x40021000
 8000d5c:	08001370 	.word	0x08001370
 8000d60:	20000008 	.word	0x20000008

08000d64 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000d64:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000d66:	4a05      	ldr	r2, [pc, #20]	; (8000d7c <HAL_RCC_GetPCLK2Freq+0x18>)
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000d6e:	5cd3      	ldrb	r3, [r2, r3]
 8000d70:	4a03      	ldr	r2, [pc, #12]	; (8000d80 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000d72:	6810      	ldr	r0, [r2, #0]
}
 8000d74:	40d8      	lsrs	r0, r3
 8000d76:	4770      	bx	lr
 8000d78:	40021000 	.word	0x40021000
 8000d7c:	08001370 	.word	0x08001370
 8000d80:	20000008 	.word	0x20000008

08000d84 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000d84:	6803      	ldr	r3, [r0, #0]
{
 8000d86:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000d8a:	07d9      	lsls	r1, r3, #31
{
 8000d8c:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000d8e:	d520      	bpl.n	8000dd2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d90:	4c35      	ldr	r4, [pc, #212]	; (8000e68 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8000d92:	69e3      	ldr	r3, [r4, #28]
 8000d94:	00da      	lsls	r2, r3, #3
 8000d96:	d432      	bmi.n	8000dfe <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8000d98:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d9a:	69e3      	ldr	r3, [r4, #28]
 8000d9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da0:	61e3      	str	r3, [r4, #28]
 8000da2:	69e3      	ldr	r3, [r4, #28]
 8000da4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da8:	9301      	str	r3, [sp, #4]
 8000daa:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dac:	4e2f      	ldr	r6, [pc, #188]	; (8000e6c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8000dae:	6833      	ldr	r3, [r6, #0]
 8000db0:	05db      	lsls	r3, r3, #23
 8000db2:	d526      	bpl.n	8000e02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000db4:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000db6:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8000dba:	d136      	bne.n	8000e2a <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000dbc:	6a23      	ldr	r3, [r4, #32]
 8000dbe:	686a      	ldr	r2, [r5, #4]
 8000dc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000dc8:	b11f      	cbz	r7, 8000dd2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000dca:	69e3      	ldr	r3, [r4, #28]
 8000dcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000dd0:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8000dd2:	6828      	ldr	r0, [r5, #0]
 8000dd4:	0783      	lsls	r3, r0, #30
 8000dd6:	d506      	bpl.n	8000de6 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8000dd8:	4a23      	ldr	r2, [pc, #140]	; (8000e68 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8000dda:	68a9      	ldr	r1, [r5, #8]
 8000ddc:	6853      	ldr	r3, [r2, #4]
 8000dde:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000de2:	430b      	orrs	r3, r1
 8000de4:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8000de6:	f010 0010 	ands.w	r0, r0, #16
 8000dea:	d01b      	beq.n	8000e24 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8000dec:	4a1e      	ldr	r2, [pc, #120]	; (8000e68 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8000dee:	68e9      	ldr	r1, [r5, #12]
 8000df0:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8000df2:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8000df4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000df8:	430b      	orrs	r3, r1
 8000dfa:	6053      	str	r3, [r2, #4]
 8000dfc:	e012      	b.n	8000e24 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8000dfe:	2700      	movs	r7, #0
 8000e00:	e7d4      	b.n	8000dac <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e02:	6833      	ldr	r3, [r6, #0]
 8000e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e08:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000e0a:	f7ff f9e1 	bl	80001d0 <HAL_GetTick>
 8000e0e:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e10:	6833      	ldr	r3, [r6, #0]
 8000e12:	05d8      	lsls	r0, r3, #23
 8000e14:	d4ce      	bmi.n	8000db4 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e16:	f7ff f9db 	bl	80001d0 <HAL_GetTick>
 8000e1a:	eba0 0008 	sub.w	r0, r0, r8
 8000e1e:	2864      	cmp	r0, #100	; 0x64
 8000e20:	d9f6      	bls.n	8000e10 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8000e22:	2003      	movs	r0, #3
}
 8000e24:	b002      	add	sp, #8
 8000e26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000e2a:	686a      	ldr	r2, [r5, #4]
 8000e2c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d0c3      	beq.n	8000dbc <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8000e34:	2001      	movs	r0, #1
 8000e36:	4a0e      	ldr	r2, [pc, #56]	; (8000e70 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000e38:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8000e3a:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000e3c:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000e3e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000e42:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8000e44:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000e46:	07d9      	lsls	r1, r3, #31
 8000e48:	d5b8      	bpl.n	8000dbc <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8000e4a:	f7ff f9c1 	bl	80001d0 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e4e:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8000e52:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e54:	6a23      	ldr	r3, [r4, #32]
 8000e56:	079a      	lsls	r2, r3, #30
 8000e58:	d4b0      	bmi.n	8000dbc <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e5a:	f7ff f9b9 	bl	80001d0 <HAL_GetTick>
 8000e5e:	1b80      	subs	r0, r0, r6
 8000e60:	4540      	cmp	r0, r8
 8000e62:	d9f7      	bls.n	8000e54 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8000e64:	e7dd      	b.n	8000e22 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8000e66:	bf00      	nop
 8000e68:	40021000 	.word	0x40021000
 8000e6c:	40007000 	.word	0x40007000
 8000e70:	42420440 	.word	0x42420440

08000e74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000e74:	b538      	push	{r3, r4, r5, lr}
 8000e76:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000e78:	6803      	ldr	r3, [r0, #0]
 8000e7a:	68c1      	ldr	r1, [r0, #12]
 8000e7c:	691a      	ldr	r2, [r3, #16]
 8000e7e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000e82:	430a      	orrs	r2, r1
 8000e84:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000e86:	6882      	ldr	r2, [r0, #8]
 8000e88:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8000e8a:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000e8c:	4302      	orrs	r2, r0
 8000e8e:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8000e90:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8000e94:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000e98:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8000e9a:	430a      	orrs	r2, r1
 8000e9c:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000e9e:	695a      	ldr	r2, [r3, #20]
 8000ea0:	69a1      	ldr	r1, [r4, #24]
 8000ea2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000ea6:	430a      	orrs	r2, r1
 8000ea8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8000eaa:	4a0e      	ldr	r2, [pc, #56]	; (8000ee4 <UART_SetConfig+0x70>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d115      	bne.n	8000edc <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8000eb0:	f7ff ff58 	bl	8000d64 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8000eb4:	2319      	movs	r3, #25
 8000eb6:	4358      	muls	r0, r3
 8000eb8:	6863      	ldr	r3, [r4, #4]
 8000eba:	2264      	movs	r2, #100	; 0x64
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ec2:	fbb0 f1f2 	udiv	r1, r0, r2
 8000ec6:	fb02 0311 	mls	r3, r2, r1, r0
 8000eca:	011b      	lsls	r3, r3, #4
 8000ecc:	3332      	adds	r3, #50	; 0x32
 8000ece:	fbb3 f3f2 	udiv	r3, r3, r2
 8000ed2:	6825      	ldr	r5, [r4, #0]
 8000ed4:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8000ed8:	60ab      	str	r3, [r5, #8]
 8000eda:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8000edc:	f7ff ff32 	bl	8000d44 <HAL_RCC_GetPCLK1Freq>
 8000ee0:	e7e8      	b.n	8000eb4 <UART_SetConfig+0x40>
 8000ee2:	bf00      	nop
 8000ee4:	40013800 	.word	0x40013800

08000ee8 <HAL_UART_Init>:
{
 8000ee8:	b510      	push	{r4, lr}
  if (huart == NULL)
 8000eea:	4604      	mov	r4, r0
 8000eec:	b340      	cbz	r0, 8000f40 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8000eee:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000ef2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000ef6:	b91b      	cbnz	r3, 8000f00 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8000ef8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8000efc:	f000 f97e 	bl	80011fc <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8000f00:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8000f02:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8000f04:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8000f08:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8000f0a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8000f0c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000f10:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8000f12:	f7ff ffaf 	bl	8000e74 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000f16:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000f18:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000f1a:	691a      	ldr	r2, [r3, #16]
 8000f1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000f20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000f22:	695a      	ldr	r2, [r3, #20]
 8000f24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000f28:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8000f2a:	68da      	ldr	r2, [r3, #12]
 8000f2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000f30:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8000f32:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000f34:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8000f36:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8000f3a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8000f3e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000f40:	2001      	movs	r0, #1
}
 8000f42:	bd10      	pop	{r4, pc}

08000f44 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f44:	2228      	movs	r2, #40	; 0x28
{
 8000f46:	b570      	push	{r4, r5, r6, lr}
 8000f48:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f4a:	eb0d 0002 	add.w	r0, sp, r2
 8000f4e:	2100      	movs	r1, #0
 8000f50:	f000 f9ea 	bl	8001328 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f54:	2214      	movs	r2, #20
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f56:	2610      	movs	r6, #16
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f58:	eb0d 0002 	add.w	r0, sp, r2
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	f000 f9e3 	bl	8001328 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f62:	4632      	mov	r2, r6
 8000f64:	2100      	movs	r1, #0
 8000f66:	a801      	add	r0, sp, #4
 8000f68:	f000 f9de 	bl	8001328 <memset>

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f6c:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f6e:	2501      	movs	r5, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f70:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f74:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f76:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f78:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f7a:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f7c:	960f      	str	r6, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f7e:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f80:	f7ff fc68 	bl	8000854 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f84:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f86:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f8a:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f8c:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f8e:	4629      	mov	r1, r5
 8000f90:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f92:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f94:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f96:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f98:	9406      	str	r4, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f9a:	f7ff fe35 	bl	8000c08 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8000f9e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fa2:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000fa4:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8000fa6:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fa8:	f7ff feec 	bl	8000d84 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8000fac:	b014      	add	sp, #80	; 0x50
 8000fae:	bd70      	pop	{r4, r5, r6, pc}

08000fb0 <main>:
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b088      	sub	sp, #32
  HAL_Init();
 8000fb4:	f7ff f8ee 	bl	8000194 <HAL_Init>
  SystemClock_Config();
 8000fb8:	f7ff ffc4 	bl	8000f44 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	2210      	movs	r2, #16

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fbe:	4d51      	ldr	r5, [pc, #324]	; (8001104 <main+0x154>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	eb0d 0002 	add.w	r0, sp, r2
 8000fc6:	f000 f9af 	bl	8001328 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fca:	69ab      	ldr	r3, [r5, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BRAKE_LIGHT_RELAY_Pin|FAN_RELAY_Pin|PUMP_RELAY_Pin|EVMS_RELAY_Pin, GPIO_PIN_RESET);
 8000fcc:	2200      	movs	r2, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fce:	f043 0310 	orr.w	r3, r3, #16
 8000fd2:	61ab      	str	r3, [r5, #24]
 8000fd4:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOA, BRAKE_LIGHT_RELAY_Pin|FAN_RELAY_Pin|PUMP_RELAY_Pin|EVMS_RELAY_Pin, GPIO_PIN_RESET);
 8000fd6:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fda:	f003 0310 	and.w	r3, r3, #16
 8000fde:	9300      	str	r3, [sp, #0]
 8000fe0:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fe2:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOA, BRAKE_LIGHT_RELAY_Pin|FAN_RELAY_Pin|PUMP_RELAY_Pin|EVMS_RELAY_Pin, GPIO_PIN_RESET);
 8000fe4:	4848      	ldr	r0, [pc, #288]	; (8001108 <main+0x158>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fe6:	f043 0320 	orr.w	r3, r3, #32
 8000fea:	61ab      	str	r3, [r5, #24]
 8000fec:	69ab      	ldr	r3, [r5, #24]

  /*Configure GPIO pins : BSPD_FB_Pin BSPD_RELAY_FB_Pin IMD_FB_Pin IMD_RELAY_FB_Pin */
  GPIO_InitStruct.Pin = BSPD_FB_Pin|BSPD_RELAY_FB_Pin|IMD_FB_Pin|IMD_RELAY_FB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fee:	2400      	movs	r4, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ff0:	f003 0320 	and.w	r3, r3, #32
 8000ff4:	9301      	str	r3, [sp, #4]
 8000ff6:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff8:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : BMS_FB_Pin */
  GPIO_InitStruct.Pin = BMS_FB_Pin;
 8000ffa:	f44f 7980 	mov.w	r9, #256	; 0x100
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffe:	f043 0304 	orr.w	r3, r3, #4
 8001002:	61ab      	str	r3, [r5, #24]
 8001004:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BMS_FB_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : BRAKE_LIGHT_RELAY_Pin FAN_RELAY_Pin PUMP_RELAY_Pin EVMS_RELAY_Pin */
  GPIO_InitStruct.Pin = BRAKE_LIGHT_RELAY_Pin|FAN_RELAY_Pin|PUMP_RELAY_Pin|EVMS_RELAY_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001006:	2701      	movs	r7, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001008:	f003 0304 	and.w	r3, r3, #4
 800100c:	9302      	str	r3, [sp, #8]
 800100e:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001010:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001012:	f04f 0802 	mov.w	r8, #2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001016:	f043 0308 	orr.w	r3, r3, #8
 800101a:	61ab      	str	r3, [r5, #24]
 800101c:	69ab      	ldr	r3, [r5, #24]
  hadc1.Instance = ADC1;
 800101e:	4e3b      	ldr	r6, [pc, #236]	; (800110c <main+0x15c>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001020:	f003 0308 	and.w	r3, r3, #8
 8001024:	9303      	str	r3, [sp, #12]
 8001026:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, BRAKE_LIGHT_RELAY_Pin|FAN_RELAY_Pin|PUMP_RELAY_Pin|EVMS_RELAY_Pin, GPIO_PIN_RESET);
 8001028:	f7ff fc0e 	bl	8000848 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = BSPD_FB_Pin|BSPD_RELAY_FB_Pin|IMD_FB_Pin|IMD_RELAY_FB_Pin;
 800102c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001030:	a904      	add	r1, sp, #16
 8001032:	4837      	ldr	r0, [pc, #220]	; (8001110 <main+0x160>)
  GPIO_InitStruct.Pin = BSPD_FB_Pin|BSPD_RELAY_FB_Pin|IMD_FB_Pin|IMD_RELAY_FB_Pin;
 8001034:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001036:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800103a:	f7ff fb23 	bl	8000684 <HAL_GPIO_Init>
  HAL_GPIO_Init(BMS_FB_GPIO_Port, &GPIO_InitStruct);
 800103e:	a904      	add	r1, sp, #16
 8001040:	4831      	ldr	r0, [pc, #196]	; (8001108 <main+0x158>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001042:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = BMS_FB_Pin;
 8001046:	f8cd 9010 	str.w	r9, [sp, #16]
  HAL_GPIO_Init(BMS_FB_GPIO_Port, &GPIO_InitStruct);
 800104a:	f7ff fb1b 	bl	8000684 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BRAKE_LIGHT_RELAY_Pin|FAN_RELAY_Pin|PUMP_RELAY_Pin|EVMS_RELAY_Pin;
 800104e:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001052:	a904      	add	r1, sp, #16
 8001054:	482c      	ldr	r0, [pc, #176]	; (8001108 <main+0x158>)
  GPIO_InitStruct.Pin = BRAKE_LIGHT_RELAY_Pin|FAN_RELAY_Pin|PUMP_RELAY_Pin|EVMS_RELAY_Pin;
 8001056:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105a:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105c:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001060:	f7ff fb10 	bl	8000684 <HAL_GPIO_Init>
  hadc1.Instance = ADC1;
 8001064:	4b2b      	ldr	r3, [pc, #172]	; (8001114 <main+0x164>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001066:	4630      	mov	r0, r6
  hadc1.Instance = ADC1;
 8001068:	6033      	str	r3, [r6, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800106a:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  ADC_ChannelConfTypeDef sConfig = {0};
 800106e:	9404      	str	r4, [sp, #16]
 8001070:	9405      	str	r4, [sp, #20]
 8001072:	9406      	str	r4, [sp, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001074:	7334      	strb	r4, [r6, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001076:	7534      	strb	r4, [r6, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001078:	61f3      	str	r3, [r6, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800107a:	6074      	str	r4, [r6, #4]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800107c:	f8c6 9008 	str.w	r9, [r6, #8]
  hadc1.Init.NbrOfConversion = 2;
 8001080:	f8c6 8010 	str.w	r8, [r6, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001084:	f7ff f950 	bl	8000328 <HAL_ADC_Init>
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8001088:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800108a:	a904      	add	r1, sp, #16
 800108c:	4630      	mov	r0, r6
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 800108e:	9306      	str	r3, [sp, #24]
  sConfig.Channel = ADC_CHANNEL_0;
 8001090:	9404      	str	r4, [sp, #16]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001092:	9705      	str	r7, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001094:	f7ff f8a2 	bl	80001dc <HAL_ADC_ConfigChannel>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001098:	a904      	add	r1, sp, #16
 800109a:	4630      	mov	r0, r6
  sConfig.Channel = ADC_CHANNEL_1;
 800109c:	9704      	str	r7, [sp, #16]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800109e:	f8cd 8014 	str.w	r8, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010a2:	f7ff f89b 	bl	80001dc <HAL_ADC_ConfigChannel>
  huart2.Init.BaudRate = 9600;
 80010a6:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  huart2.Instance = USART2;
 80010aa:	481b      	ldr	r0, [pc, #108]	; (8001118 <main+0x168>)
  huart2.Init.BaudRate = 9600;
 80010ac:	4a1b      	ldr	r2, [pc, #108]	; (800111c <main+0x16c>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010ae:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 9600;
 80010b0:	e880 000c 	stmia.w	r0, {r2, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010b4:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010b6:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010b8:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010ba:	6143      	str	r3, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010bc:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010be:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010c0:	f7ff ff12 	bl	8000ee8 <HAL_UART_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010c4:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80010c6:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010c8:	433b      	orrs	r3, r7
 80010ca:	616b      	str	r3, [r5, #20]
 80010cc:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80010ce:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010d0:	403b      	ands	r3, r7
 80010d2:	9304      	str	r3, [sp, #16]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80010d4:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010d6:	9b04      	ldr	r3, [sp, #16]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80010d8:	f7ff f9b8 	bl	800044c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80010dc:	200b      	movs	r0, #11
 80010de:	f7ff f9e9 	bl	80004b4 <HAL_NVIC_EnableIRQ>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 80010e2:	463a      	mov	r2, r7
 80010e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010e8:	4807      	ldr	r0, [pc, #28]	; (8001108 <main+0x158>)
 80010ea:	f7ff fbad 	bl	8000848 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 80010ee:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80010f2:	f504 3484 	add.w	r4, r4, #67584	; 0x10800
 80010f6:	2201      	movs	r2, #1
 80010f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010fc:	4620      	mov	r0, r4
 80010fe:	f7ff fba3 	bl	8000848 <HAL_GPIO_WritePin>
 8001102:	e7f8      	b.n	80010f6 <main+0x146>
 8001104:	40021000 	.word	0x40021000
 8001108:	40010800 	.word	0x40010800
 800110c:	20000030 	.word	0x20000030
 8001110:	40010c00 	.word	0x40010c00
 8001114:	40012400 	.word	0x40012400
 8001118:	200000a4 	.word	0x200000a4
 800111c:	40004400 	.word	0x40004400

08001120 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001120:	4770      	bx	lr
	...

08001124 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001124:	4b0e      	ldr	r3, [pc, #56]	; (8001160 <HAL_MspInit+0x3c>)
{
 8001126:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001128:	699a      	ldr	r2, [r3, #24]
 800112a:	f042 0201 	orr.w	r2, r2, #1
 800112e:	619a      	str	r2, [r3, #24]
 8001130:	699a      	ldr	r2, [r3, #24]
 8001132:	f002 0201 	and.w	r2, r2, #1
 8001136:	9200      	str	r2, [sp, #0]
 8001138:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800113a:	69da      	ldr	r2, [r3, #28]
 800113c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001140:	61da      	str	r2, [r3, #28]
 8001142:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001144:	4a07      	ldr	r2, [pc, #28]	; (8001164 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800114a:	9301      	str	r3, [sp, #4]
 800114c:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800114e:	6853      	ldr	r3, [r2, #4]
 8001150:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001154:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001158:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800115a:	b002      	add	sp, #8
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	40021000 	.word	0x40021000
 8001164:	40010000 	.word	0x40010000

08001168 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001168:	b530      	push	{r4, r5, lr}
 800116a:	4605      	mov	r5, r0
 800116c:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116e:	2210      	movs	r2, #16
 8001170:	2100      	movs	r1, #0
 8001172:	a802      	add	r0, sp, #8
 8001174:	f000 f8d8 	bl	8001328 <memset>
  if(hadc->Instance==ADC1)
 8001178:	682a      	ldr	r2, [r5, #0]
 800117a:	4b1c      	ldr	r3, [pc, #112]	; (80011ec <HAL_ADC_MspInit+0x84>)
 800117c:	429a      	cmp	r2, r3
 800117e:	d133      	bne.n	80011e8 <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001180:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8001184:	699a      	ldr	r2, [r3, #24]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = BREAKES_ANGLE_Pin|BRAKES_PRESSURE_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001186:	481a      	ldr	r0, [pc, #104]	; (80011f0 <HAL_ADC_MspInit+0x88>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001188:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800118c:	619a      	str	r2, [r3, #24]
 800118e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001190:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001192:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001196:	9200      	str	r2, [sp, #0]
 8001198:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800119a:	699a      	ldr	r2, [r3, #24]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800119c:	4c15      	ldr	r4, [pc, #84]	; (80011f4 <HAL_ADC_MspInit+0x8c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800119e:	f042 0204 	orr.w	r2, r2, #4
 80011a2:	619a      	str	r2, [r3, #24]
 80011a4:	699b      	ldr	r3, [r3, #24]
 80011a6:	f003 0304 	and.w	r3, r3, #4
 80011aa:	9301      	str	r3, [sp, #4]
 80011ac:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = BREAKES_ANGLE_Pin|BRAKES_PRESSURE_Pin;
 80011ae:	2303      	movs	r3, #3
 80011b0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011b2:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b4:	f7ff fa66 	bl	8000684 <HAL_GPIO_Init>
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011b8:	2280      	movs	r2, #128	; 0x80
 80011ba:	60e2      	str	r2, [r4, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011c0:	6122      	str	r2, [r4, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_adc1.Instance = DMA1_Channel1;
 80011c6:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <HAL_ADC_MspInit+0x90>)
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011c8:	6162      	str	r2, [r4, #20]
    hdma_adc1.Instance = DMA1_Channel1;
 80011ca:	6023      	str	r3, [r4, #0]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80011cc:	2220      	movs	r2, #32
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011ce:	2300      	movs	r3, #0
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011d0:	4620      	mov	r0, r4
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011d2:	6063      	str	r3, [r4, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011d4:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80011d6:	61a2      	str	r2, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80011d8:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011da:	f7ff f98f 	bl	80004fc <HAL_DMA_Init>
 80011de:	b108      	cbz	r0, 80011e4 <HAL_ADC_MspInit+0x7c>
    {
      Error_Handler();
 80011e0:	f7ff ff9e 	bl	8001120 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80011e4:	622c      	str	r4, [r5, #32]
 80011e6:	6265      	str	r5, [r4, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80011e8:	b007      	add	sp, #28
 80011ea:	bd30      	pop	{r4, r5, pc}
 80011ec:	40012400 	.word	0x40012400
 80011f0:	40010800 	.word	0x40010800
 80011f4:	20000060 	.word	0x20000060
 80011f8:	40020008 	.word	0x40020008

080011fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011fc:	b510      	push	{r4, lr}
 80011fe:	4604      	mov	r4, r0
 8001200:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001202:	2210      	movs	r2, #16
 8001204:	2100      	movs	r1, #0
 8001206:	a802      	add	r0, sp, #8
 8001208:	f000 f88e 	bl	8001328 <memset>
  if(huart->Instance==USART2)
 800120c:	6822      	ldr	r2, [r4, #0]
 800120e:	4b16      	ldr	r3, [pc, #88]	; (8001268 <HAL_UART_MspInit+0x6c>)
 8001210:	429a      	cmp	r2, r3
 8001212:	d126      	bne.n	8001262 <HAL_UART_MspInit+0x66>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001214:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8001218:	69da      	ldr	r2, [r3, #28]
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121a:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 800121c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001220:	61da      	str	r2, [r3, #28]
 8001222:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001224:	4811      	ldr	r0, [pc, #68]	; (800126c <HAL_UART_MspInit+0x70>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001226:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800122a:	9200      	str	r2, [sp, #0]
 800122c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800122e:	699a      	ldr	r2, [r3, #24]
 8001230:	f042 0204 	orr.w	r2, r2, #4
 8001234:	619a      	str	r2, [r3, #24]
 8001236:	699b      	ldr	r3, [r3, #24]
 8001238:	f003 0304 	and.w	r3, r3, #4
 800123c:	9301      	str	r3, [sp, #4]
 800123e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001240:	2304      	movs	r3, #4
 8001242:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001244:	2302      	movs	r3, #2
 8001246:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001248:	2303      	movs	r3, #3
 800124a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124c:	f7ff fa1a 	bl	8000684 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001250:	2308      	movs	r3, #8
 8001252:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001254:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001256:	a902      	add	r1, sp, #8
 8001258:	4804      	ldr	r0, [pc, #16]	; (800126c <HAL_UART_MspInit+0x70>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800125a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125e:	f7ff fa11 	bl	8000684 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001262:	b006      	add	sp, #24
 8001264:	bd10      	pop	{r4, pc}
 8001266:	bf00      	nop
 8001268:	40004400 	.word	0x40004400
 800126c:	40010800 	.word	0x40010800

08001270 <NMI_Handler>:
 8001270:	4770      	bx	lr

08001272 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001272:	e7fe      	b.n	8001272 <HardFault_Handler>

08001274 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001274:	e7fe      	b.n	8001274 <MemManage_Handler>

08001276 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001276:	e7fe      	b.n	8001276 <BusFault_Handler>

08001278 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001278:	e7fe      	b.n	8001278 <UsageFault_Handler>

0800127a <SVC_Handler>:
 800127a:	4770      	bx	lr

0800127c <DebugMon_Handler>:
 800127c:	4770      	bx	lr

0800127e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800127e:	4770      	bx	lr

08001280 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001280:	f7fe bf9a 	b.w	80001b8 <HAL_IncTick>

08001284 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001284:	4801      	ldr	r0, [pc, #4]	; (800128c <DMA1_Channel1_IRQHandler+0x8>)
 8001286:	f7ff b969 	b.w	800055c <HAL_DMA_IRQHandler>
 800128a:	bf00      	nop
 800128c:	20000060 	.word	0x20000060

08001290 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001290:	4770      	bx	lr
	...

08001294 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001294:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001296:	e003      	b.n	80012a0 <LoopCopyDataInit>

08001298 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001298:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800129a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800129c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800129e:	3104      	adds	r1, #4

080012a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80012a0:	480a      	ldr	r0, [pc, #40]	; (80012cc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80012a2:	4b0b      	ldr	r3, [pc, #44]	; (80012d0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80012a4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80012a6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80012a8:	d3f6      	bcc.n	8001298 <CopyDataInit>
  ldr r2, =_sbss
 80012aa:	4a0a      	ldr	r2, [pc, #40]	; (80012d4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80012ac:	e002      	b.n	80012b4 <LoopFillZerobss>

080012ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80012ae:	2300      	movs	r3, #0
  str r3, [r2], #4
 80012b0:	f842 3b04 	str.w	r3, [r2], #4

080012b4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80012b4:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80012b6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80012b8:	d3f9      	bcc.n	80012ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012ba:	f7ff ffe9 	bl	8001290 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012be:	f000 f80f 	bl	80012e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012c2:	f7ff fe75 	bl	8000fb0 <main>
  bx lr
 80012c6:	4770      	bx	lr
  ldr r3, =_sidata
 80012c8:	08001380 	.word	0x08001380
  ldr r0, =_sdata
 80012cc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80012d0:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80012d4:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80012d8:	200000e4 	.word	0x200000e4

080012dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012dc:	e7fe      	b.n	80012dc <ADC1_2_IRQHandler>
	...

080012e0 <__libc_init_array>:
 80012e0:	b570      	push	{r4, r5, r6, lr}
 80012e2:	2500      	movs	r5, #0
 80012e4:	4e0c      	ldr	r6, [pc, #48]	; (8001318 <__libc_init_array+0x38>)
 80012e6:	4c0d      	ldr	r4, [pc, #52]	; (800131c <__libc_init_array+0x3c>)
 80012e8:	1ba4      	subs	r4, r4, r6
 80012ea:	10a4      	asrs	r4, r4, #2
 80012ec:	42a5      	cmp	r5, r4
 80012ee:	d109      	bne.n	8001304 <__libc_init_array+0x24>
 80012f0:	f000 f822 	bl	8001338 <_init>
 80012f4:	2500      	movs	r5, #0
 80012f6:	4e0a      	ldr	r6, [pc, #40]	; (8001320 <__libc_init_array+0x40>)
 80012f8:	4c0a      	ldr	r4, [pc, #40]	; (8001324 <__libc_init_array+0x44>)
 80012fa:	1ba4      	subs	r4, r4, r6
 80012fc:	10a4      	asrs	r4, r4, #2
 80012fe:	42a5      	cmp	r5, r4
 8001300:	d105      	bne.n	800130e <__libc_init_array+0x2e>
 8001302:	bd70      	pop	{r4, r5, r6, pc}
 8001304:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001308:	4798      	blx	r3
 800130a:	3501      	adds	r5, #1
 800130c:	e7ee      	b.n	80012ec <__libc_init_array+0xc>
 800130e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001312:	4798      	blx	r3
 8001314:	3501      	adds	r5, #1
 8001316:	e7f2      	b.n	80012fe <__libc_init_array+0x1e>
 8001318:	08001378 	.word	0x08001378
 800131c:	08001378 	.word	0x08001378
 8001320:	08001378 	.word	0x08001378
 8001324:	0800137c 	.word	0x0800137c

08001328 <memset>:
 8001328:	4603      	mov	r3, r0
 800132a:	4402      	add	r2, r0
 800132c:	4293      	cmp	r3, r2
 800132e:	d100      	bne.n	8001332 <memset+0xa>
 8001330:	4770      	bx	lr
 8001332:	f803 1b01 	strb.w	r1, [r3], #1
 8001336:	e7f9      	b.n	800132c <memset+0x4>

08001338 <_init>:
 8001338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800133a:	bf00      	nop
 800133c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800133e:	bc08      	pop	{r3}
 8001340:	469e      	mov	lr, r3
 8001342:	4770      	bx	lr

08001344 <_fini>:
 8001344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001346:	bf00      	nop
 8001348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800134a:	bc08      	pop	{r3}
 800134c:	469e      	mov	lr, r3
 800134e:	4770      	bx	lr
