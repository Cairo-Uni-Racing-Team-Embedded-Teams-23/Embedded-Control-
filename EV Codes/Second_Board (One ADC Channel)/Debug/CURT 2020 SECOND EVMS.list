
CURT 2020 SECOND EVMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027d4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080028e0  080028e0  000128e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002920  08002920  00012920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002924  08002924  00012924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08002928  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000dc  2000000c  08002934  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200000e8  08002934  000200e8  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00008340  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000019f0  00000000  00000000  00028375  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000868  00000000  00000000  00029d68  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000780  00000000  00000000  0002a5d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000042b2  00000000  00000000  0002ad50  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000026c7  00000000  00000000  0002f002  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  000316c9  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002068  00000000  00000000  00031748  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080028c8 	.word	0x080028c8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080028c8 	.word	0x080028c8

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4a08      	ldr	r2, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000154:	681b      	ldr	r3, [r3, #0]
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 fdef 	bl	8000d40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f002 fa3e 	bl	80025e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 fe07 	bl	8000daa <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295
 80001b4:	f000 fdcf 	bl	8000d56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	2000002c 	.word	0x2000002c

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	2000002c 	.word	0x2000002c

08000210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000218:	f7ff fff0 	bl	80001fc <HAL_GetTick>
 800021c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000228:	d005      	beq.n	8000236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800022a:	4b09      	ldr	r3, [pc, #36]	; (8000250 <HAL_Delay+0x40>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	461a      	mov	r2, r3
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	4413      	add	r3, r2
 8000234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000236:	bf00      	nop
 8000238:	f7ff ffe0 	bl	80001fc <HAL_GetTick>
 800023c:	4602      	mov	r2, r0
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	1ad2      	subs	r2, r2, r3
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	429a      	cmp	r2, r3
 8000246:	d3f7      	bcc.n	8000238 <HAL_Delay+0x28>
  {
  }
}
 8000248:	bf00      	nop
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000004 	.word	0x20000004

08000254 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b086      	sub	sp, #24
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800025c:	2300      	movs	r3, #0
 800025e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000260:	2300      	movs	r3, #0
 8000262:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000264:	2300      	movs	r3, #0
 8000266:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000268:	2300      	movs	r3, #0
 800026a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	2b00      	cmp	r3, #0
 8000270:	d101      	bne.n	8000276 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000272:	2301      	movs	r3, #1
 8000274:	e0be      	b.n	80003f4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	689b      	ldr	r3, [r3, #8]
 800027a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000280:	2b00      	cmp	r3, #0
 8000282:	d109      	bne.n	8000298 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	2200      	movs	r2, #0
 8000288:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	2200      	movs	r2, #0
 800028e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000292:	6878      	ldr	r0, [r7, #4]
 8000294:	f002 f9da 	bl	800264c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000298:	6878      	ldr	r0, [r7, #4]
 800029a:	f000 fbb1 	bl	8000a00 <ADC_ConversionStop_Disable>
 800029e:	4603      	mov	r3, r0
 80002a0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002a6:	f003 0310 	and.w	r3, r3, #16
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8099 	bne.w	80003e2 <HAL_ADC_Init+0x18e>
 80002b0:	7dfb      	ldrb	r3, [r7, #23]
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	f040 8095 	bne.w	80003e2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002bc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80002c0:	f023 0302 	bic.w	r3, r3, #2
 80002c4:	f043 0202 	orr.w	r2, r3, #2
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80002d4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	7b1b      	ldrb	r3, [r3, #12]
 80002da:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80002dc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80002de:	68ba      	ldr	r2, [r7, #8]
 80002e0:	4313      	orrs	r3, r2
 80002e2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	689b      	ldr	r3, [r3, #8]
 80002e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80002ec:	d003      	beq.n	80002f6 <HAL_ADC_Init+0xa2>
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	689b      	ldr	r3, [r3, #8]
 80002f2:	2b01      	cmp	r3, #1
 80002f4:	d102      	bne.n	80002fc <HAL_ADC_Init+0xa8>
 80002f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002fa:	e000      	b.n	80002fe <HAL_ADC_Init+0xaa>
 80002fc:	2300      	movs	r3, #0
 80002fe:	693a      	ldr	r2, [r7, #16]
 8000300:	4313      	orrs	r3, r2
 8000302:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	7d1b      	ldrb	r3, [r3, #20]
 8000308:	2b01      	cmp	r3, #1
 800030a:	d119      	bne.n	8000340 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	7b1b      	ldrb	r3, [r3, #12]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d109      	bne.n	8000328 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	3b01      	subs	r3, #1
 800031a:	035a      	lsls	r2, r3, #13
 800031c:	693b      	ldr	r3, [r7, #16]
 800031e:	4313      	orrs	r3, r2
 8000320:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000324:	613b      	str	r3, [r7, #16]
 8000326:	e00b      	b.n	8000340 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800032c:	f043 0220 	orr.w	r2, r3, #32
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000338:	f043 0201 	orr.w	r2, r3, #1
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	687a      	ldr	r2, [r7, #4]
 8000346:	6812      	ldr	r2, [r2, #0]
 8000348:	6852      	ldr	r2, [r2, #4]
 800034a:	f422 4169 	bic.w	r1, r2, #59648	; 0xe900
 800034e:	693a      	ldr	r2, [r7, #16]
 8000350:	430a      	orrs	r2, r1
 8000352:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	681a      	ldr	r2, [r3, #0]
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	6899      	ldr	r1, [r3, #8]
 800035e:	4b27      	ldr	r3, [pc, #156]	; (80003fc <HAL_ADC_Init+0x1a8>)
 8000360:	400b      	ands	r3, r1
 8000362:	68b9      	ldr	r1, [r7, #8]
 8000364:	430b      	orrs	r3, r1
 8000366:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	689b      	ldr	r3, [r3, #8]
 800036c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000370:	d003      	beq.n	800037a <HAL_ADC_Init+0x126>
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	689b      	ldr	r3, [r3, #8]
 8000376:	2b01      	cmp	r3, #1
 8000378:	d104      	bne.n	8000384 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	691b      	ldr	r3, [r3, #16]
 800037e:	3b01      	subs	r3, #1
 8000380:	051b      	lsls	r3, r3, #20
 8000382:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	687a      	ldr	r2, [r7, #4]
 800038a:	6812      	ldr	r2, [r2, #0]
 800038c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800038e:	f422 0170 	bic.w	r1, r2, #15728640	; 0xf00000
 8000392:	68fa      	ldr	r2, [r7, #12]
 8000394:	430a      	orrs	r2, r1
 8000396:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	689a      	ldr	r2, [r3, #8]
 800039e:	4b18      	ldr	r3, [pc, #96]	; (8000400 <HAL_ADC_Init+0x1ac>)
 80003a0:	4013      	ands	r3, r2
 80003a2:	68ba      	ldr	r2, [r7, #8]
 80003a4:	4293      	cmp	r3, r2
 80003a6:	d10b      	bne.n	80003c0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	2200      	movs	r2, #0
 80003ac:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003b2:	f023 0303 	bic.w	r3, r3, #3
 80003b6:	f043 0201 	orr.w	r2, r3, #1
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80003be:	e018      	b.n	80003f2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003c4:	f023 0312 	bic.w	r3, r3, #18
 80003c8:	f043 0210 	orr.w	r2, r3, #16
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003d4:	f043 0201 	orr.w	r2, r3, #1
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80003dc:	2301      	movs	r3, #1
 80003de:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80003e0:	e007      	b.n	80003f2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003e6:	f043 0210 	orr.w	r2, r3, #16
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80003ee:	2301      	movs	r3, #1
 80003f0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80003f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80003f4:	4618      	mov	r0, r3
 80003f6:	3718      	adds	r7, #24
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	ffe1f7fd 	.word	0xffe1f7fd
 8000400:	ff1f0efe 	.word	0xff1f0efe

08000404 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b084      	sub	sp, #16
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800040c:	2300      	movs	r3, #0
 800040e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000416:	2b01      	cmp	r3, #1
 8000418:	d101      	bne.n	800041e <HAL_ADC_Start+0x1a>
 800041a:	2302      	movs	r3, #2
 800041c:	e098      	b.n	8000550 <HAL_ADC_Start+0x14c>
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	2201      	movs	r2, #1
 8000422:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000426:	6878      	ldr	r0, [r7, #4]
 8000428:	f000 fa98 	bl	800095c <ADC_Enable>
 800042c:	4603      	mov	r3, r0
 800042e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000430:	7bfb      	ldrb	r3, [r7, #15]
 8000432:	2b00      	cmp	r3, #0
 8000434:	f040 8087 	bne.w	8000546 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800043c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000440:	f023 0301 	bic.w	r3, r3, #1
 8000444:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a41      	ldr	r2, [pc, #260]	; (8000558 <HAL_ADC_Start+0x154>)
 8000452:	4293      	cmp	r3, r2
 8000454:	d105      	bne.n	8000462 <HAL_ADC_Start+0x5e>
 8000456:	4b41      	ldr	r3, [pc, #260]	; (800055c <HAL_ADC_Start+0x158>)
 8000458:	685b      	ldr	r3, [r3, #4]
 800045a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800045e:	2b00      	cmp	r3, #0
 8000460:	d115      	bne.n	800048e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000466:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	685b      	ldr	r3, [r3, #4]
 8000474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000478:	2b00      	cmp	r3, #0
 800047a:	d026      	beq.n	80004ca <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000480:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000484:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800048c:	e01d      	b.n	80004ca <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000492:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	4a2f      	ldr	r2, [pc, #188]	; (800055c <HAL_ADC_Start+0x158>)
 80004a0:	4293      	cmp	r3, r2
 80004a2:	d004      	beq.n	80004ae <HAL_ADC_Start+0xaa>
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4a2b      	ldr	r2, [pc, #172]	; (8000558 <HAL_ADC_Start+0x154>)
 80004aa:	4293      	cmp	r3, r2
 80004ac:	d10d      	bne.n	80004ca <HAL_ADC_Start+0xc6>
 80004ae:	4b2b      	ldr	r3, [pc, #172]	; (800055c <HAL_ADC_Start+0x158>)
 80004b0:	685b      	ldr	r3, [r3, #4]
 80004b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d007      	beq.n	80004ca <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004be:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80004c2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d006      	beq.n	80004e4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004da:	f023 0206 	bic.w	r2, r3, #6
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80004e2:	e002      	b.n	80004ea <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	2200      	movs	r2, #0
 80004e8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	2200      	movs	r2, #0
 80004ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	f06f 0202 	mvn.w	r2, #2
 80004fa:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	689b      	ldr	r3, [r3, #8]
 8000502:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000506:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800050a:	d113      	bne.n	8000534 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000510:	4a11      	ldr	r2, [pc, #68]	; (8000558 <HAL_ADC_Start+0x154>)
 8000512:	4293      	cmp	r3, r2
 8000514:	d105      	bne.n	8000522 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000516:	4b11      	ldr	r3, [pc, #68]	; (800055c <HAL_ADC_Start+0x158>)
 8000518:	685b      	ldr	r3, [r3, #4]
 800051a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800051e:	2b00      	cmp	r3, #0
 8000520:	d108      	bne.n	8000534 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	687a      	ldr	r2, [r7, #4]
 8000528:	6812      	ldr	r2, [r2, #0]
 800052a:	6892      	ldr	r2, [r2, #8]
 800052c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000530:	609a      	str	r2, [r3, #8]
 8000532:	e00c      	b.n	800054e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	687a      	ldr	r2, [r7, #4]
 800053a:	6812      	ldr	r2, [r2, #0]
 800053c:	6892      	ldr	r2, [r2, #8]
 800053e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	e003      	b.n	800054e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	2200      	movs	r2, #0
 800054a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800054e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000550:	4618      	mov	r0, r3
 8000552:	3710      	adds	r7, #16
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	40012800 	.word	0x40012800
 800055c:	40012400 	.word	0x40012400

08000560 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000560:	b590      	push	{r4, r7, lr}
 8000562:	b087      	sub	sp, #28
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
 8000568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800056a:	2300      	movs	r3, #0
 800056c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800056e:	2300      	movs	r3, #0
 8000570:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000572:	2300      	movs	r3, #0
 8000574:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000576:	f7ff fe41 	bl	80001fc <HAL_GetTick>
 800057a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	689b      	ldr	r3, [r3, #8]
 8000582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000586:	2b00      	cmp	r3, #0
 8000588:	d00b      	beq.n	80005a2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800058e:	f043 0220 	orr.w	r2, r3, #32
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	2200      	movs	r2, #0
 800059a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800059e:	2301      	movs	r3, #1
 80005a0:	e0c8      	b.n	8000734 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	685b      	ldr	r3, [r3, #4]
 80005a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d12a      	bne.n	8000606 <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005b6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d123      	bne.n	8000606 <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80005be:	e01a      	b.n	80005f6 <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005c6:	d016      	beq.n	80005f6 <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d007      	beq.n	80005de <HAL_ADC_PollForConversion+0x7e>
 80005ce:	f7ff fe15 	bl	80001fc <HAL_GetTick>
 80005d2:	4602      	mov	r2, r0
 80005d4:	697b      	ldr	r3, [r7, #20]
 80005d6:	1ad2      	subs	r2, r2, r3
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	429a      	cmp	r2, r3
 80005dc:	d90b      	bls.n	80005f6 <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005e2:	f043 0204 	orr.w	r2, r3, #4
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	2200      	movs	r2, #0
 80005ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 80005f2:	2303      	movs	r3, #3
 80005f4:	e09e      	b.n	8000734 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f003 0302 	and.w	r3, r3, #2
 8000600:	2b00      	cmp	r3, #0
 8000602:	d0dd      	beq.n	80005c0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000604:	e06c      	b.n	80006e0 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000606:	4b4d      	ldr	r3, [pc, #308]	; (800073c <HAL_ADC_PollForConversion+0x1dc>)
 8000608:	681c      	ldr	r4, [r3, #0]
 800060a:	2002      	movs	r0, #2
 800060c:	f001 fba2 	bl	8001d54 <HAL_RCCEx_GetPeriphCLKFreq>
 8000610:	4603      	mov	r3, r0
 8000612:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	6919      	ldr	r1, [r3, #16]
 800061c:	4b48      	ldr	r3, [pc, #288]	; (8000740 <HAL_ADC_PollForConversion+0x1e0>)
 800061e:	400b      	ands	r3, r1
 8000620:	2b00      	cmp	r3, #0
 8000622:	d118      	bne.n	8000656 <HAL_ADC_PollForConversion+0xf6>
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	68d9      	ldr	r1, [r3, #12]
 800062a:	4b46      	ldr	r3, [pc, #280]	; (8000744 <HAL_ADC_PollForConversion+0x1e4>)
 800062c:	400b      	ands	r3, r1
 800062e:	2b00      	cmp	r3, #0
 8000630:	d111      	bne.n	8000656 <HAL_ADC_PollForConversion+0xf6>
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	6919      	ldr	r1, [r3, #16]
 8000638:	4b43      	ldr	r3, [pc, #268]	; (8000748 <HAL_ADC_PollForConversion+0x1e8>)
 800063a:	400b      	ands	r3, r1
 800063c:	2b00      	cmp	r3, #0
 800063e:	d108      	bne.n	8000652 <HAL_ADC_PollForConversion+0xf2>
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	68d9      	ldr	r1, [r3, #12]
 8000646:	4b41      	ldr	r3, [pc, #260]	; (800074c <HAL_ADC_PollForConversion+0x1ec>)
 8000648:	400b      	ands	r3, r1
 800064a:	2b00      	cmp	r3, #0
 800064c:	d101      	bne.n	8000652 <HAL_ADC_PollForConversion+0xf2>
 800064e:	2314      	movs	r3, #20
 8000650:	e020      	b.n	8000694 <HAL_ADC_PollForConversion+0x134>
 8000652:	2329      	movs	r3, #41	; 0x29
 8000654:	e01e      	b.n	8000694 <HAL_ADC_PollForConversion+0x134>
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	6919      	ldr	r1, [r3, #16]
 800065c:	4b3a      	ldr	r3, [pc, #232]	; (8000748 <HAL_ADC_PollForConversion+0x1e8>)
 800065e:	400b      	ands	r3, r1
 8000660:	2b00      	cmp	r3, #0
 8000662:	d106      	bne.n	8000672 <HAL_ADC_PollForConversion+0x112>
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	68d9      	ldr	r1, [r3, #12]
 800066a:	4b38      	ldr	r3, [pc, #224]	; (800074c <HAL_ADC_PollForConversion+0x1ec>)
 800066c:	400b      	ands	r3, r1
 800066e:	2b00      	cmp	r3, #0
 8000670:	d00d      	beq.n	800068e <HAL_ADC_PollForConversion+0x12e>
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	6919      	ldr	r1, [r3, #16]
 8000678:	4b35      	ldr	r3, [pc, #212]	; (8000750 <HAL_ADC_PollForConversion+0x1f0>)
 800067a:	400b      	ands	r3, r1
 800067c:	2b00      	cmp	r3, #0
 800067e:	d108      	bne.n	8000692 <HAL_ADC_PollForConversion+0x132>
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	68d9      	ldr	r1, [r3, #12]
 8000686:	4b32      	ldr	r3, [pc, #200]	; (8000750 <HAL_ADC_PollForConversion+0x1f0>)
 8000688:	400b      	ands	r3, r1
 800068a:	2b00      	cmp	r3, #0
 800068c:	d101      	bne.n	8000692 <HAL_ADC_PollForConversion+0x132>
 800068e:	2354      	movs	r3, #84	; 0x54
 8000690:	e000      	b.n	8000694 <HAL_ADC_PollForConversion+0x134>
 8000692:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000694:	fb03 f302 	mul.w	r3, r3, r2
 8000698:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800069a:	e01d      	b.n	80006d8 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006a2:	d016      	beq.n	80006d2 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d007      	beq.n	80006ba <HAL_ADC_PollForConversion+0x15a>
 80006aa:	f7ff fda7 	bl	80001fc <HAL_GetTick>
 80006ae:	4602      	mov	r2, r0
 80006b0:	697b      	ldr	r3, [r7, #20]
 80006b2:	1ad2      	subs	r2, r2, r3
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	429a      	cmp	r2, r3
 80006b8:	d90b      	bls.n	80006d2 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006be:	f043 0204 	orr.w	r2, r3, #4
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	2200      	movs	r2, #0
 80006ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 80006ce:	2303      	movs	r3, #3
 80006d0:	e030      	b.n	8000734 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	3301      	adds	r3, #1
 80006d6:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80006d8:	68fa      	ldr	r2, [r7, #12]
 80006da:	693b      	ldr	r3, [r7, #16]
 80006dc:	429a      	cmp	r2, r3
 80006de:	d3dd      	bcc.n	800069c <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f06f 0212 	mvn.w	r2, #18
 80006e8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006ee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	689b      	ldr	r3, [r3, #8]
 80006fc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000700:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000704:	d115      	bne.n	8000732 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800070a:	2b00      	cmp	r3, #0
 800070c:	d111      	bne.n	8000732 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000712:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800071e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000722:	2b00      	cmp	r3, #0
 8000724:	d105      	bne.n	8000732 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800072a:	f043 0201 	orr.w	r2, r3, #1
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000732:	2300      	movs	r3, #0
}
 8000734:	4618      	mov	r0, r3
 8000736:	371c      	adds	r7, #28
 8000738:	46bd      	mov	sp, r7
 800073a:	bd90      	pop	{r4, r7, pc}
 800073c:	20000008 	.word	0x20000008
 8000740:	24924924 	.word	0x24924924
 8000744:	00924924 	.word	0x00924924
 8000748:	12492492 	.word	0x12492492
 800074c:	00492492 	.word	0x00492492
 8000750:	00249249 	.word	0x00249249

08000754 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000762:	4618      	mov	r0, r3
 8000764:	370c      	adds	r7, #12
 8000766:	46bd      	mov	sp, r7
 8000768:	bc80      	pop	{r7}
 800076a:	4770      	bx	lr

0800076c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800076c:	b490      	push	{r4, r7}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000776:	2300      	movs	r3, #0
 8000778:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800077a:	2300      	movs	r3, #0
 800077c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000784:	2b01      	cmp	r3, #1
 8000786:	d101      	bne.n	800078c <HAL_ADC_ConfigChannel+0x20>
 8000788:	2302      	movs	r3, #2
 800078a:	e0dc      	b.n	8000946 <HAL_ADC_ConfigChannel+0x1da>
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2201      	movs	r2, #1
 8000790:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	685b      	ldr	r3, [r3, #4]
 8000798:	2b06      	cmp	r3, #6
 800079a:	d81c      	bhi.n	80007d6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	6819      	ldr	r1, [r3, #0]
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	685a      	ldr	r2, [r3, #4]
 80007aa:	4613      	mov	r3, r2
 80007ac:	009b      	lsls	r3, r3, #2
 80007ae:	4413      	add	r3, r2
 80007b0:	3b05      	subs	r3, #5
 80007b2:	221f      	movs	r2, #31
 80007b4:	fa02 f303 	lsl.w	r3, r2, r3
 80007b8:	43db      	mvns	r3, r3
 80007ba:	4018      	ands	r0, r3
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	681c      	ldr	r4, [r3, #0]
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	685a      	ldr	r2, [r3, #4]
 80007c4:	4613      	mov	r3, r2
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	4413      	add	r3, r2
 80007ca:	3b05      	subs	r3, #5
 80007cc:	fa04 f303 	lsl.w	r3, r4, r3
 80007d0:	4303      	orrs	r3, r0
 80007d2:	634b      	str	r3, [r1, #52]	; 0x34
 80007d4:	e03c      	b.n	8000850 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	685b      	ldr	r3, [r3, #4]
 80007da:	2b0c      	cmp	r3, #12
 80007dc:	d81c      	bhi.n	8000818 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	6819      	ldr	r1, [r3, #0]
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	685a      	ldr	r2, [r3, #4]
 80007ec:	4613      	mov	r3, r2
 80007ee:	009b      	lsls	r3, r3, #2
 80007f0:	4413      	add	r3, r2
 80007f2:	3b23      	subs	r3, #35	; 0x23
 80007f4:	221f      	movs	r2, #31
 80007f6:	fa02 f303 	lsl.w	r3, r2, r3
 80007fa:	43db      	mvns	r3, r3
 80007fc:	4018      	ands	r0, r3
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	681c      	ldr	r4, [r3, #0]
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	685a      	ldr	r2, [r3, #4]
 8000806:	4613      	mov	r3, r2
 8000808:	009b      	lsls	r3, r3, #2
 800080a:	4413      	add	r3, r2
 800080c:	3b23      	subs	r3, #35	; 0x23
 800080e:	fa04 f303 	lsl.w	r3, r4, r3
 8000812:	4303      	orrs	r3, r0
 8000814:	630b      	str	r3, [r1, #48]	; 0x30
 8000816:	e01b      	b.n	8000850 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	6819      	ldr	r1, [r3, #0]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	685a      	ldr	r2, [r3, #4]
 8000826:	4613      	mov	r3, r2
 8000828:	009b      	lsls	r3, r3, #2
 800082a:	4413      	add	r3, r2
 800082c:	3b41      	subs	r3, #65	; 0x41
 800082e:	221f      	movs	r2, #31
 8000830:	fa02 f303 	lsl.w	r3, r2, r3
 8000834:	43db      	mvns	r3, r3
 8000836:	4018      	ands	r0, r3
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	681c      	ldr	r4, [r3, #0]
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	685a      	ldr	r2, [r3, #4]
 8000840:	4613      	mov	r3, r2
 8000842:	009b      	lsls	r3, r3, #2
 8000844:	4413      	add	r3, r2
 8000846:	3b41      	subs	r3, #65	; 0x41
 8000848:	fa04 f303 	lsl.w	r3, r4, r3
 800084c:	4303      	orrs	r3, r0
 800084e:	62cb      	str	r3, [r1, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	2b09      	cmp	r3, #9
 8000856:	d91c      	bls.n	8000892 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	6819      	ldr	r1, [r3, #0]
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	68d8      	ldr	r0, [r3, #12]
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	681a      	ldr	r2, [r3, #0]
 8000866:	4613      	mov	r3, r2
 8000868:	005b      	lsls	r3, r3, #1
 800086a:	4413      	add	r3, r2
 800086c:	3b1e      	subs	r3, #30
 800086e:	2207      	movs	r2, #7
 8000870:	fa02 f303 	lsl.w	r3, r2, r3
 8000874:	43db      	mvns	r3, r3
 8000876:	4018      	ands	r0, r3
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	689c      	ldr	r4, [r3, #8]
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	4613      	mov	r3, r2
 8000882:	005b      	lsls	r3, r3, #1
 8000884:	4413      	add	r3, r2
 8000886:	3b1e      	subs	r3, #30
 8000888:	fa04 f303 	lsl.w	r3, r4, r3
 800088c:	4303      	orrs	r3, r0
 800088e:	60cb      	str	r3, [r1, #12]
 8000890:	e019      	b.n	80008c6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	6819      	ldr	r1, [r3, #0]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	6918      	ldr	r0, [r3, #16]
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	681a      	ldr	r2, [r3, #0]
 80008a0:	4613      	mov	r3, r2
 80008a2:	005b      	lsls	r3, r3, #1
 80008a4:	4413      	add	r3, r2
 80008a6:	2207      	movs	r2, #7
 80008a8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ac:	43db      	mvns	r3, r3
 80008ae:	4018      	ands	r0, r3
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	689c      	ldr	r4, [r3, #8]
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	681a      	ldr	r2, [r3, #0]
 80008b8:	4613      	mov	r3, r2
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	4413      	add	r3, r2
 80008be:	fa04 f303 	lsl.w	r3, r4, r3
 80008c2:	4303      	orrs	r3, r0
 80008c4:	610b      	str	r3, [r1, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	2b10      	cmp	r3, #16
 80008cc:	d003      	beq.n	80008d6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80008d2:	2b11      	cmp	r3, #17
 80008d4:	d132      	bne.n	800093c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4a1d      	ldr	r2, [pc, #116]	; (8000950 <HAL_ADC_ConfigChannel+0x1e4>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	d125      	bne.n	800092c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	689b      	ldr	r3, [r3, #8]
 80008e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d126      	bne.n	800093c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	687a      	ldr	r2, [r7, #4]
 80008f4:	6812      	ldr	r2, [r2, #0]
 80008f6:	6892      	ldr	r2, [r2, #8]
 80008f8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80008fc:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	2b10      	cmp	r3, #16
 8000904:	d11a      	bne.n	800093c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000906:	4b13      	ldr	r3, [pc, #76]	; (8000954 <HAL_ADC_ConfigChannel+0x1e8>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4a13      	ldr	r2, [pc, #76]	; (8000958 <HAL_ADC_ConfigChannel+0x1ec>)
 800090c:	fba2 2303 	umull	r2, r3, r2, r3
 8000910:	0c9a      	lsrs	r2, r3, #18
 8000912:	4613      	mov	r3, r2
 8000914:	009b      	lsls	r3, r3, #2
 8000916:	4413      	add	r3, r2
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800091c:	e002      	b.n	8000924 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800091e:	68bb      	ldr	r3, [r7, #8]
 8000920:	3b01      	subs	r3, #1
 8000922:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d1f9      	bne.n	800091e <HAL_ADC_ConfigChannel+0x1b2>
 800092a:	e007      	b.n	800093c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000930:	f043 0220 	orr.w	r2, r3, #32
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000938:	2301      	movs	r3, #1
 800093a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2200      	movs	r2, #0
 8000940:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000944:	7bfb      	ldrb	r3, [r7, #15]
}
 8000946:	4618      	mov	r0, r3
 8000948:	3710      	adds	r7, #16
 800094a:	46bd      	mov	sp, r7
 800094c:	bc90      	pop	{r4, r7}
 800094e:	4770      	bx	lr
 8000950:	40012400 	.word	0x40012400
 8000954:	20000008 	.word	0x20000008
 8000958:	431bde83 	.word	0x431bde83

0800095c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000964:	2300      	movs	r3, #0
 8000966:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000968:	2300      	movs	r3, #0
 800096a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	689b      	ldr	r3, [r3, #8]
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	2b01      	cmp	r3, #1
 8000978:	d039      	beq.n	80009ee <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	687a      	ldr	r2, [r7, #4]
 8000980:	6812      	ldr	r2, [r2, #0]
 8000982:	6892      	ldr	r2, [r2, #8]
 8000984:	f042 0201 	orr.w	r2, r2, #1
 8000988:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800098a:	4b1b      	ldr	r3, [pc, #108]	; (80009f8 <ADC_Enable+0x9c>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a1b      	ldr	r2, [pc, #108]	; (80009fc <ADC_Enable+0xa0>)
 8000990:	fba2 2303 	umull	r2, r3, r2, r3
 8000994:	0c9b      	lsrs	r3, r3, #18
 8000996:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000998:	e002      	b.n	80009a0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800099a:	68bb      	ldr	r3, [r7, #8]
 800099c:	3b01      	subs	r3, #1
 800099e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d1f9      	bne.n	800099a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80009a6:	f7ff fc29 	bl	80001fc <HAL_GetTick>
 80009aa:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80009ac:	e018      	b.n	80009e0 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80009ae:	f7ff fc25 	bl	80001fc <HAL_GetTick>
 80009b2:	4602      	mov	r2, r0
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	1ad3      	subs	r3, r2, r3
 80009b8:	2b02      	cmp	r3, #2
 80009ba:	d911      	bls.n	80009e0 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009c0:	f043 0210 	orr.w	r2, r3, #16
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009cc:	f043 0201 	orr.w	r2, r3, #1
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2200      	movs	r2, #0
 80009d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80009dc:	2301      	movs	r3, #1
 80009de:	e007      	b.n	80009f0 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	689b      	ldr	r3, [r3, #8]
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	d1df      	bne.n	80009ae <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80009ee:	2300      	movs	r3, #0
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3710      	adds	r7, #16
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20000008 	.word	0x20000008
 80009fc:	431bde83 	.word	0x431bde83

08000a00 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	689b      	ldr	r3, [r3, #8]
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d127      	bne.n	8000a6a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	687a      	ldr	r2, [r7, #4]
 8000a20:	6812      	ldr	r2, [r2, #0]
 8000a22:	6892      	ldr	r2, [r2, #8]
 8000a24:	f022 0201 	bic.w	r2, r2, #1
 8000a28:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000a2a:	f7ff fbe7 	bl	80001fc <HAL_GetTick>
 8000a2e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000a30:	e014      	b.n	8000a5c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000a32:	f7ff fbe3 	bl	80001fc <HAL_GetTick>
 8000a36:	4602      	mov	r2, r0
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	1ad3      	subs	r3, r2, r3
 8000a3c:	2b02      	cmp	r3, #2
 8000a3e:	d90d      	bls.n	8000a5c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a44:	f043 0210 	orr.w	r2, r3, #16
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a50:	f043 0201 	orr.w	r2, r3, #1
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	e007      	b.n	8000a6c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	689b      	ldr	r3, [r3, #8]
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	d0e3      	beq.n	8000a32 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000a6a:	2300      	movs	r3, #0
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3710      	adds	r7, #16
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8000a74:	b590      	push	{r4, r7, lr}
 8000a76:	b087      	sub	sp, #28
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8000a80:	2300      	movs	r3, #0
 8000a82:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d101      	bne.n	8000a92 <HAL_ADCEx_Calibration_Start+0x1e>
 8000a8e:	2302      	movs	r3, #2
 8000a90:	e086      	b.n	8000ba0 <HAL_ADCEx_Calibration_Start+0x12c>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2201      	movs	r2, #1
 8000a96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f7ff ffb0 	bl	8000a00 <ADC_ConversionStop_Disable>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000aa4:	7dfb      	ldrb	r3, [r7, #23]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d175      	bne.n	8000b96 <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ab2:	f023 0302 	bic.w	r3, r3, #2
 8000ab6:	f043 0202 	orr.w	r2, r3, #2
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000abe:	4b3a      	ldr	r3, [pc, #232]	; (8000ba8 <HAL_ADCEx_Calibration_Start+0x134>)
 8000ac0:	681c      	ldr	r4, [r3, #0]
 8000ac2:	2002      	movs	r0, #2
 8000ac4:	f001 f946 	bl	8001d54 <HAL_RCCEx_GetPeriphCLKFreq>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8000ace:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8000ad0:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8000ad2:	e002      	b.n	8000ada <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	3b01      	subs	r3, #1
 8000ad8:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d1f9      	bne.n	8000ad4 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8000ae0:	6878      	ldr	r0, [r7, #4]
 8000ae2:	f7ff ff3b 	bl	800095c <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	6812      	ldr	r2, [r2, #0]
 8000aee:	6892      	ldr	r2, [r2, #8]
 8000af0:	f042 0208 	orr.w	r2, r2, #8
 8000af4:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8000af6:	f7ff fb81 	bl	80001fc <HAL_GetTick>
 8000afa:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8000afc:	e014      	b.n	8000b28 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8000afe:	f7ff fb7d 	bl	80001fc <HAL_GetTick>
 8000b02:	4602      	mov	r2, r0
 8000b04:	693b      	ldr	r3, [r7, #16]
 8000b06:	1ad3      	subs	r3, r2, r3
 8000b08:	2b0a      	cmp	r3, #10
 8000b0a:	d90d      	bls.n	8000b28 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b10:	f023 0312 	bic.w	r3, r3, #18
 8000b14:	f043 0210 	orr.w	r2, r3, #16
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2200      	movs	r2, #0
 8000b20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8000b24:	2301      	movs	r3, #1
 8000b26:	e03b      	b.n	8000ba0 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	689b      	ldr	r3, [r3, #8]
 8000b2e:	f003 0308 	and.w	r3, r3, #8
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d1e3      	bne.n	8000afe <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	6812      	ldr	r2, [r2, #0]
 8000b3e:	6892      	ldr	r2, [r2, #8]
 8000b40:	f042 0204 	orr.w	r2, r2, #4
 8000b44:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8000b46:	f7ff fb59 	bl	80001fc <HAL_GetTick>
 8000b4a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8000b4c:	e014      	b.n	8000b78 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8000b4e:	f7ff fb55 	bl	80001fc <HAL_GetTick>
 8000b52:	4602      	mov	r2, r0
 8000b54:	693b      	ldr	r3, [r7, #16]
 8000b56:	1ad3      	subs	r3, r2, r3
 8000b58:	2b0a      	cmp	r3, #10
 8000b5a:	d90d      	bls.n	8000b78 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b60:	f023 0312 	bic.w	r3, r3, #18
 8000b64:	f043 0210 	orr.w	r2, r3, #16
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	2200      	movs	r2, #0
 8000b70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8000b74:	2301      	movs	r3, #1
 8000b76:	e013      	b.n	8000ba0 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	689b      	ldr	r3, [r3, #8]
 8000b7e:	f003 0304 	and.w	r3, r3, #4
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d1e3      	bne.n	8000b4e <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b8a:	f023 0303 	bic.w	r3, r3, #3
 8000b8e:	f043 0201 	orr.w	r2, r3, #1
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2200      	movs	r2, #0
 8000b9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000b9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	371c      	adds	r7, #28
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd90      	pop	{r4, r7, pc}
 8000ba8:	20000008 	.word	0x20000008

08000bac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b085      	sub	sp, #20
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	f003 0307 	and.w	r3, r3, #7
 8000bba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bc2:	68ba      	ldr	r2, [r7, #8]
 8000bc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bc8:	4013      	ands	r3, r2
 8000bca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bde:	4a04      	ldr	r2, [pc, #16]	; (8000bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	60d3      	str	r3, [r2, #12]
}
 8000be4:	bf00      	nop
 8000be6:	3714      	adds	r7, #20
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bc80      	pop	{r7}
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bf8:	4b04      	ldr	r3, [pc, #16]	; (8000c0c <__NVIC_GetPriorityGrouping+0x18>)
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	0a1b      	lsrs	r3, r3, #8
 8000bfe:	f003 0307 	and.w	r3, r3, #7
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bc80      	pop	{r7}
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	db0b      	blt.n	8000c3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c22:	4908      	ldr	r1, [pc, #32]	; (8000c44 <__NVIC_EnableIRQ+0x34>)
 8000c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c28:	095b      	lsrs	r3, r3, #5
 8000c2a:	79fa      	ldrb	r2, [r7, #7]
 8000c2c:	f002 021f 	and.w	r2, r2, #31
 8000c30:	2001      	movs	r0, #1
 8000c32:	fa00 f202 	lsl.w	r2, r0, r2
 8000c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c3a:	bf00      	nop
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bc80      	pop	{r7}
 8000c42:	4770      	bx	lr
 8000c44:	e000e100 	.word	0xe000e100

08000c48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	6039      	str	r1, [r7, #0]
 8000c52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	db0a      	blt.n	8000c72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c5c:	490d      	ldr	r1, [pc, #52]	; (8000c94 <__NVIC_SetPriority+0x4c>)
 8000c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c62:	683a      	ldr	r2, [r7, #0]
 8000c64:	b2d2      	uxtb	r2, r2
 8000c66:	0112      	lsls	r2, r2, #4
 8000c68:	b2d2      	uxtb	r2, r2
 8000c6a:	440b      	add	r3, r1
 8000c6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c70:	e00a      	b.n	8000c88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c72:	4909      	ldr	r1, [pc, #36]	; (8000c98 <__NVIC_SetPriority+0x50>)
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	f003 030f 	and.w	r3, r3, #15
 8000c7a:	3b04      	subs	r3, #4
 8000c7c:	683a      	ldr	r2, [r7, #0]
 8000c7e:	b2d2      	uxtb	r2, r2
 8000c80:	0112      	lsls	r2, r2, #4
 8000c82:	b2d2      	uxtb	r2, r2
 8000c84:	440b      	add	r3, r1
 8000c86:	761a      	strb	r2, [r3, #24]
}
 8000c88:	bf00      	nop
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bc80      	pop	{r7}
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	e000e100 	.word	0xe000e100
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b089      	sub	sp, #36	; 0x24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	60f8      	str	r0, [r7, #12]
 8000ca4:	60b9      	str	r1, [r7, #8]
 8000ca6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	f003 0307 	and.w	r3, r3, #7
 8000cae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cb0:	69fb      	ldr	r3, [r7, #28]
 8000cb2:	f1c3 0307 	rsb	r3, r3, #7
 8000cb6:	2b04      	cmp	r3, #4
 8000cb8:	bf28      	it	cs
 8000cba:	2304      	movcs	r3, #4
 8000cbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	3304      	adds	r3, #4
 8000cc2:	2b06      	cmp	r3, #6
 8000cc4:	d902      	bls.n	8000ccc <NVIC_EncodePriority+0x30>
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	3b03      	subs	r3, #3
 8000cca:	e000      	b.n	8000cce <NVIC_EncodePriority+0x32>
 8000ccc:	2300      	movs	r3, #0
 8000cce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	69bb      	ldr	r3, [r7, #24]
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	1e5a      	subs	r2, r3, #1
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	401a      	ands	r2, r3
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cea:	1e59      	subs	r1, r3, #1
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf0:	4313      	orrs	r3, r2
         );
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3724      	adds	r7, #36	; 0x24
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bc80      	pop	{r7}
 8000cfa:	4770      	bx	lr

08000cfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	3b01      	subs	r3, #1
 8000d08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d0c:	d301      	bcc.n	8000d12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e00f      	b.n	8000d32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d12:	4a0a      	ldr	r2, [pc, #40]	; (8000d3c <SysTick_Config+0x40>)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	3b01      	subs	r3, #1
 8000d18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d1a:	210f      	movs	r1, #15
 8000d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d20:	f7ff ff92 	bl	8000c48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d24:	4b05      	ldr	r3, [pc, #20]	; (8000d3c <SysTick_Config+0x40>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d2a:	4b04      	ldr	r3, [pc, #16]	; (8000d3c <SysTick_Config+0x40>)
 8000d2c:	2207      	movs	r2, #7
 8000d2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	e000e010 	.word	0xe000e010

08000d40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f7ff ff2f 	bl	8000bac <__NVIC_SetPriorityGrouping>
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b086      	sub	sp, #24
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	60b9      	str	r1, [r7, #8]
 8000d60:	607a      	str	r2, [r7, #4]
 8000d62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d68:	f7ff ff44 	bl	8000bf4 <__NVIC_GetPriorityGrouping>
 8000d6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d6e:	687a      	ldr	r2, [r7, #4]
 8000d70:	68b9      	ldr	r1, [r7, #8]
 8000d72:	6978      	ldr	r0, [r7, #20]
 8000d74:	f7ff ff92 	bl	8000c9c <NVIC_EncodePriority>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d7e:	4611      	mov	r1, r2
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff ff61 	bl	8000c48 <__NVIC_SetPriority>
}
 8000d86:	bf00      	nop
 8000d88:	3718      	adds	r7, #24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b082      	sub	sp, #8
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	4603      	mov	r3, r0
 8000d96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff ff37 	bl	8000c10 <__NVIC_EnableIRQ>
}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b082      	sub	sp, #8
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f7ff ffa2 	bl	8000cfc <SysTick_Config>
 8000db8:	4603      	mov	r3, r0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
	...

08000dc4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d101      	bne.n	8000dda <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e043      	b.n	8000e62 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	461a      	mov	r2, r3
 8000de0:	4b22      	ldr	r3, [pc, #136]	; (8000e6c <HAL_DMA_Init+0xa8>)
 8000de2:	4413      	add	r3, r2
 8000de4:	4a22      	ldr	r2, [pc, #136]	; (8000e70 <HAL_DMA_Init+0xac>)
 8000de6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dea:	091b      	lsrs	r3, r3, #4
 8000dec:	009a      	lsls	r2, r3, #2
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4a1f      	ldr	r2, [pc, #124]	; (8000e74 <HAL_DMA_Init+0xb0>)
 8000df6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2202      	movs	r2, #2
 8000dfc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000e0e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000e12:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000e1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	68db      	ldr	r3, [r3, #12]
 8000e22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	695b      	ldr	r3, [r3, #20]
 8000e2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	69db      	ldr	r3, [r3, #28]
 8000e3a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000e3c:	68fa      	ldr	r2, [r7, #12]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	68fa      	ldr	r2, [r7, #12]
 8000e48:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2201      	movs	r2, #1
 8000e54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000e60:	2300      	movs	r3, #0
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3714      	adds	r7, #20
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bc80      	pop	{r7}
 8000e6a:	4770      	bx	lr
 8000e6c:	bffdfff8 	.word	0xbffdfff8
 8000e70:	cccccccd 	.word	0xcccccccd
 8000e74:	40020000 	.word	0x40020000

08000e78 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e94:	2204      	movs	r2, #4
 8000e96:	409a      	lsls	r2, r3
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d055      	beq.n	8000f4c <HAL_DMA_IRQHandler+0xd4>
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	f003 0304 	and.w	r3, r3, #4
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d050      	beq.n	8000f4c <HAL_DMA_IRQHandler+0xd4>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f003 0320 	and.w	r3, r3, #32
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d107      	bne.n	8000ec8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	687a      	ldr	r2, [r7, #4]
 8000ebe:	6812      	ldr	r2, [r2, #0]
 8000ec0:	6812      	ldr	r2, [r2, #0]
 8000ec2:	f022 0204 	bic.w	r2, r2, #4
 8000ec6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000ec8:	4a6d      	ldr	r2, [pc, #436]	; (8001080 <HAL_DMA_IRQHandler+0x208>)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4b6c      	ldr	r3, [pc, #432]	; (8001084 <HAL_DMA_IRQHandler+0x20c>)
 8000ed2:	4299      	cmp	r1, r3
 8000ed4:	d02e      	beq.n	8000f34 <HAL_DMA_IRQHandler+0xbc>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4619      	mov	r1, r3
 8000edc:	4b6a      	ldr	r3, [pc, #424]	; (8001088 <HAL_DMA_IRQHandler+0x210>)
 8000ede:	4299      	cmp	r1, r3
 8000ee0:	d026      	beq.n	8000f30 <HAL_DMA_IRQHandler+0xb8>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4b68      	ldr	r3, [pc, #416]	; (800108c <HAL_DMA_IRQHandler+0x214>)
 8000eea:	4299      	cmp	r1, r3
 8000eec:	d01d      	beq.n	8000f2a <HAL_DMA_IRQHandler+0xb2>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4b66      	ldr	r3, [pc, #408]	; (8001090 <HAL_DMA_IRQHandler+0x218>)
 8000ef6:	4299      	cmp	r1, r3
 8000ef8:	d014      	beq.n	8000f24 <HAL_DMA_IRQHandler+0xac>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4619      	mov	r1, r3
 8000f00:	4b64      	ldr	r3, [pc, #400]	; (8001094 <HAL_DMA_IRQHandler+0x21c>)
 8000f02:	4299      	cmp	r1, r3
 8000f04:	d00b      	beq.n	8000f1e <HAL_DMA_IRQHandler+0xa6>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4b62      	ldr	r3, [pc, #392]	; (8001098 <HAL_DMA_IRQHandler+0x220>)
 8000f0e:	4299      	cmp	r1, r3
 8000f10:	d102      	bne.n	8000f18 <HAL_DMA_IRQHandler+0xa0>
 8000f12:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f16:	e00e      	b.n	8000f36 <HAL_DMA_IRQHandler+0xbe>
 8000f18:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000f1c:	e00b      	b.n	8000f36 <HAL_DMA_IRQHandler+0xbe>
 8000f1e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000f22:	e008      	b.n	8000f36 <HAL_DMA_IRQHandler+0xbe>
 8000f24:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f28:	e005      	b.n	8000f36 <HAL_DMA_IRQHandler+0xbe>
 8000f2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f2e:	e002      	b.n	8000f36 <HAL_DMA_IRQHandler+0xbe>
 8000f30:	2340      	movs	r3, #64	; 0x40
 8000f32:	e000      	b.n	8000f36 <HAL_DMA_IRQHandler+0xbe>
 8000f34:	2304      	movs	r3, #4
 8000f36:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	f000 809a 	beq.w	8001076 <HAL_DMA_IRQHandler+0x1fe>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000f4a:	e094      	b.n	8001076 <HAL_DMA_IRQHandler+0x1fe>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f50:	2202      	movs	r2, #2
 8000f52:	409a      	lsls	r2, r3
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	4013      	ands	r3, r2
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d05c      	beq.n	8001016 <HAL_DMA_IRQHandler+0x19e>
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	f003 0302 	and.w	r3, r3, #2
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d057      	beq.n	8001016 <HAL_DMA_IRQHandler+0x19e>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f003 0320 	and.w	r3, r3, #32
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d10b      	bne.n	8000f8c <HAL_DMA_IRQHandler+0x114>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	687a      	ldr	r2, [r7, #4]
 8000f7a:	6812      	ldr	r2, [r2, #0]
 8000f7c:	6812      	ldr	r2, [r2, #0]
 8000f7e:	f022 020a 	bic.w	r2, r2, #10
 8000f82:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2201      	movs	r2, #1
 8000f88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000f8c:	4a3c      	ldr	r2, [pc, #240]	; (8001080 <HAL_DMA_IRQHandler+0x208>)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4619      	mov	r1, r3
 8000f94:	4b3b      	ldr	r3, [pc, #236]	; (8001084 <HAL_DMA_IRQHandler+0x20c>)
 8000f96:	4299      	cmp	r1, r3
 8000f98:	d02e      	beq.n	8000ff8 <HAL_DMA_IRQHandler+0x180>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4b39      	ldr	r3, [pc, #228]	; (8001088 <HAL_DMA_IRQHandler+0x210>)
 8000fa2:	4299      	cmp	r1, r3
 8000fa4:	d026      	beq.n	8000ff4 <HAL_DMA_IRQHandler+0x17c>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4619      	mov	r1, r3
 8000fac:	4b37      	ldr	r3, [pc, #220]	; (800108c <HAL_DMA_IRQHandler+0x214>)
 8000fae:	4299      	cmp	r1, r3
 8000fb0:	d01d      	beq.n	8000fee <HAL_DMA_IRQHandler+0x176>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4b35      	ldr	r3, [pc, #212]	; (8001090 <HAL_DMA_IRQHandler+0x218>)
 8000fba:	4299      	cmp	r1, r3
 8000fbc:	d014      	beq.n	8000fe8 <HAL_DMA_IRQHandler+0x170>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4b33      	ldr	r3, [pc, #204]	; (8001094 <HAL_DMA_IRQHandler+0x21c>)
 8000fc6:	4299      	cmp	r1, r3
 8000fc8:	d00b      	beq.n	8000fe2 <HAL_DMA_IRQHandler+0x16a>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4b31      	ldr	r3, [pc, #196]	; (8001098 <HAL_DMA_IRQHandler+0x220>)
 8000fd2:	4299      	cmp	r1, r3
 8000fd4:	d102      	bne.n	8000fdc <HAL_DMA_IRQHandler+0x164>
 8000fd6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000fda:	e00e      	b.n	8000ffa <HAL_DMA_IRQHandler+0x182>
 8000fdc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000fe0:	e00b      	b.n	8000ffa <HAL_DMA_IRQHandler+0x182>
 8000fe2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fe6:	e008      	b.n	8000ffa <HAL_DMA_IRQHandler+0x182>
 8000fe8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fec:	e005      	b.n	8000ffa <HAL_DMA_IRQHandler+0x182>
 8000fee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ff2:	e002      	b.n	8000ffa <HAL_DMA_IRQHandler+0x182>
 8000ff4:	2320      	movs	r3, #32
 8000ff6:	e000      	b.n	8000ffa <HAL_DMA_IRQHandler+0x182>
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2200      	movs	r2, #0
 8001000:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001008:	2b00      	cmp	r3, #0
 800100a:	d034      	beq.n	8001076 <HAL_DMA_IRQHandler+0x1fe>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001014:	e02f      	b.n	8001076 <HAL_DMA_IRQHandler+0x1fe>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101a:	2208      	movs	r2, #8
 800101c:	409a      	lsls	r2, r3
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	4013      	ands	r3, r2
 8001022:	2b00      	cmp	r3, #0
 8001024:	d028      	beq.n	8001078 <HAL_DMA_IRQHandler+0x200>
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	f003 0308 	and.w	r3, r3, #8
 800102c:	2b00      	cmp	r3, #0
 800102e:	d023      	beq.n	8001078 <HAL_DMA_IRQHandler+0x200>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	6812      	ldr	r2, [r2, #0]
 8001038:	6812      	ldr	r2, [r2, #0]
 800103a:	f022 020e 	bic.w	r2, r2, #14
 800103e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001048:	2101      	movs	r1, #1
 800104a:	fa01 f202 	lsl.w	r2, r1, r2
 800104e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2201      	movs	r2, #1
 8001054:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2201      	movs	r2, #1
 800105a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2200      	movs	r2, #0
 8001062:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	2b00      	cmp	r3, #0
 800106c:	d004      	beq.n	8001078 <HAL_DMA_IRQHandler+0x200>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	4798      	blx	r3
    }
  }
  return;
 8001076:	bf00      	nop
 8001078:	bf00      	nop
}
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40020000 	.word	0x40020000
 8001084:	40020008 	.word	0x40020008
 8001088:	4002001c 	.word	0x4002001c
 800108c:	40020030 	.word	0x40020030
 8001090:	40020044 	.word	0x40020044
 8001094:	40020058 	.word	0x40020058
 8001098:	4002006c 	.word	0x4002006c

0800109c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800109c:	b480      	push	{r7}
 800109e:	b08b      	sub	sp, #44	; 0x2c
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010a6:	2300      	movs	r3, #0
 80010a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010aa:	2300      	movs	r3, #0
 80010ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ae:	e127      	b.n	8001300 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010b0:	2201      	movs	r2, #1
 80010b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	4013      	ands	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	f040 8116 	bne.w	80012fa <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	2b12      	cmp	r3, #18
 80010d4:	d034      	beq.n	8001140 <HAL_GPIO_Init+0xa4>
 80010d6:	2b12      	cmp	r3, #18
 80010d8:	d80d      	bhi.n	80010f6 <HAL_GPIO_Init+0x5a>
 80010da:	2b02      	cmp	r3, #2
 80010dc:	d02b      	beq.n	8001136 <HAL_GPIO_Init+0x9a>
 80010de:	2b02      	cmp	r3, #2
 80010e0:	d804      	bhi.n	80010ec <HAL_GPIO_Init+0x50>
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d031      	beq.n	800114a <HAL_GPIO_Init+0xae>
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d01c      	beq.n	8001124 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010ea:	e048      	b.n	800117e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80010ec:	2b03      	cmp	r3, #3
 80010ee:	d043      	beq.n	8001178 <HAL_GPIO_Init+0xdc>
 80010f0:	2b11      	cmp	r3, #17
 80010f2:	d01b      	beq.n	800112c <HAL_GPIO_Init+0x90>
          break;
 80010f4:	e043      	b.n	800117e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80010f6:	4a89      	ldr	r2, [pc, #548]	; (800131c <HAL_GPIO_Init+0x280>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d026      	beq.n	800114a <HAL_GPIO_Init+0xae>
 80010fc:	4a87      	ldr	r2, [pc, #540]	; (800131c <HAL_GPIO_Init+0x280>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d806      	bhi.n	8001110 <HAL_GPIO_Init+0x74>
 8001102:	4a87      	ldr	r2, [pc, #540]	; (8001320 <HAL_GPIO_Init+0x284>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d020      	beq.n	800114a <HAL_GPIO_Init+0xae>
 8001108:	4a86      	ldr	r2, [pc, #536]	; (8001324 <HAL_GPIO_Init+0x288>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d01d      	beq.n	800114a <HAL_GPIO_Init+0xae>
          break;
 800110e:	e036      	b.n	800117e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001110:	4a85      	ldr	r2, [pc, #532]	; (8001328 <HAL_GPIO_Init+0x28c>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d019      	beq.n	800114a <HAL_GPIO_Init+0xae>
 8001116:	4a85      	ldr	r2, [pc, #532]	; (800132c <HAL_GPIO_Init+0x290>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d016      	beq.n	800114a <HAL_GPIO_Init+0xae>
 800111c:	4a84      	ldr	r2, [pc, #528]	; (8001330 <HAL_GPIO_Init+0x294>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d013      	beq.n	800114a <HAL_GPIO_Init+0xae>
          break;
 8001122:	e02c      	b.n	800117e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	623b      	str	r3, [r7, #32]
          break;
 800112a:	e028      	b.n	800117e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	3304      	adds	r3, #4
 8001132:	623b      	str	r3, [r7, #32]
          break;
 8001134:	e023      	b.n	800117e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	3308      	adds	r3, #8
 800113c:	623b      	str	r3, [r7, #32]
          break;
 800113e:	e01e      	b.n	800117e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	330c      	adds	r3, #12
 8001146:	623b      	str	r3, [r7, #32]
          break;
 8001148:	e019      	b.n	800117e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d102      	bne.n	8001158 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001152:	2304      	movs	r3, #4
 8001154:	623b      	str	r3, [r7, #32]
          break;
 8001156:	e012      	b.n	800117e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	2b01      	cmp	r3, #1
 800115e:	d105      	bne.n	800116c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001160:	2308      	movs	r3, #8
 8001162:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	69fa      	ldr	r2, [r7, #28]
 8001168:	611a      	str	r2, [r3, #16]
          break;
 800116a:	e008      	b.n	800117e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800116c:	2308      	movs	r3, #8
 800116e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	69fa      	ldr	r2, [r7, #28]
 8001174:	615a      	str	r2, [r3, #20]
          break;
 8001176:	e002      	b.n	800117e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001178:	2300      	movs	r3, #0
 800117a:	623b      	str	r3, [r7, #32]
          break;
 800117c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	2bff      	cmp	r3, #255	; 0xff
 8001182:	d801      	bhi.n	8001188 <HAL_GPIO_Init+0xec>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	e001      	b.n	800118c <HAL_GPIO_Init+0xf0>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	3304      	adds	r3, #4
 800118c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	2bff      	cmp	r3, #255	; 0xff
 8001192:	d802      	bhi.n	800119a <HAL_GPIO_Init+0xfe>
 8001194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	e002      	b.n	80011a0 <HAL_GPIO_Init+0x104>
 800119a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119c:	3b08      	subs	r3, #8
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	210f      	movs	r1, #15
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	fa01 f303 	lsl.w	r3, r1, r3
 80011ae:	43db      	mvns	r3, r3
 80011b0:	401a      	ands	r2, r3
 80011b2:	6a39      	ldr	r1, [r7, #32]
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ba:	431a      	orrs	r2, r3
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	f000 8096 	beq.w	80012fa <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011ce:	4a59      	ldr	r2, [pc, #356]	; (8001334 <HAL_GPIO_Init+0x298>)
 80011d0:	4b58      	ldr	r3, [pc, #352]	; (8001334 <HAL_GPIO_Init+0x298>)
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	6193      	str	r3, [r2, #24]
 80011da:	4b56      	ldr	r3, [pc, #344]	; (8001334 <HAL_GPIO_Init+0x298>)
 80011dc:	699b      	ldr	r3, [r3, #24]
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	60bb      	str	r3, [r7, #8]
 80011e4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011e6:	4a54      	ldr	r2, [pc, #336]	; (8001338 <HAL_GPIO_Init+0x29c>)
 80011e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ea:	089b      	lsrs	r3, r3, #2
 80011ec:	3302      	adds	r3, #2
 80011ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011f2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f6:	f003 0303 	and.w	r3, r3, #3
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	220f      	movs	r2, #15
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43db      	mvns	r3, r3
 8001204:	68fa      	ldr	r2, [r7, #12]
 8001206:	4013      	ands	r3, r2
 8001208:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a4b      	ldr	r2, [pc, #300]	; (800133c <HAL_GPIO_Init+0x2a0>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d013      	beq.n	800123a <HAL_GPIO_Init+0x19e>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a4a      	ldr	r2, [pc, #296]	; (8001340 <HAL_GPIO_Init+0x2a4>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d00d      	beq.n	8001236 <HAL_GPIO_Init+0x19a>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a49      	ldr	r2, [pc, #292]	; (8001344 <HAL_GPIO_Init+0x2a8>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d007      	beq.n	8001232 <HAL_GPIO_Init+0x196>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a48      	ldr	r2, [pc, #288]	; (8001348 <HAL_GPIO_Init+0x2ac>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d101      	bne.n	800122e <HAL_GPIO_Init+0x192>
 800122a:	2303      	movs	r3, #3
 800122c:	e006      	b.n	800123c <HAL_GPIO_Init+0x1a0>
 800122e:	2304      	movs	r3, #4
 8001230:	e004      	b.n	800123c <HAL_GPIO_Init+0x1a0>
 8001232:	2302      	movs	r3, #2
 8001234:	e002      	b.n	800123c <HAL_GPIO_Init+0x1a0>
 8001236:	2301      	movs	r3, #1
 8001238:	e000      	b.n	800123c <HAL_GPIO_Init+0x1a0>
 800123a:	2300      	movs	r3, #0
 800123c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800123e:	f002 0203 	and.w	r2, r2, #3
 8001242:	0092      	lsls	r2, r2, #2
 8001244:	4093      	lsls	r3, r2
 8001246:	68fa      	ldr	r2, [r7, #12]
 8001248:	4313      	orrs	r3, r2
 800124a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800124c:	493a      	ldr	r1, [pc, #232]	; (8001338 <HAL_GPIO_Init+0x29c>)
 800124e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001250:	089b      	lsrs	r3, r3, #2
 8001252:	3302      	adds	r3, #2
 8001254:	68fa      	ldr	r2, [r7, #12]
 8001256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d006      	beq.n	8001274 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001266:	4939      	ldr	r1, [pc, #228]	; (800134c <HAL_GPIO_Init+0x2b0>)
 8001268:	4b38      	ldr	r3, [pc, #224]	; (800134c <HAL_GPIO_Init+0x2b0>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	4313      	orrs	r3, r2
 8001270:	600b      	str	r3, [r1, #0]
 8001272:	e006      	b.n	8001282 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001274:	4935      	ldr	r1, [pc, #212]	; (800134c <HAL_GPIO_Init+0x2b0>)
 8001276:	4b35      	ldr	r3, [pc, #212]	; (800134c <HAL_GPIO_Init+0x2b0>)
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	43db      	mvns	r3, r3
 800127e:	4013      	ands	r3, r2
 8001280:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d006      	beq.n	800129c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800128e:	492f      	ldr	r1, [pc, #188]	; (800134c <HAL_GPIO_Init+0x2b0>)
 8001290:	4b2e      	ldr	r3, [pc, #184]	; (800134c <HAL_GPIO_Init+0x2b0>)
 8001292:	685a      	ldr	r2, [r3, #4]
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	4313      	orrs	r3, r2
 8001298:	604b      	str	r3, [r1, #4]
 800129a:	e006      	b.n	80012aa <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800129c:	492b      	ldr	r1, [pc, #172]	; (800134c <HAL_GPIO_Init+0x2b0>)
 800129e:	4b2b      	ldr	r3, [pc, #172]	; (800134c <HAL_GPIO_Init+0x2b0>)
 80012a0:	685a      	ldr	r2, [r3, #4]
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	43db      	mvns	r3, r3
 80012a6:	4013      	ands	r3, r2
 80012a8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d006      	beq.n	80012c4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012b6:	4925      	ldr	r1, [pc, #148]	; (800134c <HAL_GPIO_Init+0x2b0>)
 80012b8:	4b24      	ldr	r3, [pc, #144]	; (800134c <HAL_GPIO_Init+0x2b0>)
 80012ba:	689a      	ldr	r2, [r3, #8]
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	4313      	orrs	r3, r2
 80012c0:	608b      	str	r3, [r1, #8]
 80012c2:	e006      	b.n	80012d2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012c4:	4921      	ldr	r1, [pc, #132]	; (800134c <HAL_GPIO_Init+0x2b0>)
 80012c6:	4b21      	ldr	r3, [pc, #132]	; (800134c <HAL_GPIO_Init+0x2b0>)
 80012c8:	689a      	ldr	r2, [r3, #8]
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	43db      	mvns	r3, r3
 80012ce:	4013      	ands	r3, r2
 80012d0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d006      	beq.n	80012ec <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80012de:	491b      	ldr	r1, [pc, #108]	; (800134c <HAL_GPIO_Init+0x2b0>)
 80012e0:	4b1a      	ldr	r3, [pc, #104]	; (800134c <HAL_GPIO_Init+0x2b0>)
 80012e2:	68da      	ldr	r2, [r3, #12]
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	60cb      	str	r3, [r1, #12]
 80012ea:	e006      	b.n	80012fa <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012ec:	4917      	ldr	r1, [pc, #92]	; (800134c <HAL_GPIO_Init+0x2b0>)
 80012ee:	4b17      	ldr	r3, [pc, #92]	; (800134c <HAL_GPIO_Init+0x2b0>)
 80012f0:	68da      	ldr	r2, [r3, #12]
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	43db      	mvns	r3, r3
 80012f6:	4013      	ands	r3, r2
 80012f8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80012fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fc:	3301      	adds	r3, #1
 80012fe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001306:	fa22 f303 	lsr.w	r3, r2, r3
 800130a:	2b00      	cmp	r3, #0
 800130c:	f47f aed0 	bne.w	80010b0 <HAL_GPIO_Init+0x14>
  }
}
 8001310:	bf00      	nop
 8001312:	372c      	adds	r7, #44	; 0x2c
 8001314:	46bd      	mov	sp, r7
 8001316:	bc80      	pop	{r7}
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	10210000 	.word	0x10210000
 8001320:	10110000 	.word	0x10110000
 8001324:	10120000 	.word	0x10120000
 8001328:	10310000 	.word	0x10310000
 800132c:	10320000 	.word	0x10320000
 8001330:	10220000 	.word	0x10220000
 8001334:	40021000 	.word	0x40021000
 8001338:	40010000 	.word	0x40010000
 800133c:	40010800 	.word	0x40010800
 8001340:	40010c00 	.word	0x40010c00
 8001344:	40011000 	.word	0x40011000
 8001348:	40011400 	.word	0x40011400
 800134c:	40010400 	.word	0x40010400

08001350 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001350:	b480      	push	{r7}
 8001352:	b085      	sub	sp, #20
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	460b      	mov	r3, r1
 800135a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	689a      	ldr	r2, [r3, #8]
 8001360:	887b      	ldrh	r3, [r7, #2]
 8001362:	4013      	ands	r3, r2
 8001364:	2b00      	cmp	r3, #0
 8001366:	d002      	beq.n	800136e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001368:	2301      	movs	r3, #1
 800136a:	73fb      	strb	r3, [r7, #15]
 800136c:	e001      	b.n	8001372 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800136e:	2300      	movs	r3, #0
 8001370:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001372:	7bfb      	ldrb	r3, [r7, #15]
}
 8001374:	4618      	mov	r0, r3
 8001376:	3714      	adds	r7, #20
 8001378:	46bd      	mov	sp, r7
 800137a:	bc80      	pop	{r7}
 800137c:	4770      	bx	lr

0800137e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800137e:	b480      	push	{r7}
 8001380:	b083      	sub	sp, #12
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
 8001386:	460b      	mov	r3, r1
 8001388:	807b      	strh	r3, [r7, #2]
 800138a:	4613      	mov	r3, r2
 800138c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800138e:	787b      	ldrb	r3, [r7, #1]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d003      	beq.n	800139c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001394:	887a      	ldrh	r2, [r7, #2]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800139a:	e003      	b.n	80013a4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800139c:	887b      	ldrh	r3, [r7, #2]
 800139e:	041a      	lsls	r2, r3, #16
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	611a      	str	r2, [r3, #16]
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bc80      	pop	{r7}
 80013ac:	4770      	bx	lr
	...

080013b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d101      	bne.n	80013c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e26c      	b.n	800189c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	f000 8087 	beq.w	80014de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013d0:	4b92      	ldr	r3, [pc, #584]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f003 030c 	and.w	r3, r3, #12
 80013d8:	2b04      	cmp	r3, #4
 80013da:	d00c      	beq.n	80013f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013dc:	4b8f      	ldr	r3, [pc, #572]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f003 030c 	and.w	r3, r3, #12
 80013e4:	2b08      	cmp	r3, #8
 80013e6:	d112      	bne.n	800140e <HAL_RCC_OscConfig+0x5e>
 80013e8:	4b8c      	ldr	r3, [pc, #560]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013f4:	d10b      	bne.n	800140e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013f6:	4b89      	ldr	r3, [pc, #548]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d06c      	beq.n	80014dc <HAL_RCC_OscConfig+0x12c>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d168      	bne.n	80014dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e246      	b.n	800189c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001416:	d106      	bne.n	8001426 <HAL_RCC_OscConfig+0x76>
 8001418:	4a80      	ldr	r2, [pc, #512]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 800141a:	4b80      	ldr	r3, [pc, #512]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001422:	6013      	str	r3, [r2, #0]
 8001424:	e02e      	b.n	8001484 <HAL_RCC_OscConfig+0xd4>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d10c      	bne.n	8001448 <HAL_RCC_OscConfig+0x98>
 800142e:	4a7b      	ldr	r2, [pc, #492]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 8001430:	4b7a      	ldr	r3, [pc, #488]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001438:	6013      	str	r3, [r2, #0]
 800143a:	4a78      	ldr	r2, [pc, #480]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 800143c:	4b77      	ldr	r3, [pc, #476]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001444:	6013      	str	r3, [r2, #0]
 8001446:	e01d      	b.n	8001484 <HAL_RCC_OscConfig+0xd4>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001450:	d10c      	bne.n	800146c <HAL_RCC_OscConfig+0xbc>
 8001452:	4a72      	ldr	r2, [pc, #456]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 8001454:	4b71      	ldr	r3, [pc, #452]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800145c:	6013      	str	r3, [r2, #0]
 800145e:	4a6f      	ldr	r2, [pc, #444]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 8001460:	4b6e      	ldr	r3, [pc, #440]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001468:	6013      	str	r3, [r2, #0]
 800146a:	e00b      	b.n	8001484 <HAL_RCC_OscConfig+0xd4>
 800146c:	4a6b      	ldr	r2, [pc, #428]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 800146e:	4b6b      	ldr	r3, [pc, #428]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001476:	6013      	str	r3, [r2, #0]
 8001478:	4a68      	ldr	r2, [pc, #416]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 800147a:	4b68      	ldr	r3, [pc, #416]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001482:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d013      	beq.n	80014b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800148c:	f7fe feb6 	bl	80001fc <HAL_GetTick>
 8001490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001492:	e008      	b.n	80014a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001494:	f7fe feb2 	bl	80001fc <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b64      	cmp	r3, #100	; 0x64
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e1fa      	b.n	800189c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014a6:	4b5d      	ldr	r3, [pc, #372]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d0f0      	beq.n	8001494 <HAL_RCC_OscConfig+0xe4>
 80014b2:	e014      	b.n	80014de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b4:	f7fe fea2 	bl	80001fc <HAL_GetTick>
 80014b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ba:	e008      	b.n	80014ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014bc:	f7fe fe9e 	bl	80001fc <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b64      	cmp	r3, #100	; 0x64
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e1e6      	b.n	800189c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ce:	4b53      	ldr	r3, [pc, #332]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d1f0      	bne.n	80014bc <HAL_RCC_OscConfig+0x10c>
 80014da:	e000      	b.n	80014de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d063      	beq.n	80015b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014ea:	4b4c      	ldr	r3, [pc, #304]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f003 030c 	and.w	r3, r3, #12
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d00b      	beq.n	800150e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80014f6:	4b49      	ldr	r3, [pc, #292]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f003 030c 	and.w	r3, r3, #12
 80014fe:	2b08      	cmp	r3, #8
 8001500:	d11c      	bne.n	800153c <HAL_RCC_OscConfig+0x18c>
 8001502:	4b46      	ldr	r3, [pc, #280]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d116      	bne.n	800153c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800150e:	4b43      	ldr	r3, [pc, #268]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d005      	beq.n	8001526 <HAL_RCC_OscConfig+0x176>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	691b      	ldr	r3, [r3, #16]
 800151e:	2b01      	cmp	r3, #1
 8001520:	d001      	beq.n	8001526 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e1ba      	b.n	800189c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001526:	493d      	ldr	r1, [pc, #244]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 8001528:	4b3c      	ldr	r3, [pc, #240]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	695b      	ldr	r3, [r3, #20]
 8001534:	00db      	lsls	r3, r3, #3
 8001536:	4313      	orrs	r3, r2
 8001538:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800153a:	e03a      	b.n	80015b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	691b      	ldr	r3, [r3, #16]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d020      	beq.n	8001586 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001544:	4b36      	ldr	r3, [pc, #216]	; (8001620 <HAL_RCC_OscConfig+0x270>)
 8001546:	2201      	movs	r2, #1
 8001548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800154a:	f7fe fe57 	bl	80001fc <HAL_GetTick>
 800154e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001550:	e008      	b.n	8001564 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001552:	f7fe fe53 	bl	80001fc <HAL_GetTick>
 8001556:	4602      	mov	r2, r0
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	2b02      	cmp	r3, #2
 800155e:	d901      	bls.n	8001564 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e19b      	b.n	800189c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001564:	4b2d      	ldr	r3, [pc, #180]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0302 	and.w	r3, r3, #2
 800156c:	2b00      	cmp	r3, #0
 800156e:	d0f0      	beq.n	8001552 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001570:	492a      	ldr	r1, [pc, #168]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 8001572:	4b2a      	ldr	r3, [pc, #168]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	695b      	ldr	r3, [r3, #20]
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	4313      	orrs	r3, r2
 8001582:	600b      	str	r3, [r1, #0]
 8001584:	e015      	b.n	80015b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001586:	4b26      	ldr	r3, [pc, #152]	; (8001620 <HAL_RCC_OscConfig+0x270>)
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158c:	f7fe fe36 	bl	80001fc <HAL_GetTick>
 8001590:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001592:	e008      	b.n	80015a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001594:	f7fe fe32 	bl	80001fc <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e17a      	b.n	800189c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015a6:	4b1d      	ldr	r3, [pc, #116]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d1f0      	bne.n	8001594 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0308 	and.w	r3, r3, #8
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d03a      	beq.n	8001634 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	699b      	ldr	r3, [r3, #24]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d019      	beq.n	80015fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015c6:	4b17      	ldr	r3, [pc, #92]	; (8001624 <HAL_RCC_OscConfig+0x274>)
 80015c8:	2201      	movs	r2, #1
 80015ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015cc:	f7fe fe16 	bl	80001fc <HAL_GetTick>
 80015d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015d2:	e008      	b.n	80015e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015d4:	f7fe fe12 	bl	80001fc <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e15a      	b.n	800189c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015e6:	4b0d      	ldr	r3, [pc, #52]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 80015e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d0f0      	beq.n	80015d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80015f2:	2001      	movs	r0, #1
 80015f4:	f000 fada 	bl	8001bac <RCC_Delay>
 80015f8:	e01c      	b.n	8001634 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015fa:	4b0a      	ldr	r3, [pc, #40]	; (8001624 <HAL_RCC_OscConfig+0x274>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001600:	f7fe fdfc 	bl	80001fc <HAL_GetTick>
 8001604:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001606:	e00f      	b.n	8001628 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001608:	f7fe fdf8 	bl	80001fc <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b02      	cmp	r3, #2
 8001614:	d908      	bls.n	8001628 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e140      	b.n	800189c <HAL_RCC_OscConfig+0x4ec>
 800161a:	bf00      	nop
 800161c:	40021000 	.word	0x40021000
 8001620:	42420000 	.word	0x42420000
 8001624:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001628:	4b9e      	ldr	r3, [pc, #632]	; (80018a4 <HAL_RCC_OscConfig+0x4f4>)
 800162a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162c:	f003 0302 	and.w	r3, r3, #2
 8001630:	2b00      	cmp	r3, #0
 8001632:	d1e9      	bne.n	8001608 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0304 	and.w	r3, r3, #4
 800163c:	2b00      	cmp	r3, #0
 800163e:	f000 80a6 	beq.w	800178e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001642:	2300      	movs	r3, #0
 8001644:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001646:	4b97      	ldr	r3, [pc, #604]	; (80018a4 <HAL_RCC_OscConfig+0x4f4>)
 8001648:	69db      	ldr	r3, [r3, #28]
 800164a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d10d      	bne.n	800166e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001652:	4a94      	ldr	r2, [pc, #592]	; (80018a4 <HAL_RCC_OscConfig+0x4f4>)
 8001654:	4b93      	ldr	r3, [pc, #588]	; (80018a4 <HAL_RCC_OscConfig+0x4f4>)
 8001656:	69db      	ldr	r3, [r3, #28]
 8001658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800165c:	61d3      	str	r3, [r2, #28]
 800165e:	4b91      	ldr	r3, [pc, #580]	; (80018a4 <HAL_RCC_OscConfig+0x4f4>)
 8001660:	69db      	ldr	r3, [r3, #28]
 8001662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001666:	60bb      	str	r3, [r7, #8]
 8001668:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800166a:	2301      	movs	r3, #1
 800166c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800166e:	4b8e      	ldr	r3, [pc, #568]	; (80018a8 <HAL_RCC_OscConfig+0x4f8>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001676:	2b00      	cmp	r3, #0
 8001678:	d118      	bne.n	80016ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800167a:	4a8b      	ldr	r2, [pc, #556]	; (80018a8 <HAL_RCC_OscConfig+0x4f8>)
 800167c:	4b8a      	ldr	r3, [pc, #552]	; (80018a8 <HAL_RCC_OscConfig+0x4f8>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001684:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001686:	f7fe fdb9 	bl	80001fc <HAL_GetTick>
 800168a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800168c:	e008      	b.n	80016a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800168e:	f7fe fdb5 	bl	80001fc <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	2b64      	cmp	r3, #100	; 0x64
 800169a:	d901      	bls.n	80016a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e0fd      	b.n	800189c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a0:	4b81      	ldr	r3, [pc, #516]	; (80018a8 <HAL_RCC_OscConfig+0x4f8>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d0f0      	beq.n	800168e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d106      	bne.n	80016c2 <HAL_RCC_OscConfig+0x312>
 80016b4:	4a7b      	ldr	r2, [pc, #492]	; (80018a4 <HAL_RCC_OscConfig+0x4f4>)
 80016b6:	4b7b      	ldr	r3, [pc, #492]	; (80018a4 <HAL_RCC_OscConfig+0x4f4>)
 80016b8:	6a1b      	ldr	r3, [r3, #32]
 80016ba:	f043 0301 	orr.w	r3, r3, #1
 80016be:	6213      	str	r3, [r2, #32]
 80016c0:	e02d      	b.n	800171e <HAL_RCC_OscConfig+0x36e>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d10c      	bne.n	80016e4 <HAL_RCC_OscConfig+0x334>
 80016ca:	4a76      	ldr	r2, [pc, #472]	; (80018a4 <HAL_RCC_OscConfig+0x4f4>)
 80016cc:	4b75      	ldr	r3, [pc, #468]	; (80018a4 <HAL_RCC_OscConfig+0x4f4>)
 80016ce:	6a1b      	ldr	r3, [r3, #32]
 80016d0:	f023 0301 	bic.w	r3, r3, #1
 80016d4:	6213      	str	r3, [r2, #32]
 80016d6:	4a73      	ldr	r2, [pc, #460]	; (80018a4 <HAL_RCC_OscConfig+0x4f4>)
 80016d8:	4b72      	ldr	r3, [pc, #456]	; (80018a4 <HAL_RCC_OscConfig+0x4f4>)
 80016da:	6a1b      	ldr	r3, [r3, #32]
 80016dc:	f023 0304 	bic.w	r3, r3, #4
 80016e0:	6213      	str	r3, [r2, #32]
 80016e2:	e01c      	b.n	800171e <HAL_RCC_OscConfig+0x36e>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	2b05      	cmp	r3, #5
 80016ea:	d10c      	bne.n	8001706 <HAL_RCC_OscConfig+0x356>
 80016ec:	4a6d      	ldr	r2, [pc, #436]	; (80018a4 <HAL_RCC_OscConfig+0x4f4>)
 80016ee:	4b6d      	ldr	r3, [pc, #436]	; (80018a4 <HAL_RCC_OscConfig+0x4f4>)
 80016f0:	6a1b      	ldr	r3, [r3, #32]
 80016f2:	f043 0304 	orr.w	r3, r3, #4
 80016f6:	6213      	str	r3, [r2, #32]
 80016f8:	4a6a      	ldr	r2, [pc, #424]	; (80018a4 <HAL_RCC_OscConfig+0x4f4>)
 80016fa:	4b6a      	ldr	r3, [pc, #424]	; (80018a4 <HAL_RCC_OscConfig+0x4f4>)
 80016fc:	6a1b      	ldr	r3, [r3, #32]
 80016fe:	f043 0301 	orr.w	r3, r3, #1
 8001702:	6213      	str	r3, [r2, #32]
 8001704:	e00b      	b.n	800171e <HAL_RCC_OscConfig+0x36e>
 8001706:	4a67      	ldr	r2, [pc, #412]	; (80018a4 <HAL_RCC_OscConfig+0x4f4>)
 8001708:	4b66      	ldr	r3, [pc, #408]	; (80018a4 <HAL_RCC_OscConfig+0x4f4>)
 800170a:	6a1b      	ldr	r3, [r3, #32]
 800170c:	f023 0301 	bic.w	r3, r3, #1
 8001710:	6213      	str	r3, [r2, #32]
 8001712:	4a64      	ldr	r2, [pc, #400]	; (80018a4 <HAL_RCC_OscConfig+0x4f4>)
 8001714:	4b63      	ldr	r3, [pc, #396]	; (80018a4 <HAL_RCC_OscConfig+0x4f4>)
 8001716:	6a1b      	ldr	r3, [r3, #32]
 8001718:	f023 0304 	bic.w	r3, r3, #4
 800171c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d015      	beq.n	8001752 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001726:	f7fe fd69 	bl	80001fc <HAL_GetTick>
 800172a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800172c:	e00a      	b.n	8001744 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800172e:	f7fe fd65 	bl	80001fc <HAL_GetTick>
 8001732:	4602      	mov	r2, r0
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	f241 3288 	movw	r2, #5000	; 0x1388
 800173c:	4293      	cmp	r3, r2
 800173e:	d901      	bls.n	8001744 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e0ab      	b.n	800189c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001744:	4b57      	ldr	r3, [pc, #348]	; (80018a4 <HAL_RCC_OscConfig+0x4f4>)
 8001746:	6a1b      	ldr	r3, [r3, #32]
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d0ee      	beq.n	800172e <HAL_RCC_OscConfig+0x37e>
 8001750:	e014      	b.n	800177c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001752:	f7fe fd53 	bl	80001fc <HAL_GetTick>
 8001756:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001758:	e00a      	b.n	8001770 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800175a:	f7fe fd4f 	bl	80001fc <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	f241 3288 	movw	r2, #5000	; 0x1388
 8001768:	4293      	cmp	r3, r2
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e095      	b.n	800189c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001770:	4b4c      	ldr	r3, [pc, #304]	; (80018a4 <HAL_RCC_OscConfig+0x4f4>)
 8001772:	6a1b      	ldr	r3, [r3, #32]
 8001774:	f003 0302 	and.w	r3, r3, #2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d1ee      	bne.n	800175a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800177c:	7dfb      	ldrb	r3, [r7, #23]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d105      	bne.n	800178e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001782:	4a48      	ldr	r2, [pc, #288]	; (80018a4 <HAL_RCC_OscConfig+0x4f4>)
 8001784:	4b47      	ldr	r3, [pc, #284]	; (80018a4 <HAL_RCC_OscConfig+0x4f4>)
 8001786:	69db      	ldr	r3, [r3, #28]
 8001788:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800178c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	69db      	ldr	r3, [r3, #28]
 8001792:	2b00      	cmp	r3, #0
 8001794:	f000 8081 	beq.w	800189a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001798:	4b42      	ldr	r3, [pc, #264]	; (80018a4 <HAL_RCC_OscConfig+0x4f4>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f003 030c 	and.w	r3, r3, #12
 80017a0:	2b08      	cmp	r3, #8
 80017a2:	d061      	beq.n	8001868 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	69db      	ldr	r3, [r3, #28]
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d146      	bne.n	800183a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ac:	4b3f      	ldr	r3, [pc, #252]	; (80018ac <HAL_RCC_OscConfig+0x4fc>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b2:	f7fe fd23 	bl	80001fc <HAL_GetTick>
 80017b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017b8:	e008      	b.n	80017cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ba:	f7fe fd1f 	bl	80001fc <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e067      	b.n	800189c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017cc:	4b35      	ldr	r3, [pc, #212]	; (80018a4 <HAL_RCC_OscConfig+0x4f4>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d1f0      	bne.n	80017ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a1b      	ldr	r3, [r3, #32]
 80017dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017e0:	d108      	bne.n	80017f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017e2:	4930      	ldr	r1, [pc, #192]	; (80018a4 <HAL_RCC_OscConfig+0x4f4>)
 80017e4:	4b2f      	ldr	r3, [pc, #188]	; (80018a4 <HAL_RCC_OscConfig+0x4f4>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017f4:	482b      	ldr	r0, [pc, #172]	; (80018a4 <HAL_RCC_OscConfig+0x4f4>)
 80017f6:	4b2b      	ldr	r3, [pc, #172]	; (80018a4 <HAL_RCC_OscConfig+0x4f4>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a19      	ldr	r1, [r3, #32]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001806:	430b      	orrs	r3, r1
 8001808:	4313      	orrs	r3, r2
 800180a:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800180c:	4b27      	ldr	r3, [pc, #156]	; (80018ac <HAL_RCC_OscConfig+0x4fc>)
 800180e:	2201      	movs	r2, #1
 8001810:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001812:	f7fe fcf3 	bl	80001fc <HAL_GetTick>
 8001816:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001818:	e008      	b.n	800182c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800181a:	f7fe fcef 	bl	80001fc <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	2b02      	cmp	r3, #2
 8001826:	d901      	bls.n	800182c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e037      	b.n	800189c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800182c:	4b1d      	ldr	r3, [pc, #116]	; (80018a4 <HAL_RCC_OscConfig+0x4f4>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d0f0      	beq.n	800181a <HAL_RCC_OscConfig+0x46a>
 8001838:	e02f      	b.n	800189a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800183a:	4b1c      	ldr	r3, [pc, #112]	; (80018ac <HAL_RCC_OscConfig+0x4fc>)
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001840:	f7fe fcdc 	bl	80001fc <HAL_GetTick>
 8001844:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001846:	e008      	b.n	800185a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001848:	f7fe fcd8 	bl	80001fc <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b02      	cmp	r3, #2
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e020      	b.n	800189c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800185a:	4b12      	ldr	r3, [pc, #72]	; (80018a4 <HAL_RCC_OscConfig+0x4f4>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d1f0      	bne.n	8001848 <HAL_RCC_OscConfig+0x498>
 8001866:	e018      	b.n	800189a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	69db      	ldr	r3, [r3, #28]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d101      	bne.n	8001874 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e013      	b.n	800189c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001874:	4b0b      	ldr	r3, [pc, #44]	; (80018a4 <HAL_RCC_OscConfig+0x4f4>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6a1b      	ldr	r3, [r3, #32]
 8001884:	429a      	cmp	r2, r3
 8001886:	d106      	bne.n	8001896 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001892:	429a      	cmp	r2, r3
 8001894:	d001      	beq.n	800189a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e000      	b.n	800189c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800189a:	2300      	movs	r3, #0
}
 800189c:	4618      	mov	r0, r3
 800189e:	3718      	adds	r7, #24
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40021000 	.word	0x40021000
 80018a8:	40007000 	.word	0x40007000
 80018ac:	42420060 	.word	0x42420060

080018b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d101      	bne.n	80018c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e0d0      	b.n	8001a66 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018c4:	4b6a      	ldr	r3, [pc, #424]	; (8001a70 <HAL_RCC_ClockConfig+0x1c0>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0207 	and.w	r2, r3, #7
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d210      	bcs.n	80018f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018d2:	4967      	ldr	r1, [pc, #412]	; (8001a70 <HAL_RCC_ClockConfig+0x1c0>)
 80018d4:	4b66      	ldr	r3, [pc, #408]	; (8001a70 <HAL_RCC_ClockConfig+0x1c0>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f023 0207 	bic.w	r2, r3, #7
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	4313      	orrs	r3, r2
 80018e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018e2:	4b63      	ldr	r3, [pc, #396]	; (8001a70 <HAL_RCC_ClockConfig+0x1c0>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0207 	and.w	r2, r3, #7
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d001      	beq.n	80018f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e0b8      	b.n	8001a66 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0302 	and.w	r3, r3, #2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d020      	beq.n	8001942 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0304 	and.w	r3, r3, #4
 8001908:	2b00      	cmp	r3, #0
 800190a:	d005      	beq.n	8001918 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800190c:	4a59      	ldr	r2, [pc, #356]	; (8001a74 <HAL_RCC_ClockConfig+0x1c4>)
 800190e:	4b59      	ldr	r3, [pc, #356]	; (8001a74 <HAL_RCC_ClockConfig+0x1c4>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001916:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0308 	and.w	r3, r3, #8
 8001920:	2b00      	cmp	r3, #0
 8001922:	d005      	beq.n	8001930 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001924:	4a53      	ldr	r2, [pc, #332]	; (8001a74 <HAL_RCC_ClockConfig+0x1c4>)
 8001926:	4b53      	ldr	r3, [pc, #332]	; (8001a74 <HAL_RCC_ClockConfig+0x1c4>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800192e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001930:	4950      	ldr	r1, [pc, #320]	; (8001a74 <HAL_RCC_ClockConfig+0x1c4>)
 8001932:	4b50      	ldr	r3, [pc, #320]	; (8001a74 <HAL_RCC_ClockConfig+0x1c4>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	4313      	orrs	r3, r2
 8001940:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	2b00      	cmp	r3, #0
 800194c:	d040      	beq.n	80019d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d107      	bne.n	8001966 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001956:	4b47      	ldr	r3, [pc, #284]	; (8001a74 <HAL_RCC_ClockConfig+0x1c4>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d115      	bne.n	800198e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e07f      	b.n	8001a66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	2b02      	cmp	r3, #2
 800196c:	d107      	bne.n	800197e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800196e:	4b41      	ldr	r3, [pc, #260]	; (8001a74 <HAL_RCC_ClockConfig+0x1c4>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d109      	bne.n	800198e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e073      	b.n	8001a66 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800197e:	4b3d      	ldr	r3, [pc, #244]	; (8001a74 <HAL_RCC_ClockConfig+0x1c4>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	2b00      	cmp	r3, #0
 8001988:	d101      	bne.n	800198e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e06b      	b.n	8001a66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800198e:	4939      	ldr	r1, [pc, #228]	; (8001a74 <HAL_RCC_ClockConfig+0x1c4>)
 8001990:	4b38      	ldr	r3, [pc, #224]	; (8001a74 <HAL_RCC_ClockConfig+0x1c4>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f023 0203 	bic.w	r2, r3, #3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	4313      	orrs	r3, r2
 800199e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019a0:	f7fe fc2c 	bl	80001fc <HAL_GetTick>
 80019a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019a6:	e00a      	b.n	80019be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019a8:	f7fe fc28 	bl	80001fc <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e053      	b.n	8001a66 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019be:	4b2d      	ldr	r3, [pc, #180]	; (8001a74 <HAL_RCC_ClockConfig+0x1c4>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f003 020c 	and.w	r2, r3, #12
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d1eb      	bne.n	80019a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019d0:	4b27      	ldr	r3, [pc, #156]	; (8001a70 <HAL_RCC_ClockConfig+0x1c0>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0207 	and.w	r2, r3, #7
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	429a      	cmp	r2, r3
 80019dc:	d910      	bls.n	8001a00 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019de:	4924      	ldr	r1, [pc, #144]	; (8001a70 <HAL_RCC_ClockConfig+0x1c0>)
 80019e0:	4b23      	ldr	r3, [pc, #140]	; (8001a70 <HAL_RCC_ClockConfig+0x1c0>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f023 0207 	bic.w	r2, r3, #7
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ee:	4b20      	ldr	r3, [pc, #128]	; (8001a70 <HAL_RCC_ClockConfig+0x1c0>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0207 	and.w	r2, r3, #7
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d001      	beq.n	8001a00 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e032      	b.n	8001a66 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0304 	and.w	r3, r3, #4
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d008      	beq.n	8001a1e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a0c:	4919      	ldr	r1, [pc, #100]	; (8001a74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a0e:	4b19      	ldr	r3, [pc, #100]	; (8001a74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0308 	and.w	r3, r3, #8
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d009      	beq.n	8001a3e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a2a:	4912      	ldr	r1, [pc, #72]	; (8001a74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2c:	4b11      	ldr	r3, [pc, #68]	; (8001a74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	691b      	ldr	r3, [r3, #16]
 8001a38:	00db      	lsls	r3, r3, #3
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a3e:	f000 f821 	bl	8001a84 <HAL_RCC_GetSysClockFreq>
 8001a42:	4601      	mov	r1, r0
 8001a44:	4b0b      	ldr	r3, [pc, #44]	; (8001a74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	091b      	lsrs	r3, r3, #4
 8001a4a:	f003 030f 	and.w	r3, r3, #15
 8001a4e:	4a0a      	ldr	r2, [pc, #40]	; (8001a78 <HAL_RCC_ClockConfig+0x1c8>)
 8001a50:	5cd3      	ldrb	r3, [r2, r3]
 8001a52:	fa21 f303 	lsr.w	r3, r1, r3
 8001a56:	4a09      	ldr	r2, [pc, #36]	; (8001a7c <HAL_RCC_ClockConfig+0x1cc>)
 8001a58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a5a:	4b09      	ldr	r3, [pc, #36]	; (8001a80 <HAL_RCC_ClockConfig+0x1d0>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7fe fb8a 	bl	8000178 <HAL_InitTick>

  return HAL_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3710      	adds	r7, #16
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40022000 	.word	0x40022000
 8001a74:	40021000 	.word	0x40021000
 8001a78:	08002908 	.word	0x08002908
 8001a7c:	20000008 	.word	0x20000008
 8001a80:	20000000 	.word	0x20000000

08001a84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a84:	b490      	push	{r4, r7}
 8001a86:	b08a      	sub	sp, #40	; 0x28
 8001a88:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001a8a:	4b2a      	ldr	r3, [pc, #168]	; (8001b34 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001a8c:	1d3c      	adds	r4, r7, #4
 8001a8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001a94:	4b28      	ldr	r3, [pc, #160]	; (8001b38 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a96:	881b      	ldrh	r3, [r3, #0]
 8001a98:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61fb      	str	r3, [r7, #28]
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61bb      	str	r3, [r7, #24]
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001aae:	4b23      	ldr	r3, [pc, #140]	; (8001b3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	f003 030c 	and.w	r3, r3, #12
 8001aba:	2b04      	cmp	r3, #4
 8001abc:	d002      	beq.n	8001ac4 <HAL_RCC_GetSysClockFreq+0x40>
 8001abe:	2b08      	cmp	r3, #8
 8001ac0:	d003      	beq.n	8001aca <HAL_RCC_GetSysClockFreq+0x46>
 8001ac2:	e02d      	b.n	8001b20 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ac4:	4b1e      	ldr	r3, [pc, #120]	; (8001b40 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ac6:	623b      	str	r3, [r7, #32]
      break;
 8001ac8:	e02d      	b.n	8001b26 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	0c9b      	lsrs	r3, r3, #18
 8001ace:	f003 030f 	and.w	r3, r3, #15
 8001ad2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001ad6:	4413      	add	r3, r2
 8001ad8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001adc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d013      	beq.n	8001b10 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ae8:	4b14      	ldr	r3, [pc, #80]	; (8001b3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	0c5b      	lsrs	r3, r3, #17
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001af6:	4413      	add	r3, r2
 8001af8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001afc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	4a0f      	ldr	r2, [pc, #60]	; (8001b40 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b02:	fb02 f203 	mul.w	r2, r2, r3
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b0e:	e004      	b.n	8001b1a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	4a0c      	ldr	r2, [pc, #48]	; (8001b44 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b14:	fb02 f303 	mul.w	r3, r2, r3
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1c:	623b      	str	r3, [r7, #32]
      break;
 8001b1e:	e002      	b.n	8001b26 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b20:	4b07      	ldr	r3, [pc, #28]	; (8001b40 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b22:	623b      	str	r3, [r7, #32]
      break;
 8001b24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b26:	6a3b      	ldr	r3, [r7, #32]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3728      	adds	r7, #40	; 0x28
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bc90      	pop	{r4, r7}
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	080028e0 	.word	0x080028e0
 8001b38:	080028f0 	.word	0x080028f0
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	007a1200 	.word	0x007a1200
 8001b44:	003d0900 	.word	0x003d0900

08001b48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b4c:	4b02      	ldr	r3, [pc, #8]	; (8001b58 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bc80      	pop	{r7}
 8001b56:	4770      	bx	lr
 8001b58:	20000008 	.word	0x20000008

08001b5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b60:	f7ff fff2 	bl	8001b48 <HAL_RCC_GetHCLKFreq>
 8001b64:	4601      	mov	r1, r0
 8001b66:	4b05      	ldr	r3, [pc, #20]	; (8001b7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	0a1b      	lsrs	r3, r3, #8
 8001b6c:	f003 0307 	and.w	r3, r3, #7
 8001b70:	4a03      	ldr	r2, [pc, #12]	; (8001b80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b72:	5cd3      	ldrb	r3, [r2, r3]
 8001b74:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	08002918 	.word	0x08002918

08001b84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b88:	f7ff ffde 	bl	8001b48 <HAL_RCC_GetHCLKFreq>
 8001b8c:	4601      	mov	r1, r0
 8001b8e:	4b05      	ldr	r3, [pc, #20]	; (8001ba4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	0adb      	lsrs	r3, r3, #11
 8001b94:	f003 0307 	and.w	r3, r3, #7
 8001b98:	4a03      	ldr	r2, [pc, #12]	; (8001ba8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b9a:	5cd3      	ldrb	r3, [r2, r3]
 8001b9c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	08002918 	.word	0x08002918

08001bac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001bb4:	4b0a      	ldr	r3, [pc, #40]	; (8001be0 <RCC_Delay+0x34>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a0a      	ldr	r2, [pc, #40]	; (8001be4 <RCC_Delay+0x38>)
 8001bba:	fba2 2303 	umull	r2, r3, r2, r3
 8001bbe:	0a5b      	lsrs	r3, r3, #9
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	fb02 f303 	mul.w	r3, r2, r3
 8001bc6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001bc8:	bf00      	nop
  }
  while (Delay --);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	1e5a      	subs	r2, r3, #1
 8001bce:	60fa      	str	r2, [r7, #12]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1f9      	bne.n	8001bc8 <RCC_Delay+0x1c>
}
 8001bd4:	bf00      	nop
 8001bd6:	3714      	adds	r7, #20
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bc80      	pop	{r7}
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	20000008 	.word	0x20000008
 8001be4:	10624dd3 	.word	0x10624dd3

08001be8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	613b      	str	r3, [r7, #16]
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0301 	and.w	r3, r3, #1
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d07d      	beq.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001c04:	2300      	movs	r3, #0
 8001c06:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c08:	4b4f      	ldr	r3, [pc, #316]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c0a:	69db      	ldr	r3, [r3, #28]
 8001c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d10d      	bne.n	8001c30 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c14:	4a4c      	ldr	r2, [pc, #304]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c16:	4b4c      	ldr	r3, [pc, #304]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c18:	69db      	ldr	r3, [r3, #28]
 8001c1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c1e:	61d3      	str	r3, [r2, #28]
 8001c20:	4b49      	ldr	r3, [pc, #292]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c22:	69db      	ldr	r3, [r3, #28]
 8001c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c28:	60bb      	str	r3, [r7, #8]
 8001c2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c30:	4b46      	ldr	r3, [pc, #280]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d118      	bne.n	8001c6e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c3c:	4a43      	ldr	r2, [pc, #268]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c3e:	4b43      	ldr	r3, [pc, #268]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c46:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c48:	f7fe fad8 	bl	80001fc <HAL_GetTick>
 8001c4c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c4e:	e008      	b.n	8001c62 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c50:	f7fe fad4 	bl	80001fc <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b64      	cmp	r3, #100	; 0x64
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e06d      	b.n	8001d3e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c62:	4b3a      	ldr	r3, [pc, #232]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d0f0      	beq.n	8001c50 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c6e:	4b36      	ldr	r3, [pc, #216]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c70:	6a1b      	ldr	r3, [r3, #32]
 8001c72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c76:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d02e      	beq.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d027      	beq.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c8c:	4b2e      	ldr	r3, [pc, #184]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c8e:	6a1b      	ldr	r3, [r3, #32]
 8001c90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c94:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c96:	4b2e      	ldr	r3, [pc, #184]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001c98:	2201      	movs	r2, #1
 8001c9a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c9c:	4b2c      	ldr	r3, [pc, #176]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001ca2:	4a29      	ldr	r2, [pc, #164]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d014      	beq.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb2:	f7fe faa3 	bl	80001fc <HAL_GetTick>
 8001cb6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cb8:	e00a      	b.n	8001cd0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cba:	f7fe fa9f 	bl	80001fc <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e036      	b.n	8001d3e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cd0:	4b1d      	ldr	r3, [pc, #116]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cd2:	6a1b      	ldr	r3, [r3, #32]
 8001cd4:	f003 0302 	and.w	r3, r3, #2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d0ee      	beq.n	8001cba <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001cdc:	491a      	ldr	r1, [pc, #104]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cde:	4b1a      	ldr	r3, [pc, #104]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ce0:	6a1b      	ldr	r3, [r3, #32]
 8001ce2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001cee:	7dfb      	ldrb	r3, [r7, #23]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d105      	bne.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cf4:	4a14      	ldr	r2, [pc, #80]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cf6:	4b14      	ldr	r3, [pc, #80]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cf8:	69db      	ldr	r3, [r3, #28]
 8001cfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cfe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0302 	and.w	r3, r3, #2
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d008      	beq.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001d0c:	490e      	ldr	r1, [pc, #56]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d0e:	4b0e      	ldr	r3, [pc, #56]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0310 	and.w	r3, r3, #16
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d008      	beq.n	8001d3c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001d2a:	4907      	ldr	r1, [pc, #28]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d2c:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3718      	adds	r7, #24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	40007000 	.word	0x40007000
 8001d50:	42420440 	.word	0x42420440

08001d54 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001d54:	b590      	push	{r4, r7, lr}
 8001d56:	b08d      	sub	sp, #52	; 0x34
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001d5c:	4b55      	ldr	r3, [pc, #340]	; (8001eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8001d5e:	f107 040c 	add.w	r4, r7, #12
 8001d62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001d68:	4b53      	ldr	r3, [pc, #332]	; (8001eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8001d6a:	881b      	ldrh	r3, [r3, #0]
 8001d6c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	627b      	str	r3, [r7, #36]	; 0x24
 8001d72:	2300      	movs	r3, #0
 8001d74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d76:	2300      	movs	r3, #0
 8001d78:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	61fb      	str	r3, [r7, #28]
 8001d7e:	2300      	movs	r3, #0
 8001d80:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d07f      	beq.n	8001e88 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8001d88:	2b10      	cmp	r3, #16
 8001d8a:	d002      	beq.n	8001d92 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d048      	beq.n	8001e22 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8001d90:	e08b      	b.n	8001eaa <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8001d92:	4b4a      	ldr	r3, [pc, #296]	; (8001ebc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001d98:	4b48      	ldr	r3, [pc, #288]	; (8001ebc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d07f      	beq.n	8001ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	0c9b      	lsrs	r3, r3, #18
 8001da8:	f003 030f 	and.w	r3, r3, #15
 8001dac:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001db0:	4413      	add	r3, r2
 8001db2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001db6:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d018      	beq.n	8001df4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001dc2:	4b3e      	ldr	r3, [pc, #248]	; (8001ebc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	0c5b      	lsrs	r3, r3, #17
 8001dc8:	f003 0301 	and.w	r3, r3, #1
 8001dcc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001dd0:	4413      	add	r3, r2
 8001dd2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001dd6:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d00d      	beq.n	8001dfe <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001de2:	4a37      	ldr	r2, [pc, #220]	; (8001ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8001de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dea:	6a3a      	ldr	r2, [r7, #32]
 8001dec:	fb02 f303 	mul.w	r3, r2, r3
 8001df0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001df2:	e004      	b.n	8001dfe <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001df4:	6a3b      	ldr	r3, [r7, #32]
 8001df6:	4a33      	ldr	r2, [pc, #204]	; (8001ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001df8:	fb02 f303 	mul.w	r3, r2, r3
 8001dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001dfe:	4b2f      	ldr	r3, [pc, #188]	; (8001ebc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e0a:	d102      	bne.n	8001e12 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8001e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e0e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001e10:	e048      	b.n	8001ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8001e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	4a2c      	ldr	r2, [pc, #176]	; (8001ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8001e18:	fba2 2303 	umull	r2, r3, r2, r3
 8001e1c:	085b      	lsrs	r3, r3, #1
 8001e1e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001e20:	e040      	b.n	8001ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8001e22:	4b26      	ldr	r3, [pc, #152]	; (8001ebc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001e24:	6a1b      	ldr	r3, [r3, #32]
 8001e26:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e32:	d108      	bne.n	8001e46 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8001e3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e42:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e44:	e01f      	b.n	8001e86 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e50:	d109      	bne.n	8001e66 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8001e52:	4b1a      	ldr	r3, [pc, #104]	; (8001ebc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d003      	beq.n	8001e66 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8001e5e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8001e62:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e64:	e00f      	b.n	8001e86 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001e70:	d11a      	bne.n	8001ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8001e72:	4b12      	ldr	r3, [pc, #72]	; (8001ebc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d014      	beq.n	8001ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8001e7e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8001e82:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001e84:	e010      	b.n	8001ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8001e86:	e00f      	b.n	8001ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001e88:	f7ff fe7c 	bl	8001b84 <HAL_RCC_GetPCLK2Freq>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	4b0b      	ldr	r3, [pc, #44]	; (8001ebc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	0b9b      	lsrs	r3, r3, #14
 8001e94:	f003 0303 	and.w	r3, r3, #3
 8001e98:	3301      	adds	r3, #1
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001ea2:	e002      	b.n	8001eaa <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8001ea4:	bf00      	nop
 8001ea6:	e000      	b.n	8001eaa <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8001ea8:	bf00      	nop
    }
  }
  return (frequency);
 8001eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3734      	adds	r7, #52	; 0x34
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd90      	pop	{r4, r7, pc}
 8001eb4:	080028f4 	.word	0x080028f4
 8001eb8:	08002904 	.word	0x08002904
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	007a1200 	.word	0x007a1200
 8001ec4:	003d0900 	.word	0x003d0900
 8001ec8:	aaaaaaab 	.word	0xaaaaaaab

08001ecc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e03f      	b.n	8001f5e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d106      	bne.n	8001ef8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 fc12 	bl	800271c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2224      	movs	r2, #36	; 0x24
 8001efc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	6812      	ldr	r2, [r2, #0]
 8001f08:	68d2      	ldr	r2, [r2, #12]
 8001f0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f000 f829 	bl	8001f68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	6812      	ldr	r2, [r2, #0]
 8001f1e:	6912      	ldr	r2, [r2, #16]
 8001f20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	6812      	ldr	r2, [r2, #0]
 8001f2e:	6952      	ldr	r2, [r2, #20]
 8001f30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	6812      	ldr	r2, [r2, #0]
 8001f3e:	68d2      	ldr	r2, [r2, #12]
 8001f40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2220      	movs	r2, #32
 8001f50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2220      	movs	r2, #32
 8001f58:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
	...

08001f68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f68:	b590      	push	{r4, r7, lr}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	6812      	ldr	r2, [r2, #0]
 8001f78:	6912      	ldr	r2, [r2, #16]
 8001f7a:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	68d2      	ldr	r2, [r2, #12]
 8001f82:	430a      	orrs	r2, r1
 8001f84:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	689a      	ldr	r2, [r3, #8]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	695b      	ldr	r3, [r3, #20]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001fa6:	f023 030c 	bic.w	r3, r3, #12
 8001faa:	68b9      	ldr	r1, [r7, #8]
 8001fac:	430b      	orrs	r3, r1
 8001fae:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	6812      	ldr	r2, [r2, #0]
 8001fb8:	6952      	ldr	r2, [r2, #20]
 8001fba:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	6992      	ldr	r2, [r2, #24]
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a2c      	ldr	r2, [pc, #176]	; (800207c <UART_SetConfig+0x114>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d103      	bne.n	8001fd8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001fd0:	f7ff fdd8 	bl	8001b84 <HAL_RCC_GetPCLK2Freq>
 8001fd4:	60f8      	str	r0, [r7, #12]
 8001fd6:	e002      	b.n	8001fde <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001fd8:	f7ff fdc0 	bl	8001b5c <HAL_RCC_GetPCLK1Freq>
 8001fdc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6819      	ldr	r1, [r3, #0]
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	4413      	add	r3, r2
 8001fea:	009a      	lsls	r2, r3, #2
 8001fec:	441a      	add	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff8:	4a21      	ldr	r2, [pc, #132]	; (8002080 <UART_SetConfig+0x118>)
 8001ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffe:	095b      	lsrs	r3, r3, #5
 8002000:	0118      	lsls	r0, r3, #4
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	4613      	mov	r3, r2
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	4413      	add	r3, r2
 800200a:	009a      	lsls	r2, r3, #2
 800200c:	441a      	add	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	fbb2 f2f3 	udiv	r2, r2, r3
 8002018:	4b19      	ldr	r3, [pc, #100]	; (8002080 <UART_SetConfig+0x118>)
 800201a:	fba3 4302 	umull	r4, r3, r3, r2
 800201e:	095b      	lsrs	r3, r3, #5
 8002020:	2464      	movs	r4, #100	; 0x64
 8002022:	fb04 f303 	mul.w	r3, r4, r3
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	011b      	lsls	r3, r3, #4
 800202a:	3332      	adds	r3, #50	; 0x32
 800202c:	4a14      	ldr	r2, [pc, #80]	; (8002080 <UART_SetConfig+0x118>)
 800202e:	fba2 2303 	umull	r2, r3, r2, r3
 8002032:	095b      	lsrs	r3, r3, #5
 8002034:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002038:	4418      	add	r0, r3
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	4613      	mov	r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	4413      	add	r3, r2
 8002042:	009a      	lsls	r2, r3, #2
 8002044:	441a      	add	r2, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002050:	4b0b      	ldr	r3, [pc, #44]	; (8002080 <UART_SetConfig+0x118>)
 8002052:	fba3 4302 	umull	r4, r3, r3, r2
 8002056:	095b      	lsrs	r3, r3, #5
 8002058:	2464      	movs	r4, #100	; 0x64
 800205a:	fb04 f303 	mul.w	r3, r4, r3
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	011b      	lsls	r3, r3, #4
 8002062:	3332      	adds	r3, #50	; 0x32
 8002064:	4a06      	ldr	r2, [pc, #24]	; (8002080 <UART_SetConfig+0x118>)
 8002066:	fba2 2303 	umull	r2, r3, r2, r3
 800206a:	095b      	lsrs	r3, r3, #5
 800206c:	f003 030f 	and.w	r3, r3, #15
 8002070:	4403      	add	r3, r0
 8002072:	608b      	str	r3, [r1, #8]
#endif /* USART_CR1_OVER8 */
}
 8002074:	bf00      	nop
 8002076:	3714      	adds	r7, #20
 8002078:	46bd      	mov	sp, r7
 800207a:	bd90      	pop	{r4, r7, pc}
 800207c:	40013800 	.word	0x40013800
 8002080:	51eb851f 	.word	0x51eb851f

08002084 <EVMS2_init>:
 *  Discribtion : TO initialize ADC , Transmit values of Breaks through UART
 *  Inputs 	   : NONE
 *  Outputs     : NONE
 */
void EVMS2_init(void)
{  
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
	// Start ADC Conversion
	HAL_ADC_Start(&hadc1);
 8002088:	480a      	ldr	r0, [pc, #40]	; (80020b4 <EVMS2_init+0x30>)
 800208a:	f7fe f9bb 	bl	8000404 <HAL_ADC_Start>

	//sprintf(UART_message, "%d/n", ADC_values[2]);

	//HAL_UART_Transmit(&huart3, UART_message, sizeof(UART_message), 50);
	// Poll ADC1 Perihperal & TimeOut = 5mSec
	HAL_ADC_PollForConversion(&hadc1, 5);
 800208e:	2105      	movs	r1, #5
 8002090:	4808      	ldr	r0, [pc, #32]	; (80020b4 <EVMS2_init+0x30>)
 8002092:	f7fe fa65 	bl	8000560 <HAL_ADC_PollForConversion>

	_ADC_BrakesValues[0] = HAL_ADC_GetValue(&hadc1);
 8002096:	4807      	ldr	r0, [pc, #28]	; (80020b4 <EVMS2_init+0x30>)
 8002098:	f7fe fb5c 	bl	8000754 <HAL_ADC_GetValue>
 800209c:	4603      	mov	r3, r0
 800209e:	b29a      	uxth	r2, r3
 80020a0:	4b05      	ldr	r3, [pc, #20]	; (80020b8 <EVMS2_init+0x34>)
 80020a2:	801a      	strh	r2, [r3, #0]

	//HAL_ADC_Start_DMA(&hadc1,&_ADC_BrakesValues,DMA_LENGTH);
	//sprintf(MSG, "%d\r\n", _ADC_BrakesValues[0]);
	//HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);

	HAL_GPIO_WritePin(EVMS_RELAY_GPIO_Port,EVMS_RELAY_Pin,NOERROR);
 80020a4:	2200      	movs	r2, #0
 80020a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020aa:	4804      	ldr	r0, [pc, #16]	; (80020bc <EVMS2_init+0x38>)
 80020ac:	f7ff f967 	bl	800137e <HAL_GPIO_WritePin>

}//end FUNC EVMS2_init
 80020b0:	bf00      	nop
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	20000034 	.word	0x20000034
 80020b8:	20000030 	.word	0x20000030
 80020bc:	40010800 	.word	0x40010800

080020c0 <ADC_uint16ReadBrakes>:
                 and  take average value of break angle on 10 stages
 *  Inputs 	   : NONE
 *  Outputs     : uint16_t (brakes_read/10)
 */
uint16_t ADC_uint16ReadBrakes(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
	uint16_t brakes_read  = 0 ;
 80020c6:	2300      	movs	r3, #0
 80020c8:	80fb      	strh	r3, [r7, #6]

	for(int i=0;i<10;i++)
 80020ca:	2300      	movs	r3, #0
 80020cc:	603b      	str	r3, [r7, #0]
 80020ce:	e007      	b.n	80020e0 <ADC_uint16ReadBrakes+0x20>
	{
		brakes_read+=_ADC_BrakesValues[0];
 80020d0:	4b0a      	ldr	r3, [pc, #40]	; (80020fc <ADC_uint16ReadBrakes+0x3c>)
 80020d2:	881a      	ldrh	r2, [r3, #0]
 80020d4:	88fb      	ldrh	r3, [r7, #6]
 80020d6:	4413      	add	r3, r2
 80020d8:	80fb      	strh	r3, [r7, #6]
	for(int i=0;i<10;i++)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	3301      	adds	r3, #1
 80020de:	603b      	str	r3, [r7, #0]
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	2b09      	cmp	r3, #9
 80020e4:	ddf4      	ble.n	80020d0 <ADC_uint16ReadBrakes+0x10>
	}//end for 

	return (brakes_read/10);
 80020e6:	88fb      	ldrh	r3, [r7, #6]
 80020e8:	4a05      	ldr	r2, [pc, #20]	; (8002100 <ADC_uint16ReadBrakes+0x40>)
 80020ea:	fba2 2303 	umull	r2, r3, r2, r3
 80020ee:	08db      	lsrs	r3, r3, #3
 80020f0:	b29b      	uxth	r3, r3

}//end FUNC ADC_uint16ReadBrakes
 80020f2:	4618      	mov	r0, r3
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bc80      	pop	{r7}
 80020fa:	4770      	bx	lr
 80020fc:	20000030 	.word	0x20000030
 8002100:	cccccccd 	.word	0xcccccccd

08002104 <LOGIC_uint8CheckIMD>:
 *                and return TRUE or FAlSE based on the comparision
 *  Inputs 	   : NONE
 *  Outputs     : uint8_t
 */
uint8_t LOGIC_uint8CheckIMD()
{
 8002104:	b598      	push	{r3, r4, r7, lr}
 8002106:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(IMD_RELAY_FB_GPIO_Port,IMD_RELAY_FB_Pin) != HAL_GPIO_ReadPin(IMD_FB_GPIO_Port,IMD_FB_Pin))
 8002108:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800210c:	4808      	ldr	r0, [pc, #32]	; (8002130 <LOGIC_uint8CheckIMD+0x2c>)
 800210e:	f7ff f91f 	bl	8001350 <HAL_GPIO_ReadPin>
 8002112:	4603      	mov	r3, r0
 8002114:	461c      	mov	r4, r3
 8002116:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800211a:	4805      	ldr	r0, [pc, #20]	; (8002130 <LOGIC_uint8CheckIMD+0x2c>)
 800211c:	f7ff f918 	bl	8001350 <HAL_GPIO_ReadPin>
 8002120:	4603      	mov	r3, r0
 8002122:	429c      	cmp	r4, r3
 8002124:	d001      	beq.n	800212a <LOGIC_uint8CheckIMD+0x26>
	{
		return TRUE ;
 8002126:	2301      	movs	r3, #1
 8002128:	e000      	b.n	800212c <LOGIC_uint8CheckIMD+0x28>
	}//end if 

	return FALSE ;
 800212a:	2300      	movs	r3, #0

}//end FUNC LOGIC_uint8CheckIMD
 800212c:	4618      	mov	r0, r3
 800212e:	bd98      	pop	{r3, r4, r7, pc}
 8002130:	40010c00 	.word	0x40010c00

08002134 <LOGIC_uint8CheckBMS>:
 *  Discribtion : To check on  BMS feedback
 *  Inputs 	   : NONE
 *  Outputs     : uint8_t
 */
uint8_t LOGIC_uint8CheckBMS()
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
	if( HAL_GPIO_ReadPin(BMS_FB_GPIO_Port,BMS_FB_Pin) == FALSE )
 8002138:	f44f 7180 	mov.w	r1, #256	; 0x100
 800213c:	4805      	ldr	r0, [pc, #20]	; (8002154 <LOGIC_uint8CheckBMS+0x20>)
 800213e:	f7ff f907 	bl	8001350 <HAL_GPIO_ReadPin>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d101      	bne.n	800214c <LOGIC_uint8CheckBMS+0x18>
	{
		return TRUE ;
 8002148:	2301      	movs	r3, #1
 800214a:	e000      	b.n	800214e <LOGIC_uint8CheckBMS+0x1a>
	}//end if 

	return FALSE ;
 800214c:	2300      	movs	r3, #0

}//end FUNC LOGIC_uint8CheckBMS
 800214e:	4618      	mov	r0, r3
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	40010800 	.word	0x40010800

08002158 <LOGIC_uint8CheckBSPD>:
 *                and return TRUE or FAlSE based on the comparision
 *  Inputs 	   : NONE
 *  Outputs     : uint8_t
 */
uint8_t LOGIC_uint8CheckBSPD()
{
 8002158:	b598      	push	{r3, r4, r7, lr}
 800215a:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(BSPD_RELAY_FB_GPIO_Port,BSPD_RELAY_FB_Pin)!= HAL_GPIO_ReadPin(BSPD_FB_GPIO_Port,BSPD_FB_Pin))
 800215c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002160:	4808      	ldr	r0, [pc, #32]	; (8002184 <LOGIC_uint8CheckBSPD+0x2c>)
 8002162:	f7ff f8f5 	bl	8001350 <HAL_GPIO_ReadPin>
 8002166:	4603      	mov	r3, r0
 8002168:	461c      	mov	r4, r3
 800216a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800216e:	4805      	ldr	r0, [pc, #20]	; (8002184 <LOGIC_uint8CheckBSPD+0x2c>)
 8002170:	f7ff f8ee 	bl	8001350 <HAL_GPIO_ReadPin>
 8002174:	4603      	mov	r3, r0
 8002176:	429c      	cmp	r4, r3
 8002178:	d001      	beq.n	800217e <LOGIC_uint8CheckBSPD+0x26>
	{
		return  TRUE ;
 800217a:	2301      	movs	r3, #1
 800217c:	e000      	b.n	8002180 <LOGIC_uint8CheckBSPD+0x28>
	}//end if

	return FALSE ;
 800217e:	2300      	movs	r3, #0

}//end FUNC LOGIC_uint8CheckBSPD
 8002180:	4618      	mov	r0, r3
 8002182:	bd98      	pop	{r3, r4, r7, pc}
 8002184:	40010c00 	.word	0x40010c00

08002188 <isError>:
 *  Discribtion : TO check if there is any error in BSPD , BMS , IMD
 *  Inputs 	   : NONE
 *  Outputs     : uint8_t
 */
uint8_t isError(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
	_Error[BSPD_flag] = LOGIC_uint8CheckBSPD();
 800218c:	f7ff ffe4 	bl	8002158 <LOGIC_uint8CheckBSPD>
 8002190:	4603      	mov	r3, r0
 8002192:	461a      	mov	r2, r3
 8002194:	4b0b      	ldr	r3, [pc, #44]	; (80021c4 <isError+0x3c>)
 8002196:	701a      	strb	r2, [r3, #0]
	_Error[BMS_flag]  = LOGIC_uint8CheckBMS() ;
 8002198:	f7ff ffcc 	bl	8002134 <LOGIC_uint8CheckBMS>
 800219c:	4603      	mov	r3, r0
 800219e:	461a      	mov	r2, r3
 80021a0:	4b08      	ldr	r3, [pc, #32]	; (80021c4 <isError+0x3c>)
 80021a2:	705a      	strb	r2, [r3, #1]
	_Error[IMD_flag]  = LOGIC_uint8CheckIMD() ;
 80021a4:	f7ff ffae 	bl	8002104 <LOGIC_uint8CheckIMD>
 80021a8:	4603      	mov	r3, r0
 80021aa:	461a      	mov	r2, r3
 80021ac:	4b05      	ldr	r3, [pc, #20]	; (80021c4 <isError+0x3c>)
 80021ae:	709a      	strb	r2, [r3, #2]

	//if( _Error[BSPD_flag] || _Error[BMS_flag]  || _Error[IMD_flag] )
	if(_Error[IMD_flag] )
 80021b0:	4b04      	ldr	r3, [pc, #16]	; (80021c4 <isError+0x3c>)
 80021b2:	789b      	ldrb	r3, [r3, #2]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <isError+0x34>
	{
		return ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e000      	b.n	80021be <isError+0x36>
	}//end if 

	return NOERROR;
 80021bc:	2300      	movs	r3, #0

}//end FUNC isError
 80021be:	4618      	mov	r0, r3
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	20000028 	.word	0x20000028

080021c8 <LOGIC_voidControlFan>:
 *                     false --------> RESET FAN_RELAY
 *  Inputs 	   : NONE
 *  Outputs     : NONE
 */
void LOGIC_voidControlFan()
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
	if( HAL_GPIO_ReadPin(BSPD_RELAY_FB_GPIO_Port,BSPD_RELAY_FB_Pin) > FAN_THRESHOLD )
 80021cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021d0:	480a      	ldr	r0, [pc, #40]	; (80021fc <LOGIC_voidControlFan+0x34>)
 80021d2:	f7ff f8bd 	bl	8001350 <HAL_GPIO_ReadPin>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d006      	beq.n	80021ea <LOGIC_voidControlFan+0x22>
	{
		HAL_GPIO_WritePin(FAN_RELAY_GPIO_Port,FAN_RELAY_Pin,SET);
 80021dc:	2201      	movs	r2, #1
 80021de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021e2:	4807      	ldr	r0, [pc, #28]	; (8002200 <LOGIC_voidControlFan+0x38>)
 80021e4:	f7ff f8cb 	bl	800137e <HAL_GPIO_WritePin>
	else
	{
		HAL_GPIO_WritePin(FAN_RELAY_GPIO_Port,FAN_RELAY_Pin,RESET);
	}//end else 

}//end FUNC LOGIC_voidControlFan
 80021e8:	e005      	b.n	80021f6 <LOGIC_voidControlFan+0x2e>
		HAL_GPIO_WritePin(FAN_RELAY_GPIO_Port,FAN_RELAY_Pin,RESET);
 80021ea:	2200      	movs	r2, #0
 80021ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021f0:	4803      	ldr	r0, [pc, #12]	; (8002200 <LOGIC_voidControlFan+0x38>)
 80021f2:	f7ff f8c4 	bl	800137e <HAL_GPIO_WritePin>
}//end FUNC LOGIC_voidControlFan
 80021f6:	bf00      	nop
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	40010c00 	.word	0x40010c00
 8002200:	40010800 	.word	0x40010800

08002204 <LOGIC_voidControlPump>:
 *                     false --------> RESET PUMP_RELAY
 *  Inputs 	   : NONE
 *  Outputs     : NONE
 */
void LOGIC_voidControlPump()
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(IMD_RELAY_FB_GPIO_Port,IMD_RELAY_FB_Pin) || HAL_GPIO_ReadPin(BMS_FB_GPIO_Port,BMS_FB_Pin) )
 8002208:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800220c:	4814      	ldr	r0, [pc, #80]	; (8002260 <LOGIC_voidControlPump+0x5c>)
 800220e:	f7ff f89f 	bl	8001350 <HAL_GPIO_ReadPin>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d107      	bne.n	8002228 <LOGIC_voidControlPump+0x24>
 8002218:	f44f 7180 	mov.w	r1, #256	; 0x100
 800221c:	4811      	ldr	r0, [pc, #68]	; (8002264 <LOGIC_voidControlPump+0x60>)
 800221e:	f7ff f897 	bl	8001350 <HAL_GPIO_ReadPin>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d00c      	beq.n	8002242 <LOGIC_voidControlPump+0x3e>
	{
		// hnt7km fyha 3la 7sb el reading mn temperature mn el CAN
		HAL_GPIO_WritePin(PUMP_RELAY_GPIO_Port,PUMP_RELAY_Pin,SET);
 8002228:	2201      	movs	r2, #1
 800222a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800222e:	480d      	ldr	r0, [pc, #52]	; (8002264 <LOGIC_voidControlPump+0x60>)
 8002230:	f7ff f8a5 	bl	800137e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FAN_RELAY_GPIO_Port,FAN_RELAY_Pin,SET);
 8002234:	2201      	movs	r2, #1
 8002236:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800223a:	480a      	ldr	r0, [pc, #40]	; (8002264 <LOGIC_voidControlPump+0x60>)
 800223c:	f7ff f89f 	bl	800137e <HAL_GPIO_WritePin>
 8002240:	e00b      	b.n	800225a <LOGIC_voidControlPump+0x56>
	}//end if 
	else
	{
		HAL_GPIO_WritePin(PUMP_RELAY_GPIO_Port,PUMP_RELAY_Pin,RESET);
 8002242:	2200      	movs	r2, #0
 8002244:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002248:	4806      	ldr	r0, [pc, #24]	; (8002264 <LOGIC_voidControlPump+0x60>)
 800224a:	f7ff f898 	bl	800137e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FAN_RELAY_GPIO_Port,FAN_RELAY_Pin,RESET);
 800224e:	2200      	movs	r2, #0
 8002250:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002254:	4803      	ldr	r0, [pc, #12]	; (8002264 <LOGIC_voidControlPump+0x60>)
 8002256:	f7ff f892 	bl	800137e <HAL_GPIO_WritePin>
	}//end else 

}//end FUNC LOGIC_voidControlPump
 800225a:	bf00      	nop
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	40010c00 	.word	0x40010c00
 8002264:	40010800 	.word	0x40010800

08002268 <LOGIC_voidControlBrakeLight>:
 *                     false --------> RESET BRAKE_LIGHT_RELAY
 *  Inputs 	   : NONE
 *  Outputs     : NONE
 */
void LOGIC_voidControlBrakeLight()
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BRAKE_LIGHT_RELAY_GPIO_Port,BRAKE_LIGHT_RELAY_Pin,RESET);
 800226c:	2200      	movs	r2, #0
 800226e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002272:	480d      	ldr	r0, [pc, #52]	; (80022a8 <LOGIC_voidControlBrakeLight+0x40>)
 8002274:	f7ff f883 	bl	800137e <HAL_GPIO_WritePin>

	if(ADC_uint16ReadBrakes() >= BRAKE_THRESHOLD) //
 8002278:	f7ff ff22 	bl	80020c0 <ADC_uint16ReadBrakes>
 800227c:	4603      	mov	r3, r0
 800227e:	461a      	mov	r2, r3
 8002280:	f640 13b1 	movw	r3, #2481	; 0x9b1
 8002284:	429a      	cmp	r2, r3
 8002286:	d906      	bls.n	8002296 <LOGIC_voidControlBrakeLight+0x2e>
	{
		HAL_GPIO_WritePin(BRAKE_LIGHT_RELAY_GPIO_Port,BRAKE_LIGHT_RELAY_Pin,SET);
 8002288:	2201      	movs	r2, #1
 800228a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800228e:	4806      	ldr	r0, [pc, #24]	; (80022a8 <LOGIC_voidControlBrakeLight+0x40>)
 8002290:	f7ff f875 	bl	800137e <HAL_GPIO_WritePin>
	}//end if
	else
	{
		HAL_GPIO_WritePin(BRAKE_LIGHT_RELAY_GPIO_Port,BRAKE_LIGHT_RELAY_Pin,RESET);
	}//end else
}//end FUNC LOGIC_voidControlBrakeLight
 8002294:	e005      	b.n	80022a2 <LOGIC_voidControlBrakeLight+0x3a>
		HAL_GPIO_WritePin(BRAKE_LIGHT_RELAY_GPIO_Port,BRAKE_LIGHT_RELAY_Pin,RESET);
 8002296:	2200      	movs	r2, #0
 8002298:	f44f 7100 	mov.w	r1, #512	; 0x200
 800229c:	4802      	ldr	r0, [pc, #8]	; (80022a8 <LOGIC_voidControlBrakeLight+0x40>)
 800229e:	f7ff f86e 	bl	800137e <HAL_GPIO_WritePin>
}//end FUNC LOGIC_voidControlBrakeLight
 80022a2:	bf00      	nop
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	40010800 	.word	0x40010800

080022ac <Error_Action>:
 *  Discribtion : TO open the shutdown circuit and terminate
 *  Inputs 	   : NONE
 *  Outputs     : NONE
 */
void Error_Action(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
	//It's not sure that ERROR value == 0 or 1
	HAL_GPIO_WritePin(EVMS_RELAY_GPIO_Port,EVMS_RELAY_Pin,ERROR);
 80022b0:	2201      	movs	r2, #1
 80022b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022b6:	480c      	ldr	r0, [pc, #48]	; (80022e8 <Error_Action+0x3c>)
 80022b8:	f7ff f861 	bl	800137e <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 80022bc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80022c0:	f7fd ffa6 	bl	8000210 <HAL_Delay>
	HAL_GPIO_WritePin(EVMS_RELAY_GPIO_Port,EVMS_RELAY_Pin,NOERROR);
 80022c4:	2200      	movs	r2, #0
 80022c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022ca:	4807      	ldr	r0, [pc, #28]	; (80022e8 <Error_Action+0x3c>)
 80022cc:	f7ff f857 	bl	800137e <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 80022d0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80022d4:	f7fd ff9c 	bl	8000210 <HAL_Delay>
	HAL_GPIO_WritePin(EVMS_RELAY_GPIO_Port,EVMS_RELAY_Pin,ERROR);
 80022d8:	2201      	movs	r2, #1
 80022da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022de:	4802      	ldr	r0, [pc, #8]	; (80022e8 <Error_Action+0x3c>)
 80022e0:	f7ff f84d 	bl	800137e <HAL_GPIO_WritePin>

}//end FUNC Error_Action
 80022e4:	bf00      	nop
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	40010800 	.word	0x40010800

080022ec <main>:
static void MX_DMA_Init(void);

/****************************************************************************/

int main(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0

/***************************** MCU Configuration  ***************************/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */	
  HAL_Init();
 80022f0:	f7fd ff2c 	bl	800014c <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80022f4:	f000 f81e 	bl	8002334 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022f8:	f000 f8fc 	bl	80024f4 <MX_GPIO_Init>
  MX_ADC1_Init();
 80022fc:	f000 f872 	bl	80023e4 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8002300:	f000 f8b0 	bl	8002464 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8002304:	f000 f8d8 	bl	80024b8 <MX_DMA_Init>

/****************************************************************************/

HAL_ADCEx_Calibration_Start(&hadc1);
 8002308:	4809      	ldr	r0, [pc, #36]	; (8002330 <main+0x44>)
 800230a:	f7fe fbb3 	bl	8000a74 <HAL_ADCEx_Calibration_Start>

  while(1)
  {
	EVMS2_init();
 800230e:	f7ff feb9 	bl	8002084 <EVMS2_init>
	LOGIC_voidControlBrakeLight();
 8002312:	f7ff ffa9 	bl	8002268 <LOGIC_voidControlBrakeLight>
	LOGIC_voidControlFan();
 8002316:	f7ff ff57 	bl	80021c8 <LOGIC_voidControlFan>
	LOGIC_voidControlPump();
 800231a:	f7ff ff73 	bl	8002204 <LOGIC_voidControlPump>
	
    if(isError()==ERROR)
 800231e:	f7ff ff33 	bl	8002188 <isError>
 8002322:	4603      	mov	r3, r0
 8002324:	2b01      	cmp	r3, #1
 8002326:	d1f2      	bne.n	800230e <main+0x22>
    {
        Error_Action();
 8002328:	f7ff ffc0 	bl	80022ac <Error_Action>
	EVMS2_init();
 800232c:	e7ef      	b.n	800230e <main+0x22>
 800232e:	bf00      	nop
 8002330:	20000034 	.word	0x20000034

08002334 <SystemClock_Config>:
*  Discribtion : Set the system clock configuration
*  Inputs 	   : NONE
*  Outputs     : NONE
*/
void SystemClock_Config(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b094      	sub	sp, #80	; 0x50
 8002338:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800233a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800233e:	2228      	movs	r2, #40	; 0x28
 8002340:	2100      	movs	r1, #0
 8002342:	4618      	mov	r0, r3
 8002344:	f000 fab8 	bl	80028b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002348:	f107 0314 	add.w	r3, r7, #20
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	605a      	str	r2, [r3, #4]
 8002352:	609a      	str	r2, [r3, #8]
 8002354:	60da      	str	r2, [r3, #12]
 8002356:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002358:	1d3b      	adds	r3, r7, #4
 800235a:	2200      	movs	r2, #0
 800235c:	601a      	str	r2, [r3, #0]
 800235e:	605a      	str	r2, [r3, #4]
 8002360:	609a      	str	r2, [r3, #8]
 8002362:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002364:	2302      	movs	r3, #2
 8002366:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002368:	2301      	movs	r3, #1
 800236a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800236c:	2310      	movs	r3, #16
 800236e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002370:	2302      	movs	r3, #2
 8002372:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8002374:	2300      	movs	r3, #0
 8002376:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002378:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800237c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800237e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff f814 	bl	80013b0 <HAL_RCC_OscConfig>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800238e:	f000 f925 	bl	80025dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002392:	230f      	movs	r3, #15
 8002394:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002396:	2302      	movs	r3, #2
 8002398:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800239a:	2300      	movs	r3, #0
 800239c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800239e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023a2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023a4:	2300      	movs	r3, #0
 80023a6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80023a8:	f107 0314 	add.w	r3, r7, #20
 80023ac:	2101      	movs	r1, #1
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7ff fa7e 	bl	80018b0 <HAL_RCC_ClockConfig>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80023ba:	f000 f90f 	bl	80025dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80023be:	2302      	movs	r3, #2
 80023c0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 80023c2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80023c6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023c8:	1d3b      	adds	r3, r7, #4
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff fc0c 	bl	8001be8 <HAL_RCCEx_PeriphCLKConfig>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80023d6:	f000 f901 	bl	80025dc <Error_Handler>
  }
}
 80023da:	bf00      	nop
 80023dc:	3750      	adds	r7, #80	; 0x50
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
	...

080023e4 <MX_ADC1_Init>:
*  Discribtion : Initialaize ADC1
*  Inputs 	   : NONE
*  Outputs     : NONE
*/
static void MX_ADC1_Init(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0

  ADC_ChannelConfTypeDef sConfig = {0};
 80023ea:	1d3b      	adds	r3, r7, #4
 80023ec:	2200      	movs	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]
 80023f0:	605a      	str	r2, [r3, #4]
 80023f2:	609a      	str	r2, [r3, #8]

  hadc1.Instance = ADC1;
 80023f4:	4b19      	ldr	r3, [pc, #100]	; (800245c <MX_ADC1_Init+0x78>)
 80023f6:	4a1a      	ldr	r2, [pc, #104]	; (8002460 <MX_ADC1_Init+0x7c>)
 80023f8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80023fa:	4b18      	ldr	r3, [pc, #96]	; (800245c <MX_ADC1_Init+0x78>)
 80023fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002400:	609a      	str	r2, [r3, #8]
  //hadc1.Init.ScanConvMode = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002402:	4b16      	ldr	r3, [pc, #88]	; (800245c <MX_ADC1_Init+0x78>)
 8002404:	2200      	movs	r2, #0
 8002406:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002408:	4b14      	ldr	r3, [pc, #80]	; (800245c <MX_ADC1_Init+0x78>)
 800240a:	2200      	movs	r2, #0
 800240c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800240e:	4b13      	ldr	r3, [pc, #76]	; (800245c <MX_ADC1_Init+0x78>)
 8002410:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002414:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002416:	4b11      	ldr	r3, [pc, #68]	; (800245c <MX_ADC1_Init+0x78>)
 8002418:	2200      	movs	r2, #0
 800241a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800241c:	4b0f      	ldr	r3, [pc, #60]	; (800245c <MX_ADC1_Init+0x78>)
 800241e:	2201      	movs	r2, #1
 8002420:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002422:	480e      	ldr	r0, [pc, #56]	; (800245c <MX_ADC1_Init+0x78>)
 8002424:	f7fd ff16 	bl	8000254 <HAL_ADC_Init>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800242e:	f000 f8d5 	bl	80025dc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002432:	2300      	movs	r3, #0
 8002434:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002436:	2301      	movs	r3, #1
 8002438:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 800243a:	2306      	movs	r3, #6
 800243c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800243e:	1d3b      	adds	r3, r7, #4
 8002440:	4619      	mov	r1, r3
 8002442:	4806      	ldr	r0, [pc, #24]	; (800245c <MX_ADC1_Init+0x78>)
 8002444:	f7fe f992 	bl	800076c <HAL_ADC_ConfigChannel>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800244e:	f000 f8c5 	bl	80025dc <Error_Handler>
  }

}
 8002452:	bf00      	nop
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	20000034 	.word	0x20000034
 8002460:	40012400 	.word	0x40012400

08002464 <MX_USART2_UART_Init>:
*  Discribtion : Initialaize USART2
*  Inputs 	   : NONE
*  Outputs     : NONE
*/
static void MX_USART2_UART_Init(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002468:	4b11      	ldr	r3, [pc, #68]	; (80024b0 <MX_USART2_UART_Init+0x4c>)
 800246a:	4a12      	ldr	r2, [pc, #72]	; (80024b4 <MX_USART2_UART_Init+0x50>)
 800246c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800246e:	4b10      	ldr	r3, [pc, #64]	; (80024b0 <MX_USART2_UART_Init+0x4c>)
 8002470:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002474:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002476:	4b0e      	ldr	r3, [pc, #56]	; (80024b0 <MX_USART2_UART_Init+0x4c>)
 8002478:	2200      	movs	r2, #0
 800247a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800247c:	4b0c      	ldr	r3, [pc, #48]	; (80024b0 <MX_USART2_UART_Init+0x4c>)
 800247e:	2200      	movs	r2, #0
 8002480:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002482:	4b0b      	ldr	r3, [pc, #44]	; (80024b0 <MX_USART2_UART_Init+0x4c>)
 8002484:	2200      	movs	r2, #0
 8002486:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002488:	4b09      	ldr	r3, [pc, #36]	; (80024b0 <MX_USART2_UART_Init+0x4c>)
 800248a:	220c      	movs	r2, #12
 800248c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800248e:	4b08      	ldr	r3, [pc, #32]	; (80024b0 <MX_USART2_UART_Init+0x4c>)
 8002490:	2200      	movs	r2, #0
 8002492:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002494:	4b06      	ldr	r3, [pc, #24]	; (80024b0 <MX_USART2_UART_Init+0x4c>)
 8002496:	2200      	movs	r2, #0
 8002498:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800249a:	4805      	ldr	r0, [pc, #20]	; (80024b0 <MX_USART2_UART_Init+0x4c>)
 800249c:	f7ff fd16 	bl	8001ecc <HAL_UART_Init>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80024a6:	f000 f899 	bl	80025dc <Error_Handler>
  }

}
 80024aa:	bf00      	nop
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	200000a8 	.word	0x200000a8
 80024b4:	40004400 	.word	0x40004400

080024b8 <MX_DMA_Init>:
*  Discribtion : Enable DMA controller clock
*  Inputs 	   : NONE
*  Outputs     : NONE
*/
static void MX_DMA_Init(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80024be:	4a0c      	ldr	r2, [pc, #48]	; (80024f0 <MX_DMA_Init+0x38>)
 80024c0:	4b0b      	ldr	r3, [pc, #44]	; (80024f0 <MX_DMA_Init+0x38>)
 80024c2:	695b      	ldr	r3, [r3, #20]
 80024c4:	f043 0301 	orr.w	r3, r3, #1
 80024c8:	6153      	str	r3, [r2, #20]
 80024ca:	4b09      	ldr	r3, [pc, #36]	; (80024f0 <MX_DMA_Init+0x38>)
 80024cc:	695b      	ldr	r3, [r3, #20]
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	607b      	str	r3, [r7, #4]
 80024d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80024d6:	2200      	movs	r2, #0
 80024d8:	2100      	movs	r1, #0
 80024da:	200b      	movs	r0, #11
 80024dc:	f7fe fc3b 	bl	8000d56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80024e0:	200b      	movs	r0, #11
 80024e2:	f7fe fc54 	bl	8000d8e <HAL_NVIC_EnableIRQ>

}
 80024e6:	bf00      	nop
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	40021000 	.word	0x40021000

080024f4 <MX_GPIO_Init>:
*  Discribtion : Initialaize GPIO
*  Inputs 	   : NONE
*  Outputs     : NONE
*/
static void MX_GPIO_Init(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b088      	sub	sp, #32
 80024f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024fa:	f107 0310 	add.w	r3, r7, #16
 80024fe:	2200      	movs	r2, #0
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	605a      	str	r2, [r3, #4]
 8002504:	609a      	str	r2, [r3, #8]
 8002506:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002508:	4a31      	ldr	r2, [pc, #196]	; (80025d0 <MX_GPIO_Init+0xdc>)
 800250a:	4b31      	ldr	r3, [pc, #196]	; (80025d0 <MX_GPIO_Init+0xdc>)
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	f043 0310 	orr.w	r3, r3, #16
 8002512:	6193      	str	r3, [r2, #24]
 8002514:	4b2e      	ldr	r3, [pc, #184]	; (80025d0 <MX_GPIO_Init+0xdc>)
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	f003 0310 	and.w	r3, r3, #16
 800251c:	60fb      	str	r3, [r7, #12]
 800251e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002520:	4a2b      	ldr	r2, [pc, #172]	; (80025d0 <MX_GPIO_Init+0xdc>)
 8002522:	4b2b      	ldr	r3, [pc, #172]	; (80025d0 <MX_GPIO_Init+0xdc>)
 8002524:	699b      	ldr	r3, [r3, #24]
 8002526:	f043 0320 	orr.w	r3, r3, #32
 800252a:	6193      	str	r3, [r2, #24]
 800252c:	4b28      	ldr	r3, [pc, #160]	; (80025d0 <MX_GPIO_Init+0xdc>)
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	f003 0320 	and.w	r3, r3, #32
 8002534:	60bb      	str	r3, [r7, #8]
 8002536:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002538:	4a25      	ldr	r2, [pc, #148]	; (80025d0 <MX_GPIO_Init+0xdc>)
 800253a:	4b25      	ldr	r3, [pc, #148]	; (80025d0 <MX_GPIO_Init+0xdc>)
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	f043 0304 	orr.w	r3, r3, #4
 8002542:	6193      	str	r3, [r2, #24]
 8002544:	4b22      	ldr	r3, [pc, #136]	; (80025d0 <MX_GPIO_Init+0xdc>)
 8002546:	699b      	ldr	r3, [r3, #24]
 8002548:	f003 0304 	and.w	r3, r3, #4
 800254c:	607b      	str	r3, [r7, #4]
 800254e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002550:	4a1f      	ldr	r2, [pc, #124]	; (80025d0 <MX_GPIO_Init+0xdc>)
 8002552:	4b1f      	ldr	r3, [pc, #124]	; (80025d0 <MX_GPIO_Init+0xdc>)
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	f043 0308 	orr.w	r3, r3, #8
 800255a:	6193      	str	r3, [r2, #24]
 800255c:	4b1c      	ldr	r3, [pc, #112]	; (80025d0 <MX_GPIO_Init+0xdc>)
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	f003 0308 	and.w	r3, r3, #8
 8002564:	603b      	str	r3, [r7, #0]
 8002566:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BRAKE_LIGHT_RELAY_Pin|FAN_RELAY_Pin|PUMP_RELAY_Pin|EVMS_RELAY_Pin, GPIO_PIN_RESET);
 8002568:	2200      	movs	r2, #0
 800256a:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 800256e:	4819      	ldr	r0, [pc, #100]	; (80025d4 <MX_GPIO_Init+0xe0>)
 8002570:	f7fe ff05 	bl	800137e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BSPD_FB_Pin BSPD_RELAY_FB_Pin IMD_FB_Pin IMD_RELAY_FB_Pin */
  GPIO_InitStruct.Pin = BSPD_FB_Pin|BSPD_RELAY_FB_Pin|IMD_FB_Pin|IMD_RELAY_FB_Pin;
 8002574:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002578:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800257a:	2300      	movs	r3, #0
 800257c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257e:	2300      	movs	r3, #0
 8002580:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002582:	f107 0310 	add.w	r3, r7, #16
 8002586:	4619      	mov	r1, r3
 8002588:	4813      	ldr	r0, [pc, #76]	; (80025d8 <MX_GPIO_Init+0xe4>)
 800258a:	f7fe fd87 	bl	800109c <HAL_GPIO_Init>

  /*Configure GPIO pin : BMS_FB_Pin */
  GPIO_InitStruct.Pin = BMS_FB_Pin;
 800258e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002592:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002594:	2300      	movs	r3, #0
 8002596:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002598:	2300      	movs	r3, #0
 800259a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BMS_FB_GPIO_Port, &GPIO_InitStruct);
 800259c:	f107 0310 	add.w	r3, r7, #16
 80025a0:	4619      	mov	r1, r3
 80025a2:	480c      	ldr	r0, [pc, #48]	; (80025d4 <MX_GPIO_Init+0xe0>)
 80025a4:	f7fe fd7a 	bl	800109c <HAL_GPIO_Init>

  /*Configure GPIO pins : BRAKE_LIGHT_RELAY_Pin FAN_RELAY_Pin PUMP_RELAY_Pin EVMS_RELAY_Pin */
  GPIO_InitStruct.Pin = BRAKE_LIGHT_RELAY_Pin|FAN_RELAY_Pin|PUMP_RELAY_Pin|EVMS_RELAY_Pin;
 80025a8:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 80025ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025ae:	2301      	movs	r3, #1
 80025b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b2:	2300      	movs	r3, #0
 80025b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b6:	2302      	movs	r3, #2
 80025b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ba:	f107 0310 	add.w	r3, r7, #16
 80025be:	4619      	mov	r1, r3
 80025c0:	4804      	ldr	r0, [pc, #16]	; (80025d4 <MX_GPIO_Init+0xe0>)
 80025c2:	f7fe fd6b 	bl	800109c <HAL_GPIO_Init>

}
 80025c6:	bf00      	nop
 80025c8:	3720      	adds	r7, #32
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	40021000 	.word	0x40021000
 80025d4:	40010800 	.word	0x40010800
 80025d8:	40010c00 	.word	0x40010c00

080025dc <Error_Handler>:
*  Discribtion : This function is executed in case of error occurrence.
*  Inputs 	   : NONE
*  Outputs     : NONE
*/
void Error_Handler(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
 
}
 80025e0:	bf00      	nop
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bc80      	pop	{r7}
 80025e6:	4770      	bx	lr

080025e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80025ee:	4a15      	ldr	r2, [pc, #84]	; (8002644 <HAL_MspInit+0x5c>)
 80025f0:	4b14      	ldr	r3, [pc, #80]	; (8002644 <HAL_MspInit+0x5c>)
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	f043 0301 	orr.w	r3, r3, #1
 80025f8:	6193      	str	r3, [r2, #24]
 80025fa:	4b12      	ldr	r3, [pc, #72]	; (8002644 <HAL_MspInit+0x5c>)
 80025fc:	699b      	ldr	r3, [r3, #24]
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	60bb      	str	r3, [r7, #8]
 8002604:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002606:	4a0f      	ldr	r2, [pc, #60]	; (8002644 <HAL_MspInit+0x5c>)
 8002608:	4b0e      	ldr	r3, [pc, #56]	; (8002644 <HAL_MspInit+0x5c>)
 800260a:	69db      	ldr	r3, [r3, #28]
 800260c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002610:	61d3      	str	r3, [r2, #28]
 8002612:	4b0c      	ldr	r3, [pc, #48]	; (8002644 <HAL_MspInit+0x5c>)
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800261a:	607b      	str	r3, [r7, #4]
 800261c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800261e:	4b0a      	ldr	r3, [pc, #40]	; (8002648 <HAL_MspInit+0x60>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	60fb      	str	r3, [r7, #12]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800262a:	60fb      	str	r3, [r7, #12]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002632:	60fb      	str	r3, [r7, #12]
 8002634:	4a04      	ldr	r2, [pc, #16]	; (8002648 <HAL_MspInit+0x60>)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800263a:	bf00      	nop
 800263c:	3714      	adds	r7, #20
 800263e:	46bd      	mov	sp, r7
 8002640:	bc80      	pop	{r7}
 8002642:	4770      	bx	lr
 8002644:	40021000 	.word	0x40021000
 8002648:	40010000 	.word	0x40010000

0800264c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b088      	sub	sp, #32
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002654:	f107 0310 	add.w	r3, r7, #16
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	605a      	str	r2, [r3, #4]
 800265e:	609a      	str	r2, [r3, #8]
 8002660:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a28      	ldr	r2, [pc, #160]	; (8002708 <HAL_ADC_MspInit+0xbc>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d149      	bne.n	8002700 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800266c:	4a27      	ldr	r2, [pc, #156]	; (800270c <HAL_ADC_MspInit+0xc0>)
 800266e:	4b27      	ldr	r3, [pc, #156]	; (800270c <HAL_ADC_MspInit+0xc0>)
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002676:	6193      	str	r3, [r2, #24]
 8002678:	4b24      	ldr	r3, [pc, #144]	; (800270c <HAL_ADC_MspInit+0xc0>)
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002680:	60fb      	str	r3, [r7, #12]
 8002682:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002684:	4a21      	ldr	r2, [pc, #132]	; (800270c <HAL_ADC_MspInit+0xc0>)
 8002686:	4b21      	ldr	r3, [pc, #132]	; (800270c <HAL_ADC_MspInit+0xc0>)
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	f043 0304 	orr.w	r3, r3, #4
 800268e:	6193      	str	r3, [r2, #24]
 8002690:	4b1e      	ldr	r3, [pc, #120]	; (800270c <HAL_ADC_MspInit+0xc0>)
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	f003 0304 	and.w	r3, r3, #4
 8002698:	60bb      	str	r3, [r7, #8]
 800269a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = BREAKES_ANGLE_Pin|BRAKES_PRESSURE_Pin;
 800269c:	2303      	movs	r3, #3
 800269e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026a0:	2303      	movs	r3, #3
 80026a2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026a4:	f107 0310 	add.w	r3, r7, #16
 80026a8:	4619      	mov	r1, r3
 80026aa:	4819      	ldr	r0, [pc, #100]	; (8002710 <HAL_ADC_MspInit+0xc4>)
 80026ac:	f7fe fcf6 	bl	800109c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80026b0:	4b18      	ldr	r3, [pc, #96]	; (8002714 <HAL_ADC_MspInit+0xc8>)
 80026b2:	4a19      	ldr	r2, [pc, #100]	; (8002718 <HAL_ADC_MspInit+0xcc>)
 80026b4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026b6:	4b17      	ldr	r3, [pc, #92]	; (8002714 <HAL_ADC_MspInit+0xc8>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80026bc:	4b15      	ldr	r3, [pc, #84]	; (8002714 <HAL_ADC_MspInit+0xc8>)
 80026be:	2200      	movs	r2, #0
 80026c0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80026c2:	4b14      	ldr	r3, [pc, #80]	; (8002714 <HAL_ADC_MspInit+0xc8>)
 80026c4:	2280      	movs	r2, #128	; 0x80
 80026c6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80026c8:	4b12      	ldr	r3, [pc, #72]	; (8002714 <HAL_ADC_MspInit+0xc8>)
 80026ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026ce:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80026d0:	4b10      	ldr	r3, [pc, #64]	; (8002714 <HAL_ADC_MspInit+0xc8>)
 80026d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026d6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80026d8:	4b0e      	ldr	r3, [pc, #56]	; (8002714 <HAL_ADC_MspInit+0xc8>)
 80026da:	2220      	movs	r2, #32
 80026dc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80026de:	4b0d      	ldr	r3, [pc, #52]	; (8002714 <HAL_ADC_MspInit+0xc8>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80026e4:	480b      	ldr	r0, [pc, #44]	; (8002714 <HAL_ADC_MspInit+0xc8>)
 80026e6:	f7fe fb6d 	bl	8000dc4 <HAL_DMA_Init>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80026f0:	f7ff ff74 	bl	80025dc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4a07      	ldr	r2, [pc, #28]	; (8002714 <HAL_ADC_MspInit+0xc8>)
 80026f8:	621a      	str	r2, [r3, #32]
 80026fa:	4a06      	ldr	r2, [pc, #24]	; (8002714 <HAL_ADC_MspInit+0xc8>)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002700:	bf00      	nop
 8002702:	3720      	adds	r7, #32
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	40012400 	.word	0x40012400
 800270c:	40021000 	.word	0x40021000
 8002710:	40010800 	.word	0x40010800
 8002714:	20000064 	.word	0x20000064
 8002718:	40020008 	.word	0x40020008

0800271c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b088      	sub	sp, #32
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002724:	f107 0310 	add.w	r3, r7, #16
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	605a      	str	r2, [r3, #4]
 800272e:	609a      	str	r2, [r3, #8]
 8002730:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a1b      	ldr	r2, [pc, #108]	; (80027a4 <HAL_UART_MspInit+0x88>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d12f      	bne.n	800279c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800273c:	4a1a      	ldr	r2, [pc, #104]	; (80027a8 <HAL_UART_MspInit+0x8c>)
 800273e:	4b1a      	ldr	r3, [pc, #104]	; (80027a8 <HAL_UART_MspInit+0x8c>)
 8002740:	69db      	ldr	r3, [r3, #28]
 8002742:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002746:	61d3      	str	r3, [r2, #28]
 8002748:	4b17      	ldr	r3, [pc, #92]	; (80027a8 <HAL_UART_MspInit+0x8c>)
 800274a:	69db      	ldr	r3, [r3, #28]
 800274c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002750:	60fb      	str	r3, [r7, #12]
 8002752:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002754:	4a14      	ldr	r2, [pc, #80]	; (80027a8 <HAL_UART_MspInit+0x8c>)
 8002756:	4b14      	ldr	r3, [pc, #80]	; (80027a8 <HAL_UART_MspInit+0x8c>)
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	f043 0304 	orr.w	r3, r3, #4
 800275e:	6193      	str	r3, [r2, #24]
 8002760:	4b11      	ldr	r3, [pc, #68]	; (80027a8 <HAL_UART_MspInit+0x8c>)
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	f003 0304 	and.w	r3, r3, #4
 8002768:	60bb      	str	r3, [r7, #8]
 800276a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800276c:	2304      	movs	r3, #4
 800276e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002770:	2302      	movs	r3, #2
 8002772:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002774:	2303      	movs	r3, #3
 8002776:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002778:	f107 0310 	add.w	r3, r7, #16
 800277c:	4619      	mov	r1, r3
 800277e:	480b      	ldr	r0, [pc, #44]	; (80027ac <HAL_UART_MspInit+0x90>)
 8002780:	f7fe fc8c 	bl	800109c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002784:	2308      	movs	r3, #8
 8002786:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002788:	2300      	movs	r3, #0
 800278a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278c:	2300      	movs	r3, #0
 800278e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002790:	f107 0310 	add.w	r3, r7, #16
 8002794:	4619      	mov	r1, r3
 8002796:	4805      	ldr	r0, [pc, #20]	; (80027ac <HAL_UART_MspInit+0x90>)
 8002798:	f7fe fc80 	bl	800109c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800279c:	bf00      	nop
 800279e:	3720      	adds	r7, #32
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40004400 	.word	0x40004400
 80027a8:	40021000 	.word	0x40021000
 80027ac:	40010800 	.word	0x40010800

080027b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80027b4:	bf00      	nop
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bc80      	pop	{r7}
 80027ba:	4770      	bx	lr

080027bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027c0:	e7fe      	b.n	80027c0 <HardFault_Handler+0x4>

080027c2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027c2:	b480      	push	{r7}
 80027c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027c6:	e7fe      	b.n	80027c6 <MemManage_Handler+0x4>

080027c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027cc:	e7fe      	b.n	80027cc <BusFault_Handler+0x4>

080027ce <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027ce:	b480      	push	{r7}
 80027d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027d2:	e7fe      	b.n	80027d2 <UsageFault_Handler+0x4>

080027d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027d8:	bf00      	nop
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr

080027e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027e4:	bf00      	nop
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bc80      	pop	{r7}
 80027ea:	4770      	bx	lr

080027ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027f0:	bf00      	nop
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bc80      	pop	{r7}
 80027f6:	4770      	bx	lr

080027f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027fc:	f7fd fcec 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002800:	bf00      	nop
 8002802:	bd80      	pop	{r7, pc}

08002804 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002808:	4802      	ldr	r0, [pc, #8]	; (8002814 <DMA1_Channel1_IRQHandler+0x10>)
 800280a:	f7fe fb35 	bl	8000e78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800280e:	bf00      	nop
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	20000064 	.word	0x20000064

08002818 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800281c:	bf00      	nop
 800281e:	46bd      	mov	sp, r7
 8002820:	bc80      	pop	{r7}
 8002822:	4770      	bx	lr

08002824 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002824:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002826:	e003      	b.n	8002830 <LoopCopyDataInit>

08002828 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002828:	4b0b      	ldr	r3, [pc, #44]	; (8002858 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800282a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800282c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800282e:	3104      	adds	r1, #4

08002830 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002830:	480a      	ldr	r0, [pc, #40]	; (800285c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002832:	4b0b      	ldr	r3, [pc, #44]	; (8002860 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002834:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002836:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002838:	d3f6      	bcc.n	8002828 <CopyDataInit>
  ldr r2, =_sbss
 800283a:	4a0a      	ldr	r2, [pc, #40]	; (8002864 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800283c:	e002      	b.n	8002844 <LoopFillZerobss>

0800283e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800283e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002840:	f842 3b04 	str.w	r3, [r2], #4

08002844 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002844:	4b08      	ldr	r3, [pc, #32]	; (8002868 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002846:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002848:	d3f9      	bcc.n	800283e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800284a:	f7ff ffe5 	bl	8002818 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800284e:	f000 f80f 	bl	8002870 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002852:	f7ff fd4b 	bl	80022ec <main>
  bx lr
 8002856:	4770      	bx	lr
  ldr r3, =_sidata
 8002858:	08002928 	.word	0x08002928
  ldr r0, =_sdata
 800285c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002860:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8002864:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8002868:	200000e8 	.word	0x200000e8

0800286c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800286c:	e7fe      	b.n	800286c <ADC1_2_IRQHandler>
	...

08002870 <__libc_init_array>:
 8002870:	b570      	push	{r4, r5, r6, lr}
 8002872:	2500      	movs	r5, #0
 8002874:	4e0c      	ldr	r6, [pc, #48]	; (80028a8 <__libc_init_array+0x38>)
 8002876:	4c0d      	ldr	r4, [pc, #52]	; (80028ac <__libc_init_array+0x3c>)
 8002878:	1ba4      	subs	r4, r4, r6
 800287a:	10a4      	asrs	r4, r4, #2
 800287c:	42a5      	cmp	r5, r4
 800287e:	d109      	bne.n	8002894 <__libc_init_array+0x24>
 8002880:	f000 f822 	bl	80028c8 <_init>
 8002884:	2500      	movs	r5, #0
 8002886:	4e0a      	ldr	r6, [pc, #40]	; (80028b0 <__libc_init_array+0x40>)
 8002888:	4c0a      	ldr	r4, [pc, #40]	; (80028b4 <__libc_init_array+0x44>)
 800288a:	1ba4      	subs	r4, r4, r6
 800288c:	10a4      	asrs	r4, r4, #2
 800288e:	42a5      	cmp	r5, r4
 8002890:	d105      	bne.n	800289e <__libc_init_array+0x2e>
 8002892:	bd70      	pop	{r4, r5, r6, pc}
 8002894:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002898:	4798      	blx	r3
 800289a:	3501      	adds	r5, #1
 800289c:	e7ee      	b.n	800287c <__libc_init_array+0xc>
 800289e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028a2:	4798      	blx	r3
 80028a4:	3501      	adds	r5, #1
 80028a6:	e7f2      	b.n	800288e <__libc_init_array+0x1e>
 80028a8:	08002920 	.word	0x08002920
 80028ac:	08002920 	.word	0x08002920
 80028b0:	08002920 	.word	0x08002920
 80028b4:	08002924 	.word	0x08002924

080028b8 <memset>:
 80028b8:	4603      	mov	r3, r0
 80028ba:	4402      	add	r2, r0
 80028bc:	4293      	cmp	r3, r2
 80028be:	d100      	bne.n	80028c2 <memset+0xa>
 80028c0:	4770      	bx	lr
 80028c2:	f803 1b01 	strb.w	r1, [r3], #1
 80028c6:	e7f9      	b.n	80028bc <memset+0x4>

080028c8 <_init>:
 80028c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028ca:	bf00      	nop
 80028cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028ce:	bc08      	pop	{r3}
 80028d0:	469e      	mov	lr, r3
 80028d2:	4770      	bx	lr

080028d4 <_fini>:
 80028d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028d6:	bf00      	nop
 80028d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028da:	bc08      	pop	{r3}
 80028dc:	469e      	mov	lr, r3
 80028de:	4770      	bx	lr
