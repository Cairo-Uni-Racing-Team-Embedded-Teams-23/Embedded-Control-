
CURT 2020 SECOND EVMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002744  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002850  08002850  00012850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002890  08002890  00012890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002894  08002894  00012894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08002898  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000dc  2000000c  080028a4  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200000e8  080028a4  000200e8  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   000082f3  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000019f0  00000000  00000000  00028328  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000868  00000000  00000000  00029d18  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000780  00000000  00000000  0002a580  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000042b1  00000000  00000000  0002ad00  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000267a  00000000  00000000  0002efb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0003162b  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002068  00000000  00000000  000316a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002838 	.word	0x08002838

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002838 	.word	0x08002838

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4a08      	ldr	r2, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000154:	681b      	ldr	r3, [r3, #0]
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 fdcd 	bl	8000cfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f002 f9f6 	bl	8002558 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 fde5 	bl	8000d66 <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295
 80001b4:	f000 fdad 	bl	8000d12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	2000002c 	.word	0x2000002c

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	2000002c 	.word	0x2000002c

08000210 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b086      	sub	sp, #24
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000218:	2300      	movs	r3, #0
 800021a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800021c:	2300      	movs	r3, #0
 800021e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000220:	2300      	movs	r3, #0
 8000222:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000224:	2300      	movs	r3, #0
 8000226:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	2b00      	cmp	r3, #0
 800022c:	d101      	bne.n	8000232 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800022e:	2301      	movs	r3, #1
 8000230:	e0be      	b.n	80003b0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	689b      	ldr	r3, [r3, #8]
 8000236:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800023c:	2b00      	cmp	r3, #0
 800023e:	d109      	bne.n	8000254 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	2200      	movs	r2, #0
 8000244:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	2200      	movs	r2, #0
 800024a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800024e:	6878      	ldr	r0, [r7, #4]
 8000250:	f002 f9b4 	bl	80025bc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000254:	6878      	ldr	r0, [r7, #4]
 8000256:	f000 fbb1 	bl	80009bc <ADC_ConversionStop_Disable>
 800025a:	4603      	mov	r3, r0
 800025c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000262:	f003 0310 	and.w	r3, r3, #16
 8000266:	2b00      	cmp	r3, #0
 8000268:	f040 8099 	bne.w	800039e <HAL_ADC_Init+0x18e>
 800026c:	7dfb      	ldrb	r3, [r7, #23]
 800026e:	2b00      	cmp	r3, #0
 8000270:	f040 8095 	bne.w	800039e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000278:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800027c:	f023 0302 	bic.w	r3, r3, #2
 8000280:	f043 0202 	orr.w	r2, r3, #2
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000290:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	7b1b      	ldrb	r3, [r3, #12]
 8000296:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000298:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800029a:	68ba      	ldr	r2, [r7, #8]
 800029c:	4313      	orrs	r3, r2
 800029e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	689b      	ldr	r3, [r3, #8]
 80002a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80002a8:	d003      	beq.n	80002b2 <HAL_ADC_Init+0xa2>
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	689b      	ldr	r3, [r3, #8]
 80002ae:	2b01      	cmp	r3, #1
 80002b0:	d102      	bne.n	80002b8 <HAL_ADC_Init+0xa8>
 80002b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002b6:	e000      	b.n	80002ba <HAL_ADC_Init+0xaa>
 80002b8:	2300      	movs	r3, #0
 80002ba:	693a      	ldr	r2, [r7, #16]
 80002bc:	4313      	orrs	r3, r2
 80002be:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	7d1b      	ldrb	r3, [r3, #20]
 80002c4:	2b01      	cmp	r3, #1
 80002c6:	d119      	bne.n	80002fc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	7b1b      	ldrb	r3, [r3, #12]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d109      	bne.n	80002e4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	699b      	ldr	r3, [r3, #24]
 80002d4:	3b01      	subs	r3, #1
 80002d6:	035a      	lsls	r2, r3, #13
 80002d8:	693b      	ldr	r3, [r7, #16]
 80002da:	4313      	orrs	r3, r2
 80002dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80002e0:	613b      	str	r3, [r7, #16]
 80002e2:	e00b      	b.n	80002fc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002e8:	f043 0220 	orr.w	r2, r3, #32
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002f4:	f043 0201 	orr.w	r2, r3, #1
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	687a      	ldr	r2, [r7, #4]
 8000302:	6812      	ldr	r2, [r2, #0]
 8000304:	6852      	ldr	r2, [r2, #4]
 8000306:	f422 4169 	bic.w	r1, r2, #59648	; 0xe900
 800030a:	693a      	ldr	r2, [r7, #16]
 800030c:	430a      	orrs	r2, r1
 800030e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	681a      	ldr	r2, [r3, #0]
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	6899      	ldr	r1, [r3, #8]
 800031a:	4b27      	ldr	r3, [pc, #156]	; (80003b8 <HAL_ADC_Init+0x1a8>)
 800031c:	400b      	ands	r3, r1
 800031e:	68b9      	ldr	r1, [r7, #8]
 8000320:	430b      	orrs	r3, r1
 8000322:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	689b      	ldr	r3, [r3, #8]
 8000328:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800032c:	d003      	beq.n	8000336 <HAL_ADC_Init+0x126>
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	689b      	ldr	r3, [r3, #8]
 8000332:	2b01      	cmp	r3, #1
 8000334:	d104      	bne.n	8000340 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	691b      	ldr	r3, [r3, #16]
 800033a:	3b01      	subs	r3, #1
 800033c:	051b      	lsls	r3, r3, #20
 800033e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	687a      	ldr	r2, [r7, #4]
 8000346:	6812      	ldr	r2, [r2, #0]
 8000348:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800034a:	f422 0170 	bic.w	r1, r2, #15728640	; 0xf00000
 800034e:	68fa      	ldr	r2, [r7, #12]
 8000350:	430a      	orrs	r2, r1
 8000352:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	689a      	ldr	r2, [r3, #8]
 800035a:	4b18      	ldr	r3, [pc, #96]	; (80003bc <HAL_ADC_Init+0x1ac>)
 800035c:	4013      	ands	r3, r2
 800035e:	68ba      	ldr	r2, [r7, #8]
 8000360:	4293      	cmp	r3, r2
 8000362:	d10b      	bne.n	800037c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	2200      	movs	r2, #0
 8000368:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800036e:	f023 0303 	bic.w	r3, r3, #3
 8000372:	f043 0201 	orr.w	r2, r3, #1
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800037a:	e018      	b.n	80003ae <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000380:	f023 0312 	bic.w	r3, r3, #18
 8000384:	f043 0210 	orr.w	r2, r3, #16
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000390:	f043 0201 	orr.w	r2, r3, #1
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000398:	2301      	movs	r3, #1
 800039a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800039c:	e007      	b.n	80003ae <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003a2:	f043 0210 	orr.w	r2, r3, #16
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80003aa:	2301      	movs	r3, #1
 80003ac:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80003ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80003b0:	4618      	mov	r0, r3
 80003b2:	3718      	adds	r7, #24
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	ffe1f7fd 	.word	0xffe1f7fd
 80003bc:	ff1f0efe 	.word	0xff1f0efe

080003c0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b084      	sub	sp, #16
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80003c8:	2300      	movs	r3, #0
 80003ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80003d2:	2b01      	cmp	r3, #1
 80003d4:	d101      	bne.n	80003da <HAL_ADC_Start+0x1a>
 80003d6:	2302      	movs	r3, #2
 80003d8:	e098      	b.n	800050c <HAL_ADC_Start+0x14c>
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	2201      	movs	r2, #1
 80003de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80003e2:	6878      	ldr	r0, [r7, #4]
 80003e4:	f000 fa98 	bl	8000918 <ADC_Enable>
 80003e8:	4603      	mov	r3, r0
 80003ea:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80003ec:	7bfb      	ldrb	r3, [r7, #15]
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	f040 8087 	bne.w	8000502 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80003fc:	f023 0301 	bic.w	r3, r3, #1
 8000400:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	4a41      	ldr	r2, [pc, #260]	; (8000514 <HAL_ADC_Start+0x154>)
 800040e:	4293      	cmp	r3, r2
 8000410:	d105      	bne.n	800041e <HAL_ADC_Start+0x5e>
 8000412:	4b41      	ldr	r3, [pc, #260]	; (8000518 <HAL_ADC_Start+0x158>)
 8000414:	685b      	ldr	r3, [r3, #4]
 8000416:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800041a:	2b00      	cmp	r3, #0
 800041c:	d115      	bne.n	800044a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000422:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	685b      	ldr	r3, [r3, #4]
 8000430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000434:	2b00      	cmp	r3, #0
 8000436:	d026      	beq.n	8000486 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800043c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000440:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000448:	e01d      	b.n	8000486 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800044e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	4a2f      	ldr	r2, [pc, #188]	; (8000518 <HAL_ADC_Start+0x158>)
 800045c:	4293      	cmp	r3, r2
 800045e:	d004      	beq.n	800046a <HAL_ADC_Start+0xaa>
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4a2b      	ldr	r2, [pc, #172]	; (8000514 <HAL_ADC_Start+0x154>)
 8000466:	4293      	cmp	r3, r2
 8000468:	d10d      	bne.n	8000486 <HAL_ADC_Start+0xc6>
 800046a:	4b2b      	ldr	r3, [pc, #172]	; (8000518 <HAL_ADC_Start+0x158>)
 800046c:	685b      	ldr	r3, [r3, #4]
 800046e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000472:	2b00      	cmp	r3, #0
 8000474:	d007      	beq.n	8000486 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800047a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800047e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800048a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800048e:	2b00      	cmp	r3, #0
 8000490:	d006      	beq.n	80004a0 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000496:	f023 0206 	bic.w	r2, r3, #6
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	62da      	str	r2, [r3, #44]	; 0x2c
 800049e:	e002      	b.n	80004a6 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	2200      	movs	r2, #0
 80004a4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	2200      	movs	r2, #0
 80004aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	f06f 0202 	mvn.w	r2, #2
 80004b6:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	689b      	ldr	r3, [r3, #8]
 80004be:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80004c2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80004c6:	d113      	bne.n	80004f0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80004cc:	4a11      	ldr	r2, [pc, #68]	; (8000514 <HAL_ADC_Start+0x154>)
 80004ce:	4293      	cmp	r3, r2
 80004d0:	d105      	bne.n	80004de <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80004d2:	4b11      	ldr	r3, [pc, #68]	; (8000518 <HAL_ADC_Start+0x158>)
 80004d4:	685b      	ldr	r3, [r3, #4]
 80004d6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d108      	bne.n	80004f0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	687a      	ldr	r2, [r7, #4]
 80004e4:	6812      	ldr	r2, [r2, #0]
 80004e6:	6892      	ldr	r2, [r2, #8]
 80004e8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80004ec:	609a      	str	r2, [r3, #8]
 80004ee:	e00c      	b.n	800050a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	687a      	ldr	r2, [r7, #4]
 80004f6:	6812      	ldr	r2, [r2, #0]
 80004f8:	6892      	ldr	r2, [r2, #8]
 80004fa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80004fe:	609a      	str	r2, [r3, #8]
 8000500:	e003      	b.n	800050a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	2200      	movs	r2, #0
 8000506:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800050a:	7bfb      	ldrb	r3, [r7, #15]
}
 800050c:	4618      	mov	r0, r3
 800050e:	3710      	adds	r7, #16
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	40012800 	.word	0x40012800
 8000518:	40012400 	.word	0x40012400

0800051c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800051c:	b590      	push	{r4, r7, lr}
 800051e:	b087      	sub	sp, #28
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
 8000524:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000526:	2300      	movs	r3, #0
 8000528:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800052a:	2300      	movs	r3, #0
 800052c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800052e:	2300      	movs	r3, #0
 8000530:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000532:	f7ff fe63 	bl	80001fc <HAL_GetTick>
 8000536:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	689b      	ldr	r3, [r3, #8]
 800053e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000542:	2b00      	cmp	r3, #0
 8000544:	d00b      	beq.n	800055e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800054a:	f043 0220 	orr.w	r2, r3, #32
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	2200      	movs	r2, #0
 8000556:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800055a:	2301      	movs	r3, #1
 800055c:	e0c8      	b.n	80006f0 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	685b      	ldr	r3, [r3, #4]
 8000564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000568:	2b00      	cmp	r3, #0
 800056a:	d12a      	bne.n	80005c2 <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000572:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000576:	2b00      	cmp	r3, #0
 8000578:	d123      	bne.n	80005c2 <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800057a:	e01a      	b.n	80005b2 <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000582:	d016      	beq.n	80005b2 <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000584:	683b      	ldr	r3, [r7, #0]
 8000586:	2b00      	cmp	r3, #0
 8000588:	d007      	beq.n	800059a <HAL_ADC_PollForConversion+0x7e>
 800058a:	f7ff fe37 	bl	80001fc <HAL_GetTick>
 800058e:	4602      	mov	r2, r0
 8000590:	697b      	ldr	r3, [r7, #20]
 8000592:	1ad2      	subs	r2, r2, r3
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	429a      	cmp	r2, r3
 8000598:	d90b      	bls.n	80005b2 <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800059e:	f043 0204 	orr.w	r2, r3, #4
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	2200      	movs	r2, #0
 80005aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 80005ae:	2303      	movs	r3, #3
 80005b0:	e09e      	b.n	80006f0 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f003 0302 	and.w	r3, r3, #2
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d0dd      	beq.n	800057c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80005c0:	e06c      	b.n	800069c <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80005c2:	4b4d      	ldr	r3, [pc, #308]	; (80006f8 <HAL_ADC_PollForConversion+0x1dc>)
 80005c4:	681c      	ldr	r4, [r3, #0]
 80005c6:	2002      	movs	r0, #2
 80005c8:	f001 fba2 	bl	8001d10 <HAL_RCCEx_GetPeriphCLKFreq>
 80005cc:	4603      	mov	r3, r0
 80005ce:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	6919      	ldr	r1, [r3, #16]
 80005d8:	4b48      	ldr	r3, [pc, #288]	; (80006fc <HAL_ADC_PollForConversion+0x1e0>)
 80005da:	400b      	ands	r3, r1
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d118      	bne.n	8000612 <HAL_ADC_PollForConversion+0xf6>
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	68d9      	ldr	r1, [r3, #12]
 80005e6:	4b46      	ldr	r3, [pc, #280]	; (8000700 <HAL_ADC_PollForConversion+0x1e4>)
 80005e8:	400b      	ands	r3, r1
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d111      	bne.n	8000612 <HAL_ADC_PollForConversion+0xf6>
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	6919      	ldr	r1, [r3, #16]
 80005f4:	4b43      	ldr	r3, [pc, #268]	; (8000704 <HAL_ADC_PollForConversion+0x1e8>)
 80005f6:	400b      	ands	r3, r1
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d108      	bne.n	800060e <HAL_ADC_PollForConversion+0xf2>
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	68d9      	ldr	r1, [r3, #12]
 8000602:	4b41      	ldr	r3, [pc, #260]	; (8000708 <HAL_ADC_PollForConversion+0x1ec>)
 8000604:	400b      	ands	r3, r1
 8000606:	2b00      	cmp	r3, #0
 8000608:	d101      	bne.n	800060e <HAL_ADC_PollForConversion+0xf2>
 800060a:	2314      	movs	r3, #20
 800060c:	e020      	b.n	8000650 <HAL_ADC_PollForConversion+0x134>
 800060e:	2329      	movs	r3, #41	; 0x29
 8000610:	e01e      	b.n	8000650 <HAL_ADC_PollForConversion+0x134>
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	6919      	ldr	r1, [r3, #16]
 8000618:	4b3a      	ldr	r3, [pc, #232]	; (8000704 <HAL_ADC_PollForConversion+0x1e8>)
 800061a:	400b      	ands	r3, r1
 800061c:	2b00      	cmp	r3, #0
 800061e:	d106      	bne.n	800062e <HAL_ADC_PollForConversion+0x112>
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	68d9      	ldr	r1, [r3, #12]
 8000626:	4b38      	ldr	r3, [pc, #224]	; (8000708 <HAL_ADC_PollForConversion+0x1ec>)
 8000628:	400b      	ands	r3, r1
 800062a:	2b00      	cmp	r3, #0
 800062c:	d00d      	beq.n	800064a <HAL_ADC_PollForConversion+0x12e>
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	6919      	ldr	r1, [r3, #16]
 8000634:	4b35      	ldr	r3, [pc, #212]	; (800070c <HAL_ADC_PollForConversion+0x1f0>)
 8000636:	400b      	ands	r3, r1
 8000638:	2b00      	cmp	r3, #0
 800063a:	d108      	bne.n	800064e <HAL_ADC_PollForConversion+0x132>
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	68d9      	ldr	r1, [r3, #12]
 8000642:	4b32      	ldr	r3, [pc, #200]	; (800070c <HAL_ADC_PollForConversion+0x1f0>)
 8000644:	400b      	ands	r3, r1
 8000646:	2b00      	cmp	r3, #0
 8000648:	d101      	bne.n	800064e <HAL_ADC_PollForConversion+0x132>
 800064a:	2354      	movs	r3, #84	; 0x54
 800064c:	e000      	b.n	8000650 <HAL_ADC_PollForConversion+0x134>
 800064e:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000650:	fb03 f302 	mul.w	r3, r3, r2
 8000654:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000656:	e01d      	b.n	8000694 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800065e:	d016      	beq.n	800068e <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d007      	beq.n	8000676 <HAL_ADC_PollForConversion+0x15a>
 8000666:	f7ff fdc9 	bl	80001fc <HAL_GetTick>
 800066a:	4602      	mov	r2, r0
 800066c:	697b      	ldr	r3, [r7, #20]
 800066e:	1ad2      	subs	r2, r2, r3
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	429a      	cmp	r2, r3
 8000674:	d90b      	bls.n	800068e <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800067a:	f043 0204 	orr.w	r2, r3, #4
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	2200      	movs	r2, #0
 8000686:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 800068a:	2303      	movs	r3, #3
 800068c:	e030      	b.n	80006f0 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	3301      	adds	r3, #1
 8000692:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000694:	68fa      	ldr	r2, [r7, #12]
 8000696:	693b      	ldr	r3, [r7, #16]
 8000698:	429a      	cmp	r2, r3
 800069a:	d3dd      	bcc.n	8000658 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f06f 0212 	mvn.w	r2, #18
 80006a4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006aa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	689b      	ldr	r3, [r3, #8]
 80006b8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80006bc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80006c0:	d115      	bne.n	80006ee <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d111      	bne.n	80006ee <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d105      	bne.n	80006ee <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006e6:	f043 0201 	orr.w	r2, r3, #1
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80006ee:	2300      	movs	r3, #0
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	371c      	adds	r7, #28
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd90      	pop	{r4, r7, pc}
 80006f8:	20000008 	.word	0x20000008
 80006fc:	24924924 	.word	0x24924924
 8000700:	00924924 	.word	0x00924924
 8000704:	12492492 	.word	0x12492492
 8000708:	00492492 	.word	0x00492492
 800070c:	00249249 	.word	0x00249249

08000710 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800071e:	4618      	mov	r0, r3
 8000720:	370c      	adds	r7, #12
 8000722:	46bd      	mov	sp, r7
 8000724:	bc80      	pop	{r7}
 8000726:	4770      	bx	lr

08000728 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000728:	b490      	push	{r4, r7}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000732:	2300      	movs	r3, #0
 8000734:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000736:	2300      	movs	r3, #0
 8000738:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000740:	2b01      	cmp	r3, #1
 8000742:	d101      	bne.n	8000748 <HAL_ADC_ConfigChannel+0x20>
 8000744:	2302      	movs	r3, #2
 8000746:	e0dc      	b.n	8000902 <HAL_ADC_ConfigChannel+0x1da>
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2201      	movs	r2, #1
 800074c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	685b      	ldr	r3, [r3, #4]
 8000754:	2b06      	cmp	r3, #6
 8000756:	d81c      	bhi.n	8000792 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	6819      	ldr	r1, [r3, #0]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	685a      	ldr	r2, [r3, #4]
 8000766:	4613      	mov	r3, r2
 8000768:	009b      	lsls	r3, r3, #2
 800076a:	4413      	add	r3, r2
 800076c:	3b05      	subs	r3, #5
 800076e:	221f      	movs	r2, #31
 8000770:	fa02 f303 	lsl.w	r3, r2, r3
 8000774:	43db      	mvns	r3, r3
 8000776:	4018      	ands	r0, r3
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	681c      	ldr	r4, [r3, #0]
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	685a      	ldr	r2, [r3, #4]
 8000780:	4613      	mov	r3, r2
 8000782:	009b      	lsls	r3, r3, #2
 8000784:	4413      	add	r3, r2
 8000786:	3b05      	subs	r3, #5
 8000788:	fa04 f303 	lsl.w	r3, r4, r3
 800078c:	4303      	orrs	r3, r0
 800078e:	634b      	str	r3, [r1, #52]	; 0x34
 8000790:	e03c      	b.n	800080c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	685b      	ldr	r3, [r3, #4]
 8000796:	2b0c      	cmp	r3, #12
 8000798:	d81c      	bhi.n	80007d4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	6819      	ldr	r1, [r3, #0]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	685a      	ldr	r2, [r3, #4]
 80007a8:	4613      	mov	r3, r2
 80007aa:	009b      	lsls	r3, r3, #2
 80007ac:	4413      	add	r3, r2
 80007ae:	3b23      	subs	r3, #35	; 0x23
 80007b0:	221f      	movs	r2, #31
 80007b2:	fa02 f303 	lsl.w	r3, r2, r3
 80007b6:	43db      	mvns	r3, r3
 80007b8:	4018      	ands	r0, r3
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	681c      	ldr	r4, [r3, #0]
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	685a      	ldr	r2, [r3, #4]
 80007c2:	4613      	mov	r3, r2
 80007c4:	009b      	lsls	r3, r3, #2
 80007c6:	4413      	add	r3, r2
 80007c8:	3b23      	subs	r3, #35	; 0x23
 80007ca:	fa04 f303 	lsl.w	r3, r4, r3
 80007ce:	4303      	orrs	r3, r0
 80007d0:	630b      	str	r3, [r1, #48]	; 0x30
 80007d2:	e01b      	b.n	800080c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	6819      	ldr	r1, [r3, #0]
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	685a      	ldr	r2, [r3, #4]
 80007e2:	4613      	mov	r3, r2
 80007e4:	009b      	lsls	r3, r3, #2
 80007e6:	4413      	add	r3, r2
 80007e8:	3b41      	subs	r3, #65	; 0x41
 80007ea:	221f      	movs	r2, #31
 80007ec:	fa02 f303 	lsl.w	r3, r2, r3
 80007f0:	43db      	mvns	r3, r3
 80007f2:	4018      	ands	r0, r3
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	681c      	ldr	r4, [r3, #0]
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	685a      	ldr	r2, [r3, #4]
 80007fc:	4613      	mov	r3, r2
 80007fe:	009b      	lsls	r3, r3, #2
 8000800:	4413      	add	r3, r2
 8000802:	3b41      	subs	r3, #65	; 0x41
 8000804:	fa04 f303 	lsl.w	r3, r4, r3
 8000808:	4303      	orrs	r3, r0
 800080a:	62cb      	str	r3, [r1, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	2b09      	cmp	r3, #9
 8000812:	d91c      	bls.n	800084e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	6819      	ldr	r1, [r3, #0]
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	68d8      	ldr	r0, [r3, #12]
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	681a      	ldr	r2, [r3, #0]
 8000822:	4613      	mov	r3, r2
 8000824:	005b      	lsls	r3, r3, #1
 8000826:	4413      	add	r3, r2
 8000828:	3b1e      	subs	r3, #30
 800082a:	2207      	movs	r2, #7
 800082c:	fa02 f303 	lsl.w	r3, r2, r3
 8000830:	43db      	mvns	r3, r3
 8000832:	4018      	ands	r0, r3
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	689c      	ldr	r4, [r3, #8]
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	681a      	ldr	r2, [r3, #0]
 800083c:	4613      	mov	r3, r2
 800083e:	005b      	lsls	r3, r3, #1
 8000840:	4413      	add	r3, r2
 8000842:	3b1e      	subs	r3, #30
 8000844:	fa04 f303 	lsl.w	r3, r4, r3
 8000848:	4303      	orrs	r3, r0
 800084a:	60cb      	str	r3, [r1, #12]
 800084c:	e019      	b.n	8000882 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	6819      	ldr	r1, [r3, #0]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	6918      	ldr	r0, [r3, #16]
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	681a      	ldr	r2, [r3, #0]
 800085c:	4613      	mov	r3, r2
 800085e:	005b      	lsls	r3, r3, #1
 8000860:	4413      	add	r3, r2
 8000862:	2207      	movs	r2, #7
 8000864:	fa02 f303 	lsl.w	r3, r2, r3
 8000868:	43db      	mvns	r3, r3
 800086a:	4018      	ands	r0, r3
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	689c      	ldr	r4, [r3, #8]
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	4613      	mov	r3, r2
 8000876:	005b      	lsls	r3, r3, #1
 8000878:	4413      	add	r3, r2
 800087a:	fa04 f303 	lsl.w	r3, r4, r3
 800087e:	4303      	orrs	r3, r0
 8000880:	610b      	str	r3, [r1, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	2b10      	cmp	r3, #16
 8000888:	d003      	beq.n	8000892 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800088e:	2b11      	cmp	r3, #17
 8000890:	d132      	bne.n	80008f8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4a1d      	ldr	r2, [pc, #116]	; (800090c <HAL_ADC_ConfigChannel+0x1e4>)
 8000898:	4293      	cmp	r3, r2
 800089a:	d125      	bne.n	80008e8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	689b      	ldr	r3, [r3, #8]
 80008a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d126      	bne.n	80008f8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	687a      	ldr	r2, [r7, #4]
 80008b0:	6812      	ldr	r2, [r2, #0]
 80008b2:	6892      	ldr	r2, [r2, #8]
 80008b4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80008b8:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	2b10      	cmp	r3, #16
 80008c0:	d11a      	bne.n	80008f8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80008c2:	4b13      	ldr	r3, [pc, #76]	; (8000910 <HAL_ADC_ConfigChannel+0x1e8>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4a13      	ldr	r2, [pc, #76]	; (8000914 <HAL_ADC_ConfigChannel+0x1ec>)
 80008c8:	fba2 2303 	umull	r2, r3, r2, r3
 80008cc:	0c9a      	lsrs	r2, r3, #18
 80008ce:	4613      	mov	r3, r2
 80008d0:	009b      	lsls	r3, r3, #2
 80008d2:	4413      	add	r3, r2
 80008d4:	005b      	lsls	r3, r3, #1
 80008d6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80008d8:	e002      	b.n	80008e0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80008da:	68bb      	ldr	r3, [r7, #8]
 80008dc:	3b01      	subs	r3, #1
 80008de:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d1f9      	bne.n	80008da <HAL_ADC_ConfigChannel+0x1b2>
 80008e6:	e007      	b.n	80008f8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008ec:	f043 0220 	orr.w	r2, r3, #32
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80008f4:	2301      	movs	r3, #1
 80008f6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2200      	movs	r2, #0
 80008fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000900:	7bfb      	ldrb	r3, [r7, #15]
}
 8000902:	4618      	mov	r0, r3
 8000904:	3710      	adds	r7, #16
 8000906:	46bd      	mov	sp, r7
 8000908:	bc90      	pop	{r4, r7}
 800090a:	4770      	bx	lr
 800090c:	40012400 	.word	0x40012400
 8000910:	20000008 	.word	0x20000008
 8000914:	431bde83 	.word	0x431bde83

08000918 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000920:	2300      	movs	r3, #0
 8000922:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000924:	2300      	movs	r3, #0
 8000926:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	689b      	ldr	r3, [r3, #8]
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	2b01      	cmp	r3, #1
 8000934:	d039      	beq.n	80009aa <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	687a      	ldr	r2, [r7, #4]
 800093c:	6812      	ldr	r2, [r2, #0]
 800093e:	6892      	ldr	r2, [r2, #8]
 8000940:	f042 0201 	orr.w	r2, r2, #1
 8000944:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000946:	4b1b      	ldr	r3, [pc, #108]	; (80009b4 <ADC_Enable+0x9c>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4a1b      	ldr	r2, [pc, #108]	; (80009b8 <ADC_Enable+0xa0>)
 800094c:	fba2 2303 	umull	r2, r3, r2, r3
 8000950:	0c9b      	lsrs	r3, r3, #18
 8000952:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000954:	e002      	b.n	800095c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000956:	68bb      	ldr	r3, [r7, #8]
 8000958:	3b01      	subs	r3, #1
 800095a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d1f9      	bne.n	8000956 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000962:	f7ff fc4b 	bl	80001fc <HAL_GetTick>
 8000966:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000968:	e018      	b.n	800099c <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800096a:	f7ff fc47 	bl	80001fc <HAL_GetTick>
 800096e:	4602      	mov	r2, r0
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	1ad3      	subs	r3, r2, r3
 8000974:	2b02      	cmp	r3, #2
 8000976:	d911      	bls.n	800099c <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800097c:	f043 0210 	orr.w	r2, r3, #16
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000988:	f043 0201 	orr.w	r2, r3, #1
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2200      	movs	r2, #0
 8000994:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8000998:	2301      	movs	r3, #1
 800099a:	e007      	b.n	80009ac <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	689b      	ldr	r3, [r3, #8]
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d1df      	bne.n	800096a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80009aa:	2300      	movs	r3, #0
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3710      	adds	r7, #16
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20000008 	.word	0x20000008
 80009b8:	431bde83 	.word	0x431bde83

080009bc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80009c4:	2300      	movs	r3, #0
 80009c6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	689b      	ldr	r3, [r3, #8]
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	d127      	bne.n	8000a26 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	687a      	ldr	r2, [r7, #4]
 80009dc:	6812      	ldr	r2, [r2, #0]
 80009de:	6892      	ldr	r2, [r2, #8]
 80009e0:	f022 0201 	bic.w	r2, r2, #1
 80009e4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80009e6:	f7ff fc09 	bl	80001fc <HAL_GetTick>
 80009ea:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80009ec:	e014      	b.n	8000a18 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80009ee:	f7ff fc05 	bl	80001fc <HAL_GetTick>
 80009f2:	4602      	mov	r2, r0
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	1ad3      	subs	r3, r2, r3
 80009f8:	2b02      	cmp	r3, #2
 80009fa:	d90d      	bls.n	8000a18 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a00:	f043 0210 	orr.w	r2, r3, #16
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a0c:	f043 0201 	orr.w	r2, r3, #1
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8000a14:	2301      	movs	r3, #1
 8000a16:	e007      	b.n	8000a28 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	689b      	ldr	r3, [r3, #8]
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	d0e3      	beq.n	80009ee <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000a26:	2300      	movs	r3, #0
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3710      	adds	r7, #16
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}

08000a30 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8000a30:	b590      	push	{r4, r7, lr}
 8000a32:	b087      	sub	sp, #28
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000a46:	2b01      	cmp	r3, #1
 8000a48:	d101      	bne.n	8000a4e <HAL_ADCEx_Calibration_Start+0x1e>
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	e086      	b.n	8000b5c <HAL_ADCEx_Calibration_Start+0x12c>
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2201      	movs	r2, #1
 8000a52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000a56:	6878      	ldr	r0, [r7, #4]
 8000a58:	f7ff ffb0 	bl	80009bc <ADC_ConversionStop_Disable>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000a60:	7dfb      	ldrb	r3, [r7, #23]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d175      	bne.n	8000b52 <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a6a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000a6e:	f023 0302 	bic.w	r3, r3, #2
 8000a72:	f043 0202 	orr.w	r2, r3, #2
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000a7a:	4b3a      	ldr	r3, [pc, #232]	; (8000b64 <HAL_ADCEx_Calibration_Start+0x134>)
 8000a7c:	681c      	ldr	r4, [r3, #0]
 8000a7e:	2002      	movs	r0, #2
 8000a80:	f001 f946 	bl	8001d10 <HAL_RCCEx_GetPeriphCLKFreq>
 8000a84:	4603      	mov	r3, r0
 8000a86:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8000a8a:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8000a8c:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8000a8e:	e002      	b.n	8000a96 <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	3b01      	subs	r3, #1
 8000a94:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d1f9      	bne.n	8000a90 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8000a9c:	6878      	ldr	r0, [r7, #4]
 8000a9e:	f7ff ff3b 	bl	8000918 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	687a      	ldr	r2, [r7, #4]
 8000aa8:	6812      	ldr	r2, [r2, #0]
 8000aaa:	6892      	ldr	r2, [r2, #8]
 8000aac:	f042 0208 	orr.w	r2, r2, #8
 8000ab0:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8000ab2:	f7ff fba3 	bl	80001fc <HAL_GetTick>
 8000ab6:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8000ab8:	e014      	b.n	8000ae4 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8000aba:	f7ff fb9f 	bl	80001fc <HAL_GetTick>
 8000abe:	4602      	mov	r2, r0
 8000ac0:	693b      	ldr	r3, [r7, #16]
 8000ac2:	1ad3      	subs	r3, r2, r3
 8000ac4:	2b0a      	cmp	r3, #10
 8000ac6:	d90d      	bls.n	8000ae4 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000acc:	f023 0312 	bic.w	r3, r3, #18
 8000ad0:	f043 0210 	orr.w	r2, r3, #16
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2200      	movs	r2, #0
 8000adc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	e03b      	b.n	8000b5c <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	689b      	ldr	r3, [r3, #8]
 8000aea:	f003 0308 	and.w	r3, r3, #8
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d1e3      	bne.n	8000aba <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	6812      	ldr	r2, [r2, #0]
 8000afa:	6892      	ldr	r2, [r2, #8]
 8000afc:	f042 0204 	orr.w	r2, r2, #4
 8000b00:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8000b02:	f7ff fb7b 	bl	80001fc <HAL_GetTick>
 8000b06:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8000b08:	e014      	b.n	8000b34 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8000b0a:	f7ff fb77 	bl	80001fc <HAL_GetTick>
 8000b0e:	4602      	mov	r2, r0
 8000b10:	693b      	ldr	r3, [r7, #16]
 8000b12:	1ad3      	subs	r3, r2, r3
 8000b14:	2b0a      	cmp	r3, #10
 8000b16:	d90d      	bls.n	8000b34 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b1c:	f023 0312 	bic.w	r3, r3, #18
 8000b20:	f043 0210 	orr.w	r2, r3, #16
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8000b30:	2301      	movs	r3, #1
 8000b32:	e013      	b.n	8000b5c <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	689b      	ldr	r3, [r3, #8]
 8000b3a:	f003 0304 	and.w	r3, r3, #4
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d1e3      	bne.n	8000b0a <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b46:	f023 0303 	bic.w	r3, r3, #3
 8000b4a:	f043 0201 	orr.w	r2, r3, #1
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2200      	movs	r2, #0
 8000b56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000b5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	371c      	adds	r7, #28
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd90      	pop	{r4, r7, pc}
 8000b64:	20000008 	.word	0x20000008

08000b68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b085      	sub	sp, #20
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	f003 0307 	and.w	r3, r3, #7
 8000b76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b78:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <__NVIC_SetPriorityGrouping+0x44>)
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b7e:	68ba      	ldr	r2, [r7, #8]
 8000b80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b84:	4013      	ands	r3, r2
 8000b86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b9a:	4a04      	ldr	r2, [pc, #16]	; (8000bac <__NVIC_SetPriorityGrouping+0x44>)
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	60d3      	str	r3, [r2, #12]
}
 8000ba0:	bf00      	nop
 8000ba2:	3714      	adds	r7, #20
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bc80      	pop	{r7}
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb4:	4b04      	ldr	r3, [pc, #16]	; (8000bc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	0a1b      	lsrs	r3, r3, #8
 8000bba:	f003 0307 	and.w	r3, r3, #7
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bc80      	pop	{r7}
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	db0b      	blt.n	8000bf6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bde:	4908      	ldr	r1, [pc, #32]	; (8000c00 <__NVIC_EnableIRQ+0x34>)
 8000be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be4:	095b      	lsrs	r3, r3, #5
 8000be6:	79fa      	ldrb	r2, [r7, #7]
 8000be8:	f002 021f 	and.w	r2, r2, #31
 8000bec:	2001      	movs	r0, #1
 8000bee:	fa00 f202 	lsl.w	r2, r0, r2
 8000bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bf6:	bf00      	nop
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr
 8000c00:	e000e100 	.word	0xe000e100

08000c04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	6039      	str	r1, [r7, #0]
 8000c0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	db0a      	blt.n	8000c2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c18:	490d      	ldr	r1, [pc, #52]	; (8000c50 <__NVIC_SetPriority+0x4c>)
 8000c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1e:	683a      	ldr	r2, [r7, #0]
 8000c20:	b2d2      	uxtb	r2, r2
 8000c22:	0112      	lsls	r2, r2, #4
 8000c24:	b2d2      	uxtb	r2, r2
 8000c26:	440b      	add	r3, r1
 8000c28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c2c:	e00a      	b.n	8000c44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2e:	4909      	ldr	r1, [pc, #36]	; (8000c54 <__NVIC_SetPriority+0x50>)
 8000c30:	79fb      	ldrb	r3, [r7, #7]
 8000c32:	f003 030f 	and.w	r3, r3, #15
 8000c36:	3b04      	subs	r3, #4
 8000c38:	683a      	ldr	r2, [r7, #0]
 8000c3a:	b2d2      	uxtb	r2, r2
 8000c3c:	0112      	lsls	r2, r2, #4
 8000c3e:	b2d2      	uxtb	r2, r2
 8000c40:	440b      	add	r3, r1
 8000c42:	761a      	strb	r2, [r3, #24]
}
 8000c44:	bf00      	nop
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bc80      	pop	{r7}
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	e000e100 	.word	0xe000e100
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b089      	sub	sp, #36	; 0x24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	f003 0307 	and.w	r3, r3, #7
 8000c6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c6c:	69fb      	ldr	r3, [r7, #28]
 8000c6e:	f1c3 0307 	rsb	r3, r3, #7
 8000c72:	2b04      	cmp	r3, #4
 8000c74:	bf28      	it	cs
 8000c76:	2304      	movcs	r3, #4
 8000c78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	3304      	adds	r3, #4
 8000c7e:	2b06      	cmp	r3, #6
 8000c80:	d902      	bls.n	8000c88 <NVIC_EncodePriority+0x30>
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	3b03      	subs	r3, #3
 8000c86:	e000      	b.n	8000c8a <NVIC_EncodePriority+0x32>
 8000c88:	2300      	movs	r3, #0
 8000c8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	69bb      	ldr	r3, [r7, #24]
 8000c90:	fa02 f303 	lsl.w	r3, r2, r3
 8000c94:	1e5a      	subs	r2, r3, #1
 8000c96:	68bb      	ldr	r3, [r7, #8]
 8000c98:	401a      	ands	r2, r3
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c9e:	2101      	movs	r1, #1
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca6:	1e59      	subs	r1, r3, #1
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cac:	4313      	orrs	r3, r2
         );
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3724      	adds	r7, #36	; 0x24
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bc80      	pop	{r7}
 8000cb6:	4770      	bx	lr

08000cb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cc8:	d301      	bcc.n	8000cce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e00f      	b.n	8000cee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cce:	4a0a      	ldr	r2, [pc, #40]	; (8000cf8 <SysTick_Config+0x40>)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cd6:	210f      	movs	r1, #15
 8000cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cdc:	f7ff ff92 	bl	8000c04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ce0:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <SysTick_Config+0x40>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ce6:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <SysTick_Config+0x40>)
 8000ce8:	2207      	movs	r2, #7
 8000cea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	e000e010 	.word	0xe000e010

08000cfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f7ff ff2f 	bl	8000b68 <__NVIC_SetPriorityGrouping>
}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b086      	sub	sp, #24
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	4603      	mov	r3, r0
 8000d1a:	60b9      	str	r1, [r7, #8]
 8000d1c:	607a      	str	r2, [r7, #4]
 8000d1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d20:	2300      	movs	r3, #0
 8000d22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d24:	f7ff ff44 	bl	8000bb0 <__NVIC_GetPriorityGrouping>
 8000d28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	68b9      	ldr	r1, [r7, #8]
 8000d2e:	6978      	ldr	r0, [r7, #20]
 8000d30:	f7ff ff92 	bl	8000c58 <NVIC_EncodePriority>
 8000d34:	4602      	mov	r2, r0
 8000d36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d3a:	4611      	mov	r1, r2
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff ff61 	bl	8000c04 <__NVIC_SetPriority>
}
 8000d42:	bf00      	nop
 8000d44:	3718      	adds	r7, #24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b082      	sub	sp, #8
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	4603      	mov	r3, r0
 8000d52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff ff37 	bl	8000bcc <__NVIC_EnableIRQ>
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b082      	sub	sp, #8
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f7ff ffa2 	bl	8000cb8 <SysTick_Config>
 8000d74:	4603      	mov	r3, r0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
	...

08000d80 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d101      	bne.n	8000d96 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
 8000d94:	e043      	b.n	8000e1e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	4b22      	ldr	r3, [pc, #136]	; (8000e28 <HAL_DMA_Init+0xa8>)
 8000d9e:	4413      	add	r3, r2
 8000da0:	4a22      	ldr	r2, [pc, #136]	; (8000e2c <HAL_DMA_Init+0xac>)
 8000da2:	fba2 2303 	umull	r2, r3, r2, r3
 8000da6:	091b      	lsrs	r3, r3, #4
 8000da8:	009a      	lsls	r2, r3, #2
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4a1f      	ldr	r2, [pc, #124]	; (8000e30 <HAL_DMA_Init+0xb0>)
 8000db2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2202      	movs	r2, #2
 8000db8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000dca:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000dce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000dd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	68db      	ldr	r3, [r3, #12]
 8000dde:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000de4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	695b      	ldr	r3, [r3, #20]
 8000dea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000df0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	69db      	ldr	r3, [r3, #28]
 8000df6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000df8:	68fa      	ldr	r2, [r7, #12]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	68fa      	ldr	r2, [r7, #12]
 8000e04:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2200      	movs	r2, #0
 8000e0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2201      	movs	r2, #1
 8000e10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2200      	movs	r2, #0
 8000e18:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000e1c:	2300      	movs	r3, #0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3714      	adds	r7, #20
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bc80      	pop	{r7}
 8000e26:	4770      	bx	lr
 8000e28:	bffdfff8 	.word	0xbffdfff8
 8000e2c:	cccccccd 	.word	0xcccccccd
 8000e30:	40020000 	.word	0x40020000

08000e34 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e50:	2204      	movs	r2, #4
 8000e52:	409a      	lsls	r2, r3
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	4013      	ands	r3, r2
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d055      	beq.n	8000f08 <HAL_DMA_IRQHandler+0xd4>
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	f003 0304 	and.w	r3, r3, #4
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d050      	beq.n	8000f08 <HAL_DMA_IRQHandler+0xd4>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f003 0320 	and.w	r3, r3, #32
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d107      	bne.n	8000e84 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	687a      	ldr	r2, [r7, #4]
 8000e7a:	6812      	ldr	r2, [r2, #0]
 8000e7c:	6812      	ldr	r2, [r2, #0]
 8000e7e:	f022 0204 	bic.w	r2, r2, #4
 8000e82:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000e84:	4a6d      	ldr	r2, [pc, #436]	; (800103c <HAL_DMA_IRQHandler+0x208>)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4b6c      	ldr	r3, [pc, #432]	; (8001040 <HAL_DMA_IRQHandler+0x20c>)
 8000e8e:	4299      	cmp	r1, r3
 8000e90:	d02e      	beq.n	8000ef0 <HAL_DMA_IRQHandler+0xbc>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4619      	mov	r1, r3
 8000e98:	4b6a      	ldr	r3, [pc, #424]	; (8001044 <HAL_DMA_IRQHandler+0x210>)
 8000e9a:	4299      	cmp	r1, r3
 8000e9c:	d026      	beq.n	8000eec <HAL_DMA_IRQHandler+0xb8>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4b68      	ldr	r3, [pc, #416]	; (8001048 <HAL_DMA_IRQHandler+0x214>)
 8000ea6:	4299      	cmp	r1, r3
 8000ea8:	d01d      	beq.n	8000ee6 <HAL_DMA_IRQHandler+0xb2>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4b66      	ldr	r3, [pc, #408]	; (800104c <HAL_DMA_IRQHandler+0x218>)
 8000eb2:	4299      	cmp	r1, r3
 8000eb4:	d014      	beq.n	8000ee0 <HAL_DMA_IRQHandler+0xac>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4b64      	ldr	r3, [pc, #400]	; (8001050 <HAL_DMA_IRQHandler+0x21c>)
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d00b      	beq.n	8000eda <HAL_DMA_IRQHandler+0xa6>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4b62      	ldr	r3, [pc, #392]	; (8001054 <HAL_DMA_IRQHandler+0x220>)
 8000eca:	4299      	cmp	r1, r3
 8000ecc:	d102      	bne.n	8000ed4 <HAL_DMA_IRQHandler+0xa0>
 8000ece:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ed2:	e00e      	b.n	8000ef2 <HAL_DMA_IRQHandler+0xbe>
 8000ed4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000ed8:	e00b      	b.n	8000ef2 <HAL_DMA_IRQHandler+0xbe>
 8000eda:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000ede:	e008      	b.n	8000ef2 <HAL_DMA_IRQHandler+0xbe>
 8000ee0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ee4:	e005      	b.n	8000ef2 <HAL_DMA_IRQHandler+0xbe>
 8000ee6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eea:	e002      	b.n	8000ef2 <HAL_DMA_IRQHandler+0xbe>
 8000eec:	2340      	movs	r3, #64	; 0x40
 8000eee:	e000      	b.n	8000ef2 <HAL_DMA_IRQHandler+0xbe>
 8000ef0:	2304      	movs	r3, #4
 8000ef2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	f000 809a 	beq.w	8001032 <HAL_DMA_IRQHandler+0x1fe>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000f06:	e094      	b.n	8001032 <HAL_DMA_IRQHandler+0x1fe>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0c:	2202      	movs	r2, #2
 8000f0e:	409a      	lsls	r2, r3
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	4013      	ands	r3, r2
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d05c      	beq.n	8000fd2 <HAL_DMA_IRQHandler+0x19e>
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	f003 0302 	and.w	r3, r3, #2
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d057      	beq.n	8000fd2 <HAL_DMA_IRQHandler+0x19e>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f003 0320 	and.w	r3, r3, #32
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d10b      	bne.n	8000f48 <HAL_DMA_IRQHandler+0x114>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	687a      	ldr	r2, [r7, #4]
 8000f36:	6812      	ldr	r2, [r2, #0]
 8000f38:	6812      	ldr	r2, [r2, #0]
 8000f3a:	f022 020a 	bic.w	r2, r2, #10
 8000f3e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2201      	movs	r2, #1
 8000f44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000f48:	4a3c      	ldr	r2, [pc, #240]	; (800103c <HAL_DMA_IRQHandler+0x208>)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4b3b      	ldr	r3, [pc, #236]	; (8001040 <HAL_DMA_IRQHandler+0x20c>)
 8000f52:	4299      	cmp	r1, r3
 8000f54:	d02e      	beq.n	8000fb4 <HAL_DMA_IRQHandler+0x180>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4b39      	ldr	r3, [pc, #228]	; (8001044 <HAL_DMA_IRQHandler+0x210>)
 8000f5e:	4299      	cmp	r1, r3
 8000f60:	d026      	beq.n	8000fb0 <HAL_DMA_IRQHandler+0x17c>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4619      	mov	r1, r3
 8000f68:	4b37      	ldr	r3, [pc, #220]	; (8001048 <HAL_DMA_IRQHandler+0x214>)
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d01d      	beq.n	8000faa <HAL_DMA_IRQHandler+0x176>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4619      	mov	r1, r3
 8000f74:	4b35      	ldr	r3, [pc, #212]	; (800104c <HAL_DMA_IRQHandler+0x218>)
 8000f76:	4299      	cmp	r1, r3
 8000f78:	d014      	beq.n	8000fa4 <HAL_DMA_IRQHandler+0x170>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4b33      	ldr	r3, [pc, #204]	; (8001050 <HAL_DMA_IRQHandler+0x21c>)
 8000f82:	4299      	cmp	r1, r3
 8000f84:	d00b      	beq.n	8000f9e <HAL_DMA_IRQHandler+0x16a>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4b31      	ldr	r3, [pc, #196]	; (8001054 <HAL_DMA_IRQHandler+0x220>)
 8000f8e:	4299      	cmp	r1, r3
 8000f90:	d102      	bne.n	8000f98 <HAL_DMA_IRQHandler+0x164>
 8000f92:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000f96:	e00e      	b.n	8000fb6 <HAL_DMA_IRQHandler+0x182>
 8000f98:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f9c:	e00b      	b.n	8000fb6 <HAL_DMA_IRQHandler+0x182>
 8000f9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fa2:	e008      	b.n	8000fb6 <HAL_DMA_IRQHandler+0x182>
 8000fa4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fa8:	e005      	b.n	8000fb6 <HAL_DMA_IRQHandler+0x182>
 8000faa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fae:	e002      	b.n	8000fb6 <HAL_DMA_IRQHandler+0x182>
 8000fb0:	2320      	movs	r3, #32
 8000fb2:	e000      	b.n	8000fb6 <HAL_DMA_IRQHandler+0x182>
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d034      	beq.n	8001032 <HAL_DMA_IRQHandler+0x1fe>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000fd0:	e02f      	b.n	8001032 <HAL_DMA_IRQHandler+0x1fe>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd6:	2208      	movs	r2, #8
 8000fd8:	409a      	lsls	r2, r3
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d028      	beq.n	8001034 <HAL_DMA_IRQHandler+0x200>
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	f003 0308 	and.w	r3, r3, #8
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d023      	beq.n	8001034 <HAL_DMA_IRQHandler+0x200>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	687a      	ldr	r2, [r7, #4]
 8000ff2:	6812      	ldr	r2, [r2, #0]
 8000ff4:	6812      	ldr	r2, [r2, #0]
 8000ff6:	f022 020e 	bic.w	r2, r2, #14
 8000ffa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001000:	687a      	ldr	r2, [r7, #4]
 8001002:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001004:	2101      	movs	r1, #1
 8001006:	fa01 f202 	lsl.w	r2, r1, r2
 800100a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2201      	movs	r2, #1
 8001010:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2201      	movs	r2, #1
 8001016:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2200      	movs	r2, #0
 800101e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	2b00      	cmp	r3, #0
 8001028:	d004      	beq.n	8001034 <HAL_DMA_IRQHandler+0x200>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	4798      	blx	r3
    }
  }
  return;
 8001032:	bf00      	nop
 8001034:	bf00      	nop
}
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40020000 	.word	0x40020000
 8001040:	40020008 	.word	0x40020008
 8001044:	4002001c 	.word	0x4002001c
 8001048:	40020030 	.word	0x40020030
 800104c:	40020044 	.word	0x40020044
 8001050:	40020058 	.word	0x40020058
 8001054:	4002006c 	.word	0x4002006c

08001058 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001058:	b480      	push	{r7}
 800105a:	b08b      	sub	sp, #44	; 0x2c
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001062:	2300      	movs	r3, #0
 8001064:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001066:	2300      	movs	r3, #0
 8001068:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800106a:	e127      	b.n	80012bc <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800106c:	2201      	movs	r2, #1
 800106e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	4013      	ands	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	429a      	cmp	r2, r3
 8001086:	f040 8116 	bne.w	80012b6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	2b12      	cmp	r3, #18
 8001090:	d034      	beq.n	80010fc <HAL_GPIO_Init+0xa4>
 8001092:	2b12      	cmp	r3, #18
 8001094:	d80d      	bhi.n	80010b2 <HAL_GPIO_Init+0x5a>
 8001096:	2b02      	cmp	r3, #2
 8001098:	d02b      	beq.n	80010f2 <HAL_GPIO_Init+0x9a>
 800109a:	2b02      	cmp	r3, #2
 800109c:	d804      	bhi.n	80010a8 <HAL_GPIO_Init+0x50>
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d031      	beq.n	8001106 <HAL_GPIO_Init+0xae>
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d01c      	beq.n	80010e0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010a6:	e048      	b.n	800113a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80010a8:	2b03      	cmp	r3, #3
 80010aa:	d043      	beq.n	8001134 <HAL_GPIO_Init+0xdc>
 80010ac:	2b11      	cmp	r3, #17
 80010ae:	d01b      	beq.n	80010e8 <HAL_GPIO_Init+0x90>
          break;
 80010b0:	e043      	b.n	800113a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80010b2:	4a89      	ldr	r2, [pc, #548]	; (80012d8 <HAL_GPIO_Init+0x280>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d026      	beq.n	8001106 <HAL_GPIO_Init+0xae>
 80010b8:	4a87      	ldr	r2, [pc, #540]	; (80012d8 <HAL_GPIO_Init+0x280>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d806      	bhi.n	80010cc <HAL_GPIO_Init+0x74>
 80010be:	4a87      	ldr	r2, [pc, #540]	; (80012dc <HAL_GPIO_Init+0x284>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d020      	beq.n	8001106 <HAL_GPIO_Init+0xae>
 80010c4:	4a86      	ldr	r2, [pc, #536]	; (80012e0 <HAL_GPIO_Init+0x288>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d01d      	beq.n	8001106 <HAL_GPIO_Init+0xae>
          break;
 80010ca:	e036      	b.n	800113a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80010cc:	4a85      	ldr	r2, [pc, #532]	; (80012e4 <HAL_GPIO_Init+0x28c>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d019      	beq.n	8001106 <HAL_GPIO_Init+0xae>
 80010d2:	4a85      	ldr	r2, [pc, #532]	; (80012e8 <HAL_GPIO_Init+0x290>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d016      	beq.n	8001106 <HAL_GPIO_Init+0xae>
 80010d8:	4a84      	ldr	r2, [pc, #528]	; (80012ec <HAL_GPIO_Init+0x294>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d013      	beq.n	8001106 <HAL_GPIO_Init+0xae>
          break;
 80010de:	e02c      	b.n	800113a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	623b      	str	r3, [r7, #32]
          break;
 80010e6:	e028      	b.n	800113a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	3304      	adds	r3, #4
 80010ee:	623b      	str	r3, [r7, #32]
          break;
 80010f0:	e023      	b.n	800113a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	68db      	ldr	r3, [r3, #12]
 80010f6:	3308      	adds	r3, #8
 80010f8:	623b      	str	r3, [r7, #32]
          break;
 80010fa:	e01e      	b.n	800113a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	330c      	adds	r3, #12
 8001102:	623b      	str	r3, [r7, #32]
          break;
 8001104:	e019      	b.n	800113a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d102      	bne.n	8001114 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800110e:	2304      	movs	r3, #4
 8001110:	623b      	str	r3, [r7, #32]
          break;
 8001112:	e012      	b.n	800113a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	2b01      	cmp	r3, #1
 800111a:	d105      	bne.n	8001128 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800111c:	2308      	movs	r3, #8
 800111e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	69fa      	ldr	r2, [r7, #28]
 8001124:	611a      	str	r2, [r3, #16]
          break;
 8001126:	e008      	b.n	800113a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001128:	2308      	movs	r3, #8
 800112a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	69fa      	ldr	r2, [r7, #28]
 8001130:	615a      	str	r2, [r3, #20]
          break;
 8001132:	e002      	b.n	800113a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001134:	2300      	movs	r3, #0
 8001136:	623b      	str	r3, [r7, #32]
          break;
 8001138:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	2bff      	cmp	r3, #255	; 0xff
 800113e:	d801      	bhi.n	8001144 <HAL_GPIO_Init+0xec>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	e001      	b.n	8001148 <HAL_GPIO_Init+0xf0>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3304      	adds	r3, #4
 8001148:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	2bff      	cmp	r3, #255	; 0xff
 800114e:	d802      	bhi.n	8001156 <HAL_GPIO_Init+0xfe>
 8001150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	e002      	b.n	800115c <HAL_GPIO_Init+0x104>
 8001156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001158:	3b08      	subs	r3, #8
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	210f      	movs	r1, #15
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	fa01 f303 	lsl.w	r3, r1, r3
 800116a:	43db      	mvns	r3, r3
 800116c:	401a      	ands	r2, r3
 800116e:	6a39      	ldr	r1, [r7, #32]
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	fa01 f303 	lsl.w	r3, r1, r3
 8001176:	431a      	orrs	r2, r3
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001184:	2b00      	cmp	r3, #0
 8001186:	f000 8096 	beq.w	80012b6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800118a:	4a59      	ldr	r2, [pc, #356]	; (80012f0 <HAL_GPIO_Init+0x298>)
 800118c:	4b58      	ldr	r3, [pc, #352]	; (80012f0 <HAL_GPIO_Init+0x298>)
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	f043 0301 	orr.w	r3, r3, #1
 8001194:	6193      	str	r3, [r2, #24]
 8001196:	4b56      	ldr	r3, [pc, #344]	; (80012f0 <HAL_GPIO_Init+0x298>)
 8001198:	699b      	ldr	r3, [r3, #24]
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	60bb      	str	r3, [r7, #8]
 80011a0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011a2:	4a54      	ldr	r2, [pc, #336]	; (80012f4 <HAL_GPIO_Init+0x29c>)
 80011a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a6:	089b      	lsrs	r3, r3, #2
 80011a8:	3302      	adds	r3, #2
 80011aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ae:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b2:	f003 0303 	and.w	r3, r3, #3
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	220f      	movs	r2, #15
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	43db      	mvns	r3, r3
 80011c0:	68fa      	ldr	r2, [r7, #12]
 80011c2:	4013      	ands	r3, r2
 80011c4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a4b      	ldr	r2, [pc, #300]	; (80012f8 <HAL_GPIO_Init+0x2a0>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d013      	beq.n	80011f6 <HAL_GPIO_Init+0x19e>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a4a      	ldr	r2, [pc, #296]	; (80012fc <HAL_GPIO_Init+0x2a4>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d00d      	beq.n	80011f2 <HAL_GPIO_Init+0x19a>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a49      	ldr	r2, [pc, #292]	; (8001300 <HAL_GPIO_Init+0x2a8>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d007      	beq.n	80011ee <HAL_GPIO_Init+0x196>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a48      	ldr	r2, [pc, #288]	; (8001304 <HAL_GPIO_Init+0x2ac>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d101      	bne.n	80011ea <HAL_GPIO_Init+0x192>
 80011e6:	2303      	movs	r3, #3
 80011e8:	e006      	b.n	80011f8 <HAL_GPIO_Init+0x1a0>
 80011ea:	2304      	movs	r3, #4
 80011ec:	e004      	b.n	80011f8 <HAL_GPIO_Init+0x1a0>
 80011ee:	2302      	movs	r3, #2
 80011f0:	e002      	b.n	80011f8 <HAL_GPIO_Init+0x1a0>
 80011f2:	2301      	movs	r3, #1
 80011f4:	e000      	b.n	80011f8 <HAL_GPIO_Init+0x1a0>
 80011f6:	2300      	movs	r3, #0
 80011f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011fa:	f002 0203 	and.w	r2, r2, #3
 80011fe:	0092      	lsls	r2, r2, #2
 8001200:	4093      	lsls	r3, r2
 8001202:	68fa      	ldr	r2, [r7, #12]
 8001204:	4313      	orrs	r3, r2
 8001206:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001208:	493a      	ldr	r1, [pc, #232]	; (80012f4 <HAL_GPIO_Init+0x29c>)
 800120a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120c:	089b      	lsrs	r3, r3, #2
 800120e:	3302      	adds	r3, #2
 8001210:	68fa      	ldr	r2, [r7, #12]
 8001212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d006      	beq.n	8001230 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001222:	4939      	ldr	r1, [pc, #228]	; (8001308 <HAL_GPIO_Init+0x2b0>)
 8001224:	4b38      	ldr	r3, [pc, #224]	; (8001308 <HAL_GPIO_Init+0x2b0>)
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	4313      	orrs	r3, r2
 800122c:	600b      	str	r3, [r1, #0]
 800122e:	e006      	b.n	800123e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001230:	4935      	ldr	r1, [pc, #212]	; (8001308 <HAL_GPIO_Init+0x2b0>)
 8001232:	4b35      	ldr	r3, [pc, #212]	; (8001308 <HAL_GPIO_Init+0x2b0>)
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	43db      	mvns	r3, r3
 800123a:	4013      	ands	r3, r2
 800123c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d006      	beq.n	8001258 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800124a:	492f      	ldr	r1, [pc, #188]	; (8001308 <HAL_GPIO_Init+0x2b0>)
 800124c:	4b2e      	ldr	r3, [pc, #184]	; (8001308 <HAL_GPIO_Init+0x2b0>)
 800124e:	685a      	ldr	r2, [r3, #4]
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	4313      	orrs	r3, r2
 8001254:	604b      	str	r3, [r1, #4]
 8001256:	e006      	b.n	8001266 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001258:	492b      	ldr	r1, [pc, #172]	; (8001308 <HAL_GPIO_Init+0x2b0>)
 800125a:	4b2b      	ldr	r3, [pc, #172]	; (8001308 <HAL_GPIO_Init+0x2b0>)
 800125c:	685a      	ldr	r2, [r3, #4]
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	43db      	mvns	r3, r3
 8001262:	4013      	ands	r3, r2
 8001264:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d006      	beq.n	8001280 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001272:	4925      	ldr	r1, [pc, #148]	; (8001308 <HAL_GPIO_Init+0x2b0>)
 8001274:	4b24      	ldr	r3, [pc, #144]	; (8001308 <HAL_GPIO_Init+0x2b0>)
 8001276:	689a      	ldr	r2, [r3, #8]
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	4313      	orrs	r3, r2
 800127c:	608b      	str	r3, [r1, #8]
 800127e:	e006      	b.n	800128e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001280:	4921      	ldr	r1, [pc, #132]	; (8001308 <HAL_GPIO_Init+0x2b0>)
 8001282:	4b21      	ldr	r3, [pc, #132]	; (8001308 <HAL_GPIO_Init+0x2b0>)
 8001284:	689a      	ldr	r2, [r3, #8]
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	43db      	mvns	r3, r3
 800128a:	4013      	ands	r3, r2
 800128c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d006      	beq.n	80012a8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800129a:	491b      	ldr	r1, [pc, #108]	; (8001308 <HAL_GPIO_Init+0x2b0>)
 800129c:	4b1a      	ldr	r3, [pc, #104]	; (8001308 <HAL_GPIO_Init+0x2b0>)
 800129e:	68da      	ldr	r2, [r3, #12]
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	60cb      	str	r3, [r1, #12]
 80012a6:	e006      	b.n	80012b6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012a8:	4917      	ldr	r1, [pc, #92]	; (8001308 <HAL_GPIO_Init+0x2b0>)
 80012aa:	4b17      	ldr	r3, [pc, #92]	; (8001308 <HAL_GPIO_Init+0x2b0>)
 80012ac:	68da      	ldr	r2, [r3, #12]
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	43db      	mvns	r3, r3
 80012b2:	4013      	ands	r3, r2
 80012b4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80012b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b8:	3301      	adds	r3, #1
 80012ba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c2:	fa22 f303 	lsr.w	r3, r2, r3
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	f47f aed0 	bne.w	800106c <HAL_GPIO_Init+0x14>
  }
}
 80012cc:	bf00      	nop
 80012ce:	372c      	adds	r7, #44	; 0x2c
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bc80      	pop	{r7}
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	10210000 	.word	0x10210000
 80012dc:	10110000 	.word	0x10110000
 80012e0:	10120000 	.word	0x10120000
 80012e4:	10310000 	.word	0x10310000
 80012e8:	10320000 	.word	0x10320000
 80012ec:	10220000 	.word	0x10220000
 80012f0:	40021000 	.word	0x40021000
 80012f4:	40010000 	.word	0x40010000
 80012f8:	40010800 	.word	0x40010800
 80012fc:	40010c00 	.word	0x40010c00
 8001300:	40011000 	.word	0x40011000
 8001304:	40011400 	.word	0x40011400
 8001308:	40010400 	.word	0x40010400

0800130c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	460b      	mov	r3, r1
 8001316:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	689a      	ldr	r2, [r3, #8]
 800131c:	887b      	ldrh	r3, [r7, #2]
 800131e:	4013      	ands	r3, r2
 8001320:	2b00      	cmp	r3, #0
 8001322:	d002      	beq.n	800132a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001324:	2301      	movs	r3, #1
 8001326:	73fb      	strb	r3, [r7, #15]
 8001328:	e001      	b.n	800132e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800132a:	2300      	movs	r3, #0
 800132c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800132e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001330:	4618      	mov	r0, r3
 8001332:	3714      	adds	r7, #20
 8001334:	46bd      	mov	sp, r7
 8001336:	bc80      	pop	{r7}
 8001338:	4770      	bx	lr

0800133a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800133a:	b480      	push	{r7}
 800133c:	b083      	sub	sp, #12
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
 8001342:	460b      	mov	r3, r1
 8001344:	807b      	strh	r3, [r7, #2]
 8001346:	4613      	mov	r3, r2
 8001348:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800134a:	787b      	ldrb	r3, [r7, #1]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d003      	beq.n	8001358 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001350:	887a      	ldrh	r2, [r7, #2]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001356:	e003      	b.n	8001360 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001358:	887b      	ldrh	r3, [r7, #2]
 800135a:	041a      	lsls	r2, r3, #16
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	611a      	str	r2, [r3, #16]
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	bc80      	pop	{r7}
 8001368:	4770      	bx	lr
	...

0800136c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d101      	bne.n	800137e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e26c      	b.n	8001858 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	2b00      	cmp	r3, #0
 8001388:	f000 8087 	beq.w	800149a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800138c:	4b92      	ldr	r3, [pc, #584]	; (80015d8 <HAL_RCC_OscConfig+0x26c>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f003 030c 	and.w	r3, r3, #12
 8001394:	2b04      	cmp	r3, #4
 8001396:	d00c      	beq.n	80013b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001398:	4b8f      	ldr	r3, [pc, #572]	; (80015d8 <HAL_RCC_OscConfig+0x26c>)
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f003 030c 	and.w	r3, r3, #12
 80013a0:	2b08      	cmp	r3, #8
 80013a2:	d112      	bne.n	80013ca <HAL_RCC_OscConfig+0x5e>
 80013a4:	4b8c      	ldr	r3, [pc, #560]	; (80015d8 <HAL_RCC_OscConfig+0x26c>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013b0:	d10b      	bne.n	80013ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b2:	4b89      	ldr	r3, [pc, #548]	; (80015d8 <HAL_RCC_OscConfig+0x26c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d06c      	beq.n	8001498 <HAL_RCC_OscConfig+0x12c>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d168      	bne.n	8001498 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e246      	b.n	8001858 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013d2:	d106      	bne.n	80013e2 <HAL_RCC_OscConfig+0x76>
 80013d4:	4a80      	ldr	r2, [pc, #512]	; (80015d8 <HAL_RCC_OscConfig+0x26c>)
 80013d6:	4b80      	ldr	r3, [pc, #512]	; (80015d8 <HAL_RCC_OscConfig+0x26c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013de:	6013      	str	r3, [r2, #0]
 80013e0:	e02e      	b.n	8001440 <HAL_RCC_OscConfig+0xd4>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d10c      	bne.n	8001404 <HAL_RCC_OscConfig+0x98>
 80013ea:	4a7b      	ldr	r2, [pc, #492]	; (80015d8 <HAL_RCC_OscConfig+0x26c>)
 80013ec:	4b7a      	ldr	r3, [pc, #488]	; (80015d8 <HAL_RCC_OscConfig+0x26c>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013f4:	6013      	str	r3, [r2, #0]
 80013f6:	4a78      	ldr	r2, [pc, #480]	; (80015d8 <HAL_RCC_OscConfig+0x26c>)
 80013f8:	4b77      	ldr	r3, [pc, #476]	; (80015d8 <HAL_RCC_OscConfig+0x26c>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001400:	6013      	str	r3, [r2, #0]
 8001402:	e01d      	b.n	8001440 <HAL_RCC_OscConfig+0xd4>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800140c:	d10c      	bne.n	8001428 <HAL_RCC_OscConfig+0xbc>
 800140e:	4a72      	ldr	r2, [pc, #456]	; (80015d8 <HAL_RCC_OscConfig+0x26c>)
 8001410:	4b71      	ldr	r3, [pc, #452]	; (80015d8 <HAL_RCC_OscConfig+0x26c>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001418:	6013      	str	r3, [r2, #0]
 800141a:	4a6f      	ldr	r2, [pc, #444]	; (80015d8 <HAL_RCC_OscConfig+0x26c>)
 800141c:	4b6e      	ldr	r3, [pc, #440]	; (80015d8 <HAL_RCC_OscConfig+0x26c>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001424:	6013      	str	r3, [r2, #0]
 8001426:	e00b      	b.n	8001440 <HAL_RCC_OscConfig+0xd4>
 8001428:	4a6b      	ldr	r2, [pc, #428]	; (80015d8 <HAL_RCC_OscConfig+0x26c>)
 800142a:	4b6b      	ldr	r3, [pc, #428]	; (80015d8 <HAL_RCC_OscConfig+0x26c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001432:	6013      	str	r3, [r2, #0]
 8001434:	4a68      	ldr	r2, [pc, #416]	; (80015d8 <HAL_RCC_OscConfig+0x26c>)
 8001436:	4b68      	ldr	r3, [pc, #416]	; (80015d8 <HAL_RCC_OscConfig+0x26c>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800143e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d013      	beq.n	8001470 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001448:	f7fe fed8 	bl	80001fc <HAL_GetTick>
 800144c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800144e:	e008      	b.n	8001462 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001450:	f7fe fed4 	bl	80001fc <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b64      	cmp	r3, #100	; 0x64
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e1fa      	b.n	8001858 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001462:	4b5d      	ldr	r3, [pc, #372]	; (80015d8 <HAL_RCC_OscConfig+0x26c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d0f0      	beq.n	8001450 <HAL_RCC_OscConfig+0xe4>
 800146e:	e014      	b.n	800149a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001470:	f7fe fec4 	bl	80001fc <HAL_GetTick>
 8001474:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001476:	e008      	b.n	800148a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001478:	f7fe fec0 	bl	80001fc <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b64      	cmp	r3, #100	; 0x64
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e1e6      	b.n	8001858 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800148a:	4b53      	ldr	r3, [pc, #332]	; (80015d8 <HAL_RCC_OscConfig+0x26c>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d1f0      	bne.n	8001478 <HAL_RCC_OscConfig+0x10c>
 8001496:	e000      	b.n	800149a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001498:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d063      	beq.n	800156e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014a6:	4b4c      	ldr	r3, [pc, #304]	; (80015d8 <HAL_RCC_OscConfig+0x26c>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f003 030c 	and.w	r3, r3, #12
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d00b      	beq.n	80014ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80014b2:	4b49      	ldr	r3, [pc, #292]	; (80015d8 <HAL_RCC_OscConfig+0x26c>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f003 030c 	and.w	r3, r3, #12
 80014ba:	2b08      	cmp	r3, #8
 80014bc:	d11c      	bne.n	80014f8 <HAL_RCC_OscConfig+0x18c>
 80014be:	4b46      	ldr	r3, [pc, #280]	; (80015d8 <HAL_RCC_OscConfig+0x26c>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d116      	bne.n	80014f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ca:	4b43      	ldr	r3, [pc, #268]	; (80015d8 <HAL_RCC_OscConfig+0x26c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d005      	beq.n	80014e2 <HAL_RCC_OscConfig+0x176>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	691b      	ldr	r3, [r3, #16]
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d001      	beq.n	80014e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e1ba      	b.n	8001858 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014e2:	493d      	ldr	r1, [pc, #244]	; (80015d8 <HAL_RCC_OscConfig+0x26c>)
 80014e4:	4b3c      	ldr	r3, [pc, #240]	; (80015d8 <HAL_RCC_OscConfig+0x26c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	695b      	ldr	r3, [r3, #20]
 80014f0:	00db      	lsls	r3, r3, #3
 80014f2:	4313      	orrs	r3, r2
 80014f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014f6:	e03a      	b.n	800156e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	691b      	ldr	r3, [r3, #16]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d020      	beq.n	8001542 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001500:	4b36      	ldr	r3, [pc, #216]	; (80015dc <HAL_RCC_OscConfig+0x270>)
 8001502:	2201      	movs	r2, #1
 8001504:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001506:	f7fe fe79 	bl	80001fc <HAL_GetTick>
 800150a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800150c:	e008      	b.n	8001520 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800150e:	f7fe fe75 	bl	80001fc <HAL_GetTick>
 8001512:	4602      	mov	r2, r0
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	2b02      	cmp	r3, #2
 800151a:	d901      	bls.n	8001520 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e19b      	b.n	8001858 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001520:	4b2d      	ldr	r3, [pc, #180]	; (80015d8 <HAL_RCC_OscConfig+0x26c>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 0302 	and.w	r3, r3, #2
 8001528:	2b00      	cmp	r3, #0
 800152a:	d0f0      	beq.n	800150e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800152c:	492a      	ldr	r1, [pc, #168]	; (80015d8 <HAL_RCC_OscConfig+0x26c>)
 800152e:	4b2a      	ldr	r3, [pc, #168]	; (80015d8 <HAL_RCC_OscConfig+0x26c>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	695b      	ldr	r3, [r3, #20]
 800153a:	00db      	lsls	r3, r3, #3
 800153c:	4313      	orrs	r3, r2
 800153e:	600b      	str	r3, [r1, #0]
 8001540:	e015      	b.n	800156e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001542:	4b26      	ldr	r3, [pc, #152]	; (80015dc <HAL_RCC_OscConfig+0x270>)
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001548:	f7fe fe58 	bl	80001fc <HAL_GetTick>
 800154c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800154e:	e008      	b.n	8001562 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001550:	f7fe fe54 	bl	80001fc <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	2b02      	cmp	r3, #2
 800155c:	d901      	bls.n	8001562 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e17a      	b.n	8001858 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001562:	4b1d      	ldr	r3, [pc, #116]	; (80015d8 <HAL_RCC_OscConfig+0x26c>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	2b00      	cmp	r3, #0
 800156c:	d1f0      	bne.n	8001550 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0308 	and.w	r3, r3, #8
 8001576:	2b00      	cmp	r3, #0
 8001578:	d03a      	beq.n	80015f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	699b      	ldr	r3, [r3, #24]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d019      	beq.n	80015b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001582:	4b17      	ldr	r3, [pc, #92]	; (80015e0 <HAL_RCC_OscConfig+0x274>)
 8001584:	2201      	movs	r2, #1
 8001586:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001588:	f7fe fe38 	bl	80001fc <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001590:	f7fe fe34 	bl	80001fc <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e15a      	b.n	8001858 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015a2:	4b0d      	ldr	r3, [pc, #52]	; (80015d8 <HAL_RCC_OscConfig+0x26c>)
 80015a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d0f0      	beq.n	8001590 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80015ae:	2001      	movs	r0, #1
 80015b0:	f000 fada 	bl	8001b68 <RCC_Delay>
 80015b4:	e01c      	b.n	80015f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015b6:	4b0a      	ldr	r3, [pc, #40]	; (80015e0 <HAL_RCC_OscConfig+0x274>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015bc:	f7fe fe1e 	bl	80001fc <HAL_GetTick>
 80015c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015c2:	e00f      	b.n	80015e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015c4:	f7fe fe1a 	bl	80001fc <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d908      	bls.n	80015e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e140      	b.n	8001858 <HAL_RCC_OscConfig+0x4ec>
 80015d6:	bf00      	nop
 80015d8:	40021000 	.word	0x40021000
 80015dc:	42420000 	.word	0x42420000
 80015e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015e4:	4b9e      	ldr	r3, [pc, #632]	; (8001860 <HAL_RCC_OscConfig+0x4f4>)
 80015e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e8:	f003 0302 	and.w	r3, r3, #2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d1e9      	bne.n	80015c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0304 	and.w	r3, r3, #4
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	f000 80a6 	beq.w	800174a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015fe:	2300      	movs	r3, #0
 8001600:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001602:	4b97      	ldr	r3, [pc, #604]	; (8001860 <HAL_RCC_OscConfig+0x4f4>)
 8001604:	69db      	ldr	r3, [r3, #28]
 8001606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d10d      	bne.n	800162a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800160e:	4a94      	ldr	r2, [pc, #592]	; (8001860 <HAL_RCC_OscConfig+0x4f4>)
 8001610:	4b93      	ldr	r3, [pc, #588]	; (8001860 <HAL_RCC_OscConfig+0x4f4>)
 8001612:	69db      	ldr	r3, [r3, #28]
 8001614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001618:	61d3      	str	r3, [r2, #28]
 800161a:	4b91      	ldr	r3, [pc, #580]	; (8001860 <HAL_RCC_OscConfig+0x4f4>)
 800161c:	69db      	ldr	r3, [r3, #28]
 800161e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001622:	60bb      	str	r3, [r7, #8]
 8001624:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001626:	2301      	movs	r3, #1
 8001628:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800162a:	4b8e      	ldr	r3, [pc, #568]	; (8001864 <HAL_RCC_OscConfig+0x4f8>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001632:	2b00      	cmp	r3, #0
 8001634:	d118      	bne.n	8001668 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001636:	4a8b      	ldr	r2, [pc, #556]	; (8001864 <HAL_RCC_OscConfig+0x4f8>)
 8001638:	4b8a      	ldr	r3, [pc, #552]	; (8001864 <HAL_RCC_OscConfig+0x4f8>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001640:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001642:	f7fe fddb 	bl	80001fc <HAL_GetTick>
 8001646:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001648:	e008      	b.n	800165c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800164a:	f7fe fdd7 	bl	80001fc <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b64      	cmp	r3, #100	; 0x64
 8001656:	d901      	bls.n	800165c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e0fd      	b.n	8001858 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800165c:	4b81      	ldr	r3, [pc, #516]	; (8001864 <HAL_RCC_OscConfig+0x4f8>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001664:	2b00      	cmp	r3, #0
 8001666:	d0f0      	beq.n	800164a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	2b01      	cmp	r3, #1
 800166e:	d106      	bne.n	800167e <HAL_RCC_OscConfig+0x312>
 8001670:	4a7b      	ldr	r2, [pc, #492]	; (8001860 <HAL_RCC_OscConfig+0x4f4>)
 8001672:	4b7b      	ldr	r3, [pc, #492]	; (8001860 <HAL_RCC_OscConfig+0x4f4>)
 8001674:	6a1b      	ldr	r3, [r3, #32]
 8001676:	f043 0301 	orr.w	r3, r3, #1
 800167a:	6213      	str	r3, [r2, #32]
 800167c:	e02d      	b.n	80016da <HAL_RCC_OscConfig+0x36e>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d10c      	bne.n	80016a0 <HAL_RCC_OscConfig+0x334>
 8001686:	4a76      	ldr	r2, [pc, #472]	; (8001860 <HAL_RCC_OscConfig+0x4f4>)
 8001688:	4b75      	ldr	r3, [pc, #468]	; (8001860 <HAL_RCC_OscConfig+0x4f4>)
 800168a:	6a1b      	ldr	r3, [r3, #32]
 800168c:	f023 0301 	bic.w	r3, r3, #1
 8001690:	6213      	str	r3, [r2, #32]
 8001692:	4a73      	ldr	r2, [pc, #460]	; (8001860 <HAL_RCC_OscConfig+0x4f4>)
 8001694:	4b72      	ldr	r3, [pc, #456]	; (8001860 <HAL_RCC_OscConfig+0x4f4>)
 8001696:	6a1b      	ldr	r3, [r3, #32]
 8001698:	f023 0304 	bic.w	r3, r3, #4
 800169c:	6213      	str	r3, [r2, #32]
 800169e:	e01c      	b.n	80016da <HAL_RCC_OscConfig+0x36e>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	2b05      	cmp	r3, #5
 80016a6:	d10c      	bne.n	80016c2 <HAL_RCC_OscConfig+0x356>
 80016a8:	4a6d      	ldr	r2, [pc, #436]	; (8001860 <HAL_RCC_OscConfig+0x4f4>)
 80016aa:	4b6d      	ldr	r3, [pc, #436]	; (8001860 <HAL_RCC_OscConfig+0x4f4>)
 80016ac:	6a1b      	ldr	r3, [r3, #32]
 80016ae:	f043 0304 	orr.w	r3, r3, #4
 80016b2:	6213      	str	r3, [r2, #32]
 80016b4:	4a6a      	ldr	r2, [pc, #424]	; (8001860 <HAL_RCC_OscConfig+0x4f4>)
 80016b6:	4b6a      	ldr	r3, [pc, #424]	; (8001860 <HAL_RCC_OscConfig+0x4f4>)
 80016b8:	6a1b      	ldr	r3, [r3, #32]
 80016ba:	f043 0301 	orr.w	r3, r3, #1
 80016be:	6213      	str	r3, [r2, #32]
 80016c0:	e00b      	b.n	80016da <HAL_RCC_OscConfig+0x36e>
 80016c2:	4a67      	ldr	r2, [pc, #412]	; (8001860 <HAL_RCC_OscConfig+0x4f4>)
 80016c4:	4b66      	ldr	r3, [pc, #408]	; (8001860 <HAL_RCC_OscConfig+0x4f4>)
 80016c6:	6a1b      	ldr	r3, [r3, #32]
 80016c8:	f023 0301 	bic.w	r3, r3, #1
 80016cc:	6213      	str	r3, [r2, #32]
 80016ce:	4a64      	ldr	r2, [pc, #400]	; (8001860 <HAL_RCC_OscConfig+0x4f4>)
 80016d0:	4b63      	ldr	r3, [pc, #396]	; (8001860 <HAL_RCC_OscConfig+0x4f4>)
 80016d2:	6a1b      	ldr	r3, [r3, #32]
 80016d4:	f023 0304 	bic.w	r3, r3, #4
 80016d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d015      	beq.n	800170e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016e2:	f7fe fd8b 	bl	80001fc <HAL_GetTick>
 80016e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016e8:	e00a      	b.n	8001700 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ea:	f7fe fd87 	bl	80001fc <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e0ab      	b.n	8001858 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001700:	4b57      	ldr	r3, [pc, #348]	; (8001860 <HAL_RCC_OscConfig+0x4f4>)
 8001702:	6a1b      	ldr	r3, [r3, #32]
 8001704:	f003 0302 	and.w	r3, r3, #2
 8001708:	2b00      	cmp	r3, #0
 800170a:	d0ee      	beq.n	80016ea <HAL_RCC_OscConfig+0x37e>
 800170c:	e014      	b.n	8001738 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800170e:	f7fe fd75 	bl	80001fc <HAL_GetTick>
 8001712:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001714:	e00a      	b.n	800172c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001716:	f7fe fd71 	bl	80001fc <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	f241 3288 	movw	r2, #5000	; 0x1388
 8001724:	4293      	cmp	r3, r2
 8001726:	d901      	bls.n	800172c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e095      	b.n	8001858 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800172c:	4b4c      	ldr	r3, [pc, #304]	; (8001860 <HAL_RCC_OscConfig+0x4f4>)
 800172e:	6a1b      	ldr	r3, [r3, #32]
 8001730:	f003 0302 	and.w	r3, r3, #2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d1ee      	bne.n	8001716 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001738:	7dfb      	ldrb	r3, [r7, #23]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d105      	bne.n	800174a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800173e:	4a48      	ldr	r2, [pc, #288]	; (8001860 <HAL_RCC_OscConfig+0x4f4>)
 8001740:	4b47      	ldr	r3, [pc, #284]	; (8001860 <HAL_RCC_OscConfig+0x4f4>)
 8001742:	69db      	ldr	r3, [r3, #28]
 8001744:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001748:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	69db      	ldr	r3, [r3, #28]
 800174e:	2b00      	cmp	r3, #0
 8001750:	f000 8081 	beq.w	8001856 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001754:	4b42      	ldr	r3, [pc, #264]	; (8001860 <HAL_RCC_OscConfig+0x4f4>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f003 030c 	and.w	r3, r3, #12
 800175c:	2b08      	cmp	r3, #8
 800175e:	d061      	beq.n	8001824 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	69db      	ldr	r3, [r3, #28]
 8001764:	2b02      	cmp	r3, #2
 8001766:	d146      	bne.n	80017f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001768:	4b3f      	ldr	r3, [pc, #252]	; (8001868 <HAL_RCC_OscConfig+0x4fc>)
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800176e:	f7fe fd45 	bl	80001fc <HAL_GetTick>
 8001772:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001774:	e008      	b.n	8001788 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001776:	f7fe fd41 	bl	80001fc <HAL_GetTick>
 800177a:	4602      	mov	r2, r0
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	2b02      	cmp	r3, #2
 8001782:	d901      	bls.n	8001788 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001784:	2303      	movs	r3, #3
 8001786:	e067      	b.n	8001858 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001788:	4b35      	ldr	r3, [pc, #212]	; (8001860 <HAL_RCC_OscConfig+0x4f4>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d1f0      	bne.n	8001776 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6a1b      	ldr	r3, [r3, #32]
 8001798:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800179c:	d108      	bne.n	80017b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800179e:	4930      	ldr	r1, [pc, #192]	; (8001860 <HAL_RCC_OscConfig+0x4f4>)
 80017a0:	4b2f      	ldr	r3, [pc, #188]	; (8001860 <HAL_RCC_OscConfig+0x4f4>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017b0:	482b      	ldr	r0, [pc, #172]	; (8001860 <HAL_RCC_OscConfig+0x4f4>)
 80017b2:	4b2b      	ldr	r3, [pc, #172]	; (8001860 <HAL_RCC_OscConfig+0x4f4>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6a19      	ldr	r1, [r3, #32]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c2:	430b      	orrs	r3, r1
 80017c4:	4313      	orrs	r3, r2
 80017c6:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017c8:	4b27      	ldr	r3, [pc, #156]	; (8001868 <HAL_RCC_OscConfig+0x4fc>)
 80017ca:	2201      	movs	r2, #1
 80017cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ce:	f7fe fd15 	bl	80001fc <HAL_GetTick>
 80017d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017d4:	e008      	b.n	80017e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017d6:	f7fe fd11 	bl	80001fc <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e037      	b.n	8001858 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017e8:	4b1d      	ldr	r3, [pc, #116]	; (8001860 <HAL_RCC_OscConfig+0x4f4>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d0f0      	beq.n	80017d6 <HAL_RCC_OscConfig+0x46a>
 80017f4:	e02f      	b.n	8001856 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017f6:	4b1c      	ldr	r3, [pc, #112]	; (8001868 <HAL_RCC_OscConfig+0x4fc>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017fc:	f7fe fcfe 	bl	80001fc <HAL_GetTick>
 8001800:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001802:	e008      	b.n	8001816 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001804:	f7fe fcfa 	bl	80001fc <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b02      	cmp	r3, #2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e020      	b.n	8001858 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001816:	4b12      	ldr	r3, [pc, #72]	; (8001860 <HAL_RCC_OscConfig+0x4f4>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1f0      	bne.n	8001804 <HAL_RCC_OscConfig+0x498>
 8001822:	e018      	b.n	8001856 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	69db      	ldr	r3, [r3, #28]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d101      	bne.n	8001830 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e013      	b.n	8001858 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001830:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <HAL_RCC_OscConfig+0x4f4>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a1b      	ldr	r3, [r3, #32]
 8001840:	429a      	cmp	r2, r3
 8001842:	d106      	bne.n	8001852 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800184e:	429a      	cmp	r2, r3
 8001850:	d001      	beq.n	8001856 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e000      	b.n	8001858 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001856:	2300      	movs	r3, #0
}
 8001858:	4618      	mov	r0, r3
 800185a:	3718      	adds	r7, #24
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40021000 	.word	0x40021000
 8001864:	40007000 	.word	0x40007000
 8001868:	42420060 	.word	0x42420060

0800186c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d101      	bne.n	8001880 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e0d0      	b.n	8001a22 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001880:	4b6a      	ldr	r3, [pc, #424]	; (8001a2c <HAL_RCC_ClockConfig+0x1c0>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0207 	and.w	r2, r3, #7
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	429a      	cmp	r2, r3
 800188c:	d210      	bcs.n	80018b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800188e:	4967      	ldr	r1, [pc, #412]	; (8001a2c <HAL_RCC_ClockConfig+0x1c0>)
 8001890:	4b66      	ldr	r3, [pc, #408]	; (8001a2c <HAL_RCC_ClockConfig+0x1c0>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f023 0207 	bic.w	r2, r3, #7
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	4313      	orrs	r3, r2
 800189c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800189e:	4b63      	ldr	r3, [pc, #396]	; (8001a2c <HAL_RCC_ClockConfig+0x1c0>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0207 	and.w	r2, r3, #7
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d001      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e0b8      	b.n	8001a22 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0302 	and.w	r3, r3, #2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d020      	beq.n	80018fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0304 	and.w	r3, r3, #4
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d005      	beq.n	80018d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018c8:	4a59      	ldr	r2, [pc, #356]	; (8001a30 <HAL_RCC_ClockConfig+0x1c4>)
 80018ca:	4b59      	ldr	r3, [pc, #356]	; (8001a30 <HAL_RCC_ClockConfig+0x1c4>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80018d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0308 	and.w	r3, r3, #8
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d005      	beq.n	80018ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018e0:	4a53      	ldr	r2, [pc, #332]	; (8001a30 <HAL_RCC_ClockConfig+0x1c4>)
 80018e2:	4b53      	ldr	r3, [pc, #332]	; (8001a30 <HAL_RCC_ClockConfig+0x1c4>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80018ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018ec:	4950      	ldr	r1, [pc, #320]	; (8001a30 <HAL_RCC_ClockConfig+0x1c4>)
 80018ee:	4b50      	ldr	r3, [pc, #320]	; (8001a30 <HAL_RCC_ClockConfig+0x1c4>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	2b00      	cmp	r3, #0
 8001908:	d040      	beq.n	800198c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d107      	bne.n	8001922 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001912:	4b47      	ldr	r3, [pc, #284]	; (8001a30 <HAL_RCC_ClockConfig+0x1c4>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d115      	bne.n	800194a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e07f      	b.n	8001a22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	2b02      	cmp	r3, #2
 8001928:	d107      	bne.n	800193a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800192a:	4b41      	ldr	r3, [pc, #260]	; (8001a30 <HAL_RCC_ClockConfig+0x1c4>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d109      	bne.n	800194a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e073      	b.n	8001a22 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800193a:	4b3d      	ldr	r3, [pc, #244]	; (8001a30 <HAL_RCC_ClockConfig+0x1c4>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d101      	bne.n	800194a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e06b      	b.n	8001a22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800194a:	4939      	ldr	r1, [pc, #228]	; (8001a30 <HAL_RCC_ClockConfig+0x1c4>)
 800194c:	4b38      	ldr	r3, [pc, #224]	; (8001a30 <HAL_RCC_ClockConfig+0x1c4>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f023 0203 	bic.w	r2, r3, #3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	4313      	orrs	r3, r2
 800195a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800195c:	f7fe fc4e 	bl	80001fc <HAL_GetTick>
 8001960:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001962:	e00a      	b.n	800197a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001964:	f7fe fc4a 	bl	80001fc <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001972:	4293      	cmp	r3, r2
 8001974:	d901      	bls.n	800197a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e053      	b.n	8001a22 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800197a:	4b2d      	ldr	r3, [pc, #180]	; (8001a30 <HAL_RCC_ClockConfig+0x1c4>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f003 020c 	and.w	r2, r3, #12
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	429a      	cmp	r2, r3
 800198a:	d1eb      	bne.n	8001964 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800198c:	4b27      	ldr	r3, [pc, #156]	; (8001a2c <HAL_RCC_ClockConfig+0x1c0>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0207 	and.w	r2, r3, #7
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	429a      	cmp	r2, r3
 8001998:	d910      	bls.n	80019bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800199a:	4924      	ldr	r1, [pc, #144]	; (8001a2c <HAL_RCC_ClockConfig+0x1c0>)
 800199c:	4b23      	ldr	r3, [pc, #140]	; (8001a2c <HAL_RCC_ClockConfig+0x1c0>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f023 0207 	bic.w	r2, r3, #7
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019aa:	4b20      	ldr	r3, [pc, #128]	; (8001a2c <HAL_RCC_ClockConfig+0x1c0>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0207 	and.w	r2, r3, #7
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d001      	beq.n	80019bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e032      	b.n	8001a22 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0304 	and.w	r3, r3, #4
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d008      	beq.n	80019da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019c8:	4919      	ldr	r1, [pc, #100]	; (8001a30 <HAL_RCC_ClockConfig+0x1c4>)
 80019ca:	4b19      	ldr	r3, [pc, #100]	; (8001a30 <HAL_RCC_ClockConfig+0x1c4>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0308 	and.w	r3, r3, #8
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d009      	beq.n	80019fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019e6:	4912      	ldr	r1, [pc, #72]	; (8001a30 <HAL_RCC_ClockConfig+0x1c4>)
 80019e8:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <HAL_RCC_ClockConfig+0x1c4>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	691b      	ldr	r3, [r3, #16]
 80019f4:	00db      	lsls	r3, r3, #3
 80019f6:	4313      	orrs	r3, r2
 80019f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019fa:	f000 f821 	bl	8001a40 <HAL_RCC_GetSysClockFreq>
 80019fe:	4601      	mov	r1, r0
 8001a00:	4b0b      	ldr	r3, [pc, #44]	; (8001a30 <HAL_RCC_ClockConfig+0x1c4>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	091b      	lsrs	r3, r3, #4
 8001a06:	f003 030f 	and.w	r3, r3, #15
 8001a0a:	4a0a      	ldr	r2, [pc, #40]	; (8001a34 <HAL_RCC_ClockConfig+0x1c8>)
 8001a0c:	5cd3      	ldrb	r3, [r2, r3]
 8001a0e:	fa21 f303 	lsr.w	r3, r1, r3
 8001a12:	4a09      	ldr	r2, [pc, #36]	; (8001a38 <HAL_RCC_ClockConfig+0x1cc>)
 8001a14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a16:	4b09      	ldr	r3, [pc, #36]	; (8001a3c <HAL_RCC_ClockConfig+0x1d0>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7fe fbac 	bl	8000178 <HAL_InitTick>

  return HAL_OK;
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3710      	adds	r7, #16
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40022000 	.word	0x40022000
 8001a30:	40021000 	.word	0x40021000
 8001a34:	08002878 	.word	0x08002878
 8001a38:	20000008 	.word	0x20000008
 8001a3c:	20000000 	.word	0x20000000

08001a40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a40:	b490      	push	{r4, r7}
 8001a42:	b08a      	sub	sp, #40	; 0x28
 8001a44:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001a46:	4b2a      	ldr	r3, [pc, #168]	; (8001af0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001a48:	1d3c      	adds	r4, r7, #4
 8001a4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001a50:	4b28      	ldr	r3, [pc, #160]	; (8001af4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a52:	881b      	ldrh	r3, [r3, #0]
 8001a54:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a56:	2300      	movs	r3, #0
 8001a58:	61fb      	str	r3, [r7, #28]
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	61bb      	str	r3, [r7, #24]
 8001a5e:	2300      	movs	r3, #0
 8001a60:	627b      	str	r3, [r7, #36]	; 0x24
 8001a62:	2300      	movs	r3, #0
 8001a64:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001a66:	2300      	movs	r3, #0
 8001a68:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a6a:	4b23      	ldr	r3, [pc, #140]	; (8001af8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	f003 030c 	and.w	r3, r3, #12
 8001a76:	2b04      	cmp	r3, #4
 8001a78:	d002      	beq.n	8001a80 <HAL_RCC_GetSysClockFreq+0x40>
 8001a7a:	2b08      	cmp	r3, #8
 8001a7c:	d003      	beq.n	8001a86 <HAL_RCC_GetSysClockFreq+0x46>
 8001a7e:	e02d      	b.n	8001adc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a80:	4b1e      	ldr	r3, [pc, #120]	; (8001afc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a82:	623b      	str	r3, [r7, #32]
      break;
 8001a84:	e02d      	b.n	8001ae2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	0c9b      	lsrs	r3, r3, #18
 8001a8a:	f003 030f 	and.w	r3, r3, #15
 8001a8e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a92:	4413      	add	r3, r2
 8001a94:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001a98:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d013      	beq.n	8001acc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001aa4:	4b14      	ldr	r3, [pc, #80]	; (8001af8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	0c5b      	lsrs	r3, r3, #17
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001ab2:	4413      	add	r3, r2
 8001ab4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001ab8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	4a0f      	ldr	r2, [pc, #60]	; (8001afc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001abe:	fb02 f203 	mul.w	r2, r2, r3
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac8:	627b      	str	r3, [r7, #36]	; 0x24
 8001aca:	e004      	b.n	8001ad6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	4a0c      	ldr	r2, [pc, #48]	; (8001b00 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ad0:	fb02 f303 	mul.w	r3, r2, r3
 8001ad4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad8:	623b      	str	r3, [r7, #32]
      break;
 8001ada:	e002      	b.n	8001ae2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001adc:	4b07      	ldr	r3, [pc, #28]	; (8001afc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ade:	623b      	str	r3, [r7, #32]
      break;
 8001ae0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ae2:	6a3b      	ldr	r3, [r7, #32]
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3728      	adds	r7, #40	; 0x28
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bc90      	pop	{r4, r7}
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	08002850 	.word	0x08002850
 8001af4:	08002860 	.word	0x08002860
 8001af8:	40021000 	.word	0x40021000
 8001afc:	007a1200 	.word	0x007a1200
 8001b00:	003d0900 	.word	0x003d0900

08001b04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b08:	4b02      	ldr	r3, [pc, #8]	; (8001b14 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bc80      	pop	{r7}
 8001b12:	4770      	bx	lr
 8001b14:	20000008 	.word	0x20000008

08001b18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b1c:	f7ff fff2 	bl	8001b04 <HAL_RCC_GetHCLKFreq>
 8001b20:	4601      	mov	r1, r0
 8001b22:	4b05      	ldr	r3, [pc, #20]	; (8001b38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	0a1b      	lsrs	r3, r3, #8
 8001b28:	f003 0307 	and.w	r3, r3, #7
 8001b2c:	4a03      	ldr	r2, [pc, #12]	; (8001b3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b2e:	5cd3      	ldrb	r3, [r2, r3]
 8001b30:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	08002888 	.word	0x08002888

08001b40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b44:	f7ff ffde 	bl	8001b04 <HAL_RCC_GetHCLKFreq>
 8001b48:	4601      	mov	r1, r0
 8001b4a:	4b05      	ldr	r3, [pc, #20]	; (8001b60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	0adb      	lsrs	r3, r3, #11
 8001b50:	f003 0307 	and.w	r3, r3, #7
 8001b54:	4a03      	ldr	r2, [pc, #12]	; (8001b64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b56:	5cd3      	ldrb	r3, [r2, r3]
 8001b58:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40021000 	.word	0x40021000
 8001b64:	08002888 	.word	0x08002888

08001b68 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b70:	4b0a      	ldr	r3, [pc, #40]	; (8001b9c <RCC_Delay+0x34>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a0a      	ldr	r2, [pc, #40]	; (8001ba0 <RCC_Delay+0x38>)
 8001b76:	fba2 2303 	umull	r2, r3, r2, r3
 8001b7a:	0a5b      	lsrs	r3, r3, #9
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	fb02 f303 	mul.w	r3, r2, r3
 8001b82:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b84:	bf00      	nop
  }
  while (Delay --);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	1e5a      	subs	r2, r3, #1
 8001b8a:	60fa      	str	r2, [r7, #12]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d1f9      	bne.n	8001b84 <RCC_Delay+0x1c>
}
 8001b90:	bf00      	nop
 8001b92:	3714      	adds	r7, #20
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bc80      	pop	{r7}
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	20000008 	.word	0x20000008
 8001ba0:	10624dd3 	.word	0x10624dd3

08001ba4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001bac:	2300      	movs	r3, #0
 8001bae:	613b      	str	r3, [r7, #16]
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0301 	and.w	r3, r3, #1
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d07d      	beq.n	8001cbc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bc4:	4b4f      	ldr	r3, [pc, #316]	; (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bc6:	69db      	ldr	r3, [r3, #28]
 8001bc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d10d      	bne.n	8001bec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bd0:	4a4c      	ldr	r2, [pc, #304]	; (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bd2:	4b4c      	ldr	r3, [pc, #304]	; (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bd4:	69db      	ldr	r3, [r3, #28]
 8001bd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bda:	61d3      	str	r3, [r2, #28]
 8001bdc:	4b49      	ldr	r3, [pc, #292]	; (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bde:	69db      	ldr	r3, [r3, #28]
 8001be0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be4:	60bb      	str	r3, [r7, #8]
 8001be6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001be8:	2301      	movs	r3, #1
 8001bea:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bec:	4b46      	ldr	r3, [pc, #280]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d118      	bne.n	8001c2a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bf8:	4a43      	ldr	r2, [pc, #268]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001bfa:	4b43      	ldr	r3, [pc, #268]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c02:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c04:	f7fe fafa 	bl	80001fc <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c0a:	e008      	b.n	8001c1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c0c:	f7fe faf6 	bl	80001fc <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b64      	cmp	r3, #100	; 0x64
 8001c18:	d901      	bls.n	8001c1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e06d      	b.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c1e:	4b3a      	ldr	r3, [pc, #232]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d0f0      	beq.n	8001c0c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c2a:	4b36      	ldr	r3, [pc, #216]	; (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c2c:	6a1b      	ldr	r3, [r3, #32]
 8001c2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c32:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d02e      	beq.n	8001c98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d027      	beq.n	8001c98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c48:	4b2e      	ldr	r3, [pc, #184]	; (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c4a:	6a1b      	ldr	r3, [r3, #32]
 8001c4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c50:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c52:	4b2e      	ldr	r3, [pc, #184]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001c54:	2201      	movs	r2, #1
 8001c56:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c58:	4b2c      	ldr	r3, [pc, #176]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001c5e:	4a29      	ldr	r2, [pc, #164]	; (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d014      	beq.n	8001c98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c6e:	f7fe fac5 	bl	80001fc <HAL_GetTick>
 8001c72:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c74:	e00a      	b.n	8001c8c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c76:	f7fe fac1 	bl	80001fc <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d901      	bls.n	8001c8c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e036      	b.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c8c:	4b1d      	ldr	r3, [pc, #116]	; (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c8e:	6a1b      	ldr	r3, [r3, #32]
 8001c90:	f003 0302 	and.w	r3, r3, #2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d0ee      	beq.n	8001c76 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c98:	491a      	ldr	r1, [pc, #104]	; (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c9a:	4b1a      	ldr	r3, [pc, #104]	; (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c9c:	6a1b      	ldr	r3, [r3, #32]
 8001c9e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001caa:	7dfb      	ldrb	r3, [r7, #23]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d105      	bne.n	8001cbc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cb0:	4a14      	ldr	r2, [pc, #80]	; (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cb2:	4b14      	ldr	r3, [pc, #80]	; (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d008      	beq.n	8001cda <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001cc8:	490e      	ldr	r1, [pc, #56]	; (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cca:	4b0e      	ldr	r3, [pc, #56]	; (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0310 	and.w	r3, r3, #16
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d008      	beq.n	8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001ce6:	4907      	ldr	r1, [pc, #28]	; (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ce8:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3718      	adds	r7, #24
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	40021000 	.word	0x40021000
 8001d08:	40007000 	.word	0x40007000
 8001d0c:	42420440 	.word	0x42420440

08001d10 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001d10:	b590      	push	{r4, r7, lr}
 8001d12:	b08d      	sub	sp, #52	; 0x34
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001d18:	4b55      	ldr	r3, [pc, #340]	; (8001e70 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8001d1a:	f107 040c 	add.w	r4, r7, #12
 8001d1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001d24:	4b53      	ldr	r3, [pc, #332]	; (8001e74 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8001d26:	881b      	ldrh	r3, [r3, #0]
 8001d28:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d2e:	2300      	movs	r3, #0
 8001d30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d32:	2300      	movs	r3, #0
 8001d34:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8001d36:	2300      	movs	r3, #0
 8001d38:	61fb      	str	r3, [r7, #28]
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d07f      	beq.n	8001e44 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8001d44:	2b10      	cmp	r3, #16
 8001d46:	d002      	beq.n	8001d4e <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d048      	beq.n	8001dde <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8001d4c:	e08b      	b.n	8001e66 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8001d4e:	4b4a      	ldr	r3, [pc, #296]	; (8001e78 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001d54:	4b48      	ldr	r3, [pc, #288]	; (8001e78 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d07f      	beq.n	8001e60 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	0c9b      	lsrs	r3, r3, #18
 8001d64:	f003 030f 	and.w	r3, r3, #15
 8001d68:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001d6c:	4413      	add	r3, r2
 8001d6e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001d72:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d018      	beq.n	8001db0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d7e:	4b3e      	ldr	r3, [pc, #248]	; (8001e78 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	0c5b      	lsrs	r3, r3, #17
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001d8c:	4413      	add	r3, r2
 8001d8e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001d92:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d00d      	beq.n	8001dba <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001d9e:	4a37      	ldr	r2, [pc, #220]	; (8001e7c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8001da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da6:	6a3a      	ldr	r2, [r7, #32]
 8001da8:	fb02 f303 	mul.w	r3, r2, r3
 8001dac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dae:	e004      	b.n	8001dba <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001db0:	6a3b      	ldr	r3, [r7, #32]
 8001db2:	4a33      	ldr	r2, [pc, #204]	; (8001e80 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001db4:	fb02 f303 	mul.w	r3, r2, r3
 8001db8:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001dba:	4b2f      	ldr	r3, [pc, #188]	; (8001e78 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dc6:	d102      	bne.n	8001dce <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8001dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dca:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001dcc:	e048      	b.n	8001e60 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8001dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	4a2c      	ldr	r2, [pc, #176]	; (8001e84 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8001dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd8:	085b      	lsrs	r3, r3, #1
 8001dda:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001ddc:	e040      	b.n	8001e60 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8001dde:	4b26      	ldr	r3, [pc, #152]	; (8001e78 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001de0:	6a1b      	ldr	r3, [r3, #32]
 8001de2:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dee:	d108      	bne.n	8001e02 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8001dfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001dfe:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e00:	e01f      	b.n	8001e42 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e0c:	d109      	bne.n	8001e22 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8001e0e:	4b1a      	ldr	r3, [pc, #104]	; (8001e78 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d003      	beq.n	8001e22 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8001e1a:	f649 4340 	movw	r3, #40000	; 0x9c40
 8001e1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e20:	e00f      	b.n	8001e42 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001e2c:	d11a      	bne.n	8001e64 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8001e2e:	4b12      	ldr	r3, [pc, #72]	; (8001e78 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d014      	beq.n	8001e64 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8001e3a:	f24f 4324 	movw	r3, #62500	; 0xf424
 8001e3e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001e40:	e010      	b.n	8001e64 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8001e42:	e00f      	b.n	8001e64 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001e44:	f7ff fe7c 	bl	8001b40 <HAL_RCC_GetPCLK2Freq>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	4b0b      	ldr	r3, [pc, #44]	; (8001e78 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	0b9b      	lsrs	r3, r3, #14
 8001e50:	f003 0303 	and.w	r3, r3, #3
 8001e54:	3301      	adds	r3, #1
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e5c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001e5e:	e002      	b.n	8001e66 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8001e60:	bf00      	nop
 8001e62:	e000      	b.n	8001e66 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8001e64:	bf00      	nop
    }
  }
  return (frequency);
 8001e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3734      	adds	r7, #52	; 0x34
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd90      	pop	{r4, r7, pc}
 8001e70:	08002864 	.word	0x08002864
 8001e74:	08002874 	.word	0x08002874
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	007a1200 	.word	0x007a1200
 8001e80:	003d0900 	.word	0x003d0900
 8001e84:	aaaaaaab 	.word	0xaaaaaaab

08001e88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d101      	bne.n	8001e9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e03f      	b.n	8001f1a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d106      	bne.n	8001eb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 fbec 	bl	800268c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2224      	movs	r2, #36	; 0x24
 8001eb8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	6812      	ldr	r2, [r2, #0]
 8001ec4:	68d2      	ldr	r2, [r2, #12]
 8001ec6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001eca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f000 f829 	bl	8001f24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	6812      	ldr	r2, [r2, #0]
 8001eda:	6912      	ldr	r2, [r2, #16]
 8001edc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ee0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	6812      	ldr	r2, [r2, #0]
 8001eea:	6952      	ldr	r2, [r2, #20]
 8001eec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ef0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	6812      	ldr	r2, [r2, #0]
 8001efa:	68d2      	ldr	r2, [r2, #12]
 8001efc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2220      	movs	r2, #32
 8001f0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2220      	movs	r2, #32
 8001f14:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
	...

08001f24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f24:	b590      	push	{r4, r7, lr}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	6812      	ldr	r2, [r2, #0]
 8001f34:	6912      	ldr	r2, [r2, #16]
 8001f36:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	68d2      	ldr	r2, [r2, #12]
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	689a      	ldr	r2, [r3, #8]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	431a      	orrs	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	695b      	ldr	r3, [r3, #20]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001f62:	f023 030c 	bic.w	r3, r3, #12
 8001f66:	68b9      	ldr	r1, [r7, #8]
 8001f68:	430b      	orrs	r3, r1
 8001f6a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	6812      	ldr	r2, [r2, #0]
 8001f74:	6952      	ldr	r2, [r2, #20]
 8001f76:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	6992      	ldr	r2, [r2, #24]
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a2c      	ldr	r2, [pc, #176]	; (8002038 <UART_SetConfig+0x114>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d103      	bne.n	8001f94 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001f8c:	f7ff fdd8 	bl	8001b40 <HAL_RCC_GetPCLK2Freq>
 8001f90:	60f8      	str	r0, [r7, #12]
 8001f92:	e002      	b.n	8001f9a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001f94:	f7ff fdc0 	bl	8001b18 <HAL_RCC_GetPCLK1Freq>
 8001f98:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6819      	ldr	r1, [r3, #0]
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	4413      	add	r3, r2
 8001fa6:	009a      	lsls	r2, r3, #2
 8001fa8:	441a      	add	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb4:	4a21      	ldr	r2, [pc, #132]	; (800203c <UART_SetConfig+0x118>)
 8001fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fba:	095b      	lsrs	r3, r3, #5
 8001fbc:	0118      	lsls	r0, r3, #4
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	4413      	add	r3, r2
 8001fc6:	009a      	lsls	r2, r3, #2
 8001fc8:	441a      	add	r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fd4:	4b19      	ldr	r3, [pc, #100]	; (800203c <UART_SetConfig+0x118>)
 8001fd6:	fba3 4302 	umull	r4, r3, r3, r2
 8001fda:	095b      	lsrs	r3, r3, #5
 8001fdc:	2464      	movs	r4, #100	; 0x64
 8001fde:	fb04 f303 	mul.w	r3, r4, r3
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	011b      	lsls	r3, r3, #4
 8001fe6:	3332      	adds	r3, #50	; 0x32
 8001fe8:	4a14      	ldr	r2, [pc, #80]	; (800203c <UART_SetConfig+0x118>)
 8001fea:	fba2 2303 	umull	r2, r3, r2, r3
 8001fee:	095b      	lsrs	r3, r3, #5
 8001ff0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ff4:	4418      	add	r0, r3
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	4413      	add	r3, r2
 8001ffe:	009a      	lsls	r2, r3, #2
 8002000:	441a      	add	r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	fbb2 f2f3 	udiv	r2, r2, r3
 800200c:	4b0b      	ldr	r3, [pc, #44]	; (800203c <UART_SetConfig+0x118>)
 800200e:	fba3 4302 	umull	r4, r3, r3, r2
 8002012:	095b      	lsrs	r3, r3, #5
 8002014:	2464      	movs	r4, #100	; 0x64
 8002016:	fb04 f303 	mul.w	r3, r4, r3
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	011b      	lsls	r3, r3, #4
 800201e:	3332      	adds	r3, #50	; 0x32
 8002020:	4a06      	ldr	r2, [pc, #24]	; (800203c <UART_SetConfig+0x118>)
 8002022:	fba2 2303 	umull	r2, r3, r2, r3
 8002026:	095b      	lsrs	r3, r3, #5
 8002028:	f003 030f 	and.w	r3, r3, #15
 800202c:	4403      	add	r3, r0
 800202e:	608b      	str	r3, [r1, #8]
#endif /* USART_CR1_OVER8 */
}
 8002030:	bf00      	nop
 8002032:	3714      	adds	r7, #20
 8002034:	46bd      	mov	sp, r7
 8002036:	bd90      	pop	{r4, r7, pc}
 8002038:	40013800 	.word	0x40013800
 800203c:	51eb851f 	.word	0x51eb851f

08002040 <EVMS2_init>:
 *  Discribtion : TO initialize ADC , Transmit values of Breaks through UART
 *  Inputs 	   : NONE
 *  Outputs     : NONE
 */
void EVMS2_init(void)
{  
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
	// Start ADC Conversion
	HAL_ADC_Start(&hadc1);
 8002044:	4807      	ldr	r0, [pc, #28]	; (8002064 <EVMS2_init+0x24>)
 8002046:	f7fe f9bb 	bl	80003c0 <HAL_ADC_Start>

	//sprintf(UART_message, "%d/n", ADC_values[2]);

	//HAL_UART_Transmit(&huart3, UART_message, sizeof(UART_message), 50);
	// Poll ADC1 Perihperal & TimeOut = 5mSec
	HAL_ADC_PollForConversion(&hadc1, 5);
 800204a:	2105      	movs	r1, #5
 800204c:	4805      	ldr	r0, [pc, #20]	; (8002064 <EVMS2_init+0x24>)
 800204e:	f7fe fa65 	bl	800051c <HAL_ADC_PollForConversion>

	_ADC_BrakesValues[0] = HAL_ADC_GetValue(&hadc1);
 8002052:	4804      	ldr	r0, [pc, #16]	; (8002064 <EVMS2_init+0x24>)
 8002054:	f7fe fb5c 	bl	8000710 <HAL_ADC_GetValue>
 8002058:	4603      	mov	r3, r0
 800205a:	b29a      	uxth	r2, r3
 800205c:	4b02      	ldr	r3, [pc, #8]	; (8002068 <EVMS2_init+0x28>)
 800205e:	801a      	strh	r2, [r3, #0]

	//HAL_ADC_Start_DMA(&hadc1,&_ADC_BrakesValues,DMA_LENGTH);
	//sprintf(MSG, "%d\r\n", _ADC_BrakesValues[0]);
	//HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);

}//end FUNC EVMS2_init
 8002060:	bf00      	nop
 8002062:	bd80      	pop	{r7, pc}
 8002064:	20000034 	.word	0x20000034
 8002068:	20000030 	.word	0x20000030

0800206c <ADC_uint16ReadBrakes>:
                 and  take average value of break angle on 10 stages
 *  Inputs 	   : NONE
 *  Outputs     : uint16_t (brakes_read/10)
 */
uint16_t ADC_uint16ReadBrakes(void)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
	uint16_t brakes_read  = 0 ;
 8002072:	2300      	movs	r3, #0
 8002074:	80fb      	strh	r3, [r7, #6]

	for(int i=0;i<10;i++)
 8002076:	2300      	movs	r3, #0
 8002078:	603b      	str	r3, [r7, #0]
 800207a:	e007      	b.n	800208c <ADC_uint16ReadBrakes+0x20>
	{
		brakes_read+=_ADC_BrakesValues[0];
 800207c:	4b0a      	ldr	r3, [pc, #40]	; (80020a8 <ADC_uint16ReadBrakes+0x3c>)
 800207e:	881a      	ldrh	r2, [r3, #0]
 8002080:	88fb      	ldrh	r3, [r7, #6]
 8002082:	4413      	add	r3, r2
 8002084:	80fb      	strh	r3, [r7, #6]
	for(int i=0;i<10;i++)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	3301      	adds	r3, #1
 800208a:	603b      	str	r3, [r7, #0]
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	2b09      	cmp	r3, #9
 8002090:	ddf4      	ble.n	800207c <ADC_uint16ReadBrakes+0x10>
	}//end for 

	return (brakes_read/10);
 8002092:	88fb      	ldrh	r3, [r7, #6]
 8002094:	4a05      	ldr	r2, [pc, #20]	; (80020ac <ADC_uint16ReadBrakes+0x40>)
 8002096:	fba2 2303 	umull	r2, r3, r2, r3
 800209a:	08db      	lsrs	r3, r3, #3
 800209c:	b29b      	uxth	r3, r3

}//end FUNC ADC_uint16ReadBrakes
 800209e:	4618      	mov	r0, r3
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bc80      	pop	{r7}
 80020a6:	4770      	bx	lr
 80020a8:	20000030 	.word	0x20000030
 80020ac:	cccccccd 	.word	0xcccccccd

080020b0 <LOGIC_uint8CheckIMD>:
 *                and return TRUE or FAlSE based on the comparision
 *  Inputs 	   : NONE
 *  Outputs     : uint8_t
 */
uint8_t LOGIC_uint8CheckIMD()
{
 80020b0:	b598      	push	{r3, r4, r7, lr}
 80020b2:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(IMD_RELAY_FB_GPIO_Port,IMD_RELAY_FB_Pin)!= HAL_GPIO_ReadPin(IMD_FB_GPIO_Port,IMD_FB_Pin))
 80020b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020b8:	4808      	ldr	r0, [pc, #32]	; (80020dc <LOGIC_uint8CheckIMD+0x2c>)
 80020ba:	f7ff f927 	bl	800130c <HAL_GPIO_ReadPin>
 80020be:	4603      	mov	r3, r0
 80020c0:	461c      	mov	r4, r3
 80020c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80020c6:	4805      	ldr	r0, [pc, #20]	; (80020dc <LOGIC_uint8CheckIMD+0x2c>)
 80020c8:	f7ff f920 	bl	800130c <HAL_GPIO_ReadPin>
 80020cc:	4603      	mov	r3, r0
 80020ce:	429c      	cmp	r4, r3
 80020d0:	d001      	beq.n	80020d6 <LOGIC_uint8CheckIMD+0x26>
	{
		return TRUE ;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e000      	b.n	80020d8 <LOGIC_uint8CheckIMD+0x28>
	}//end if 

	return FALSE ;
 80020d6:	2300      	movs	r3, #0

}//end FUNC LOGIC_uint8CheckIMD
 80020d8:	4618      	mov	r0, r3
 80020da:	bd98      	pop	{r3, r4, r7, pc}
 80020dc:	40010c00 	.word	0x40010c00

080020e0 <LOGIC_uint8CheckBMS>:
 *  Discribtion : To check on  BMS feedback
 *  Inputs 	   : NONE
 *  Outputs     : uint8_t
 */
uint8_t LOGIC_uint8CheckBMS()
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
	if( HAL_GPIO_ReadPin(BMS_FB_GPIO_Port,BMS_FB_Pin) == FALSE )
 80020e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020e8:	4805      	ldr	r0, [pc, #20]	; (8002100 <LOGIC_uint8CheckBMS+0x20>)
 80020ea:	f7ff f90f 	bl	800130c <HAL_GPIO_ReadPin>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d101      	bne.n	80020f8 <LOGIC_uint8CheckBMS+0x18>
	{
		return TRUE ;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e000      	b.n	80020fa <LOGIC_uint8CheckBMS+0x1a>
	}//end if 

	return FALSE ;
 80020f8:	2300      	movs	r3, #0

}//end FUNC LOGIC_uint8CheckBMS
 80020fa:	4618      	mov	r0, r3
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	40010800 	.word	0x40010800

08002104 <LOGIC_uint8CheckBSPD>:
 *                and return TRUE or FAlSE based on the comparision
 *  Inputs 	   : NONE
 *  Outputs     : uint8_t
 */
uint8_t LOGIC_uint8CheckBSPD()
{
 8002104:	b598      	push	{r3, r4, r7, lr}
 8002106:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(BSPD_RELAY_FB_GPIO_Port,BSPD_RELAY_FB_Pin)!= HAL_GPIO_ReadPin(BSPD_FB_GPIO_Port,BSPD_FB_Pin))
 8002108:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800210c:	4808      	ldr	r0, [pc, #32]	; (8002130 <LOGIC_uint8CheckBSPD+0x2c>)
 800210e:	f7ff f8fd 	bl	800130c <HAL_GPIO_ReadPin>
 8002112:	4603      	mov	r3, r0
 8002114:	461c      	mov	r4, r3
 8002116:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800211a:	4805      	ldr	r0, [pc, #20]	; (8002130 <LOGIC_uint8CheckBSPD+0x2c>)
 800211c:	f7ff f8f6 	bl	800130c <HAL_GPIO_ReadPin>
 8002120:	4603      	mov	r3, r0
 8002122:	429c      	cmp	r4, r3
 8002124:	d001      	beq.n	800212a <LOGIC_uint8CheckBSPD+0x26>
	{
		return  TRUE ;
 8002126:	2301      	movs	r3, #1
 8002128:	e000      	b.n	800212c <LOGIC_uint8CheckBSPD+0x28>
	}//end if

	return FALSE ;
 800212a:	2300      	movs	r3, #0

}//end FUNC LOGIC_uint8CheckBSPD
 800212c:	4618      	mov	r0, r3
 800212e:	bd98      	pop	{r3, r4, r7, pc}
 8002130:	40010c00 	.word	0x40010c00

08002134 <isError>:
 *  Discribtion : TO check if there is any error in BSPD , BMS , IMD
 *  Inputs 	   : NONE
 *  Outputs     : uint8_t
 */
uint8_t isError(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
	_Error[BSPD_flag] = LOGIC_uint8CheckBSPD();
 8002138:	f7ff ffe4 	bl	8002104 <LOGIC_uint8CheckBSPD>
 800213c:	4603      	mov	r3, r0
 800213e:	461a      	mov	r2, r3
 8002140:	4b0f      	ldr	r3, [pc, #60]	; (8002180 <isError+0x4c>)
 8002142:	701a      	strb	r2, [r3, #0]
	_Error[BMS_flag]  = LOGIC_uint8CheckBMS() ;
 8002144:	f7ff ffcc 	bl	80020e0 <LOGIC_uint8CheckBMS>
 8002148:	4603      	mov	r3, r0
 800214a:	461a      	mov	r2, r3
 800214c:	4b0c      	ldr	r3, [pc, #48]	; (8002180 <isError+0x4c>)
 800214e:	705a      	strb	r2, [r3, #1]
	_Error[IMD_flag]  = LOGIC_uint8CheckIMD() ;
 8002150:	f7ff ffae 	bl	80020b0 <LOGIC_uint8CheckIMD>
 8002154:	4603      	mov	r3, r0
 8002156:	461a      	mov	r2, r3
 8002158:	4b09      	ldr	r3, [pc, #36]	; (8002180 <isError+0x4c>)
 800215a:	709a      	strb	r2, [r3, #2]

	if( _Error[BSPD_flag] || _Error[BMS_flag]  || _Error[IMD_flag] ) 
 800215c:	4b08      	ldr	r3, [pc, #32]	; (8002180 <isError+0x4c>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d107      	bne.n	8002174 <isError+0x40>
 8002164:	4b06      	ldr	r3, [pc, #24]	; (8002180 <isError+0x4c>)
 8002166:	785b      	ldrb	r3, [r3, #1]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d103      	bne.n	8002174 <isError+0x40>
 800216c:	4b04      	ldr	r3, [pc, #16]	; (8002180 <isError+0x4c>)
 800216e:	789b      	ldrb	r3, [r3, #2]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <isError+0x44>
	{
		return ERROR; 
 8002174:	2300      	movs	r3, #0
 8002176:	e000      	b.n	800217a <isError+0x46>
	}//end if 

	return NOERROR;
 8002178:	2301      	movs	r3, #1

}//end FUNC isError
 800217a:	4618      	mov	r0, r3
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	20000028 	.word	0x20000028

08002184 <LOGIC_voidControlFan>:
 *                     false --------> RESET FAN_RELAY
 *  Inputs 	   : NONE
 *  Outputs     : NONE
 */
void LOGIC_voidControlFan()
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
	if( HAL_GPIO_ReadPin(BSPD_RELAY_FB_GPIO_Port,BSPD_RELAY_FB_Pin) > FAN_THRESHOLD )
 8002188:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800218c:	480a      	ldr	r0, [pc, #40]	; (80021b8 <LOGIC_voidControlFan+0x34>)
 800218e:	f7ff f8bd 	bl	800130c <HAL_GPIO_ReadPin>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d006      	beq.n	80021a6 <LOGIC_voidControlFan+0x22>
	{
		HAL_GPIO_WritePin(FAN_RELAY_GPIO_Port,FAN_RELAY_Pin,SET);
 8002198:	2201      	movs	r2, #1
 800219a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800219e:	4807      	ldr	r0, [pc, #28]	; (80021bc <LOGIC_voidControlFan+0x38>)
 80021a0:	f7ff f8cb 	bl	800133a <HAL_GPIO_WritePin>
	else
	{
		HAL_GPIO_WritePin(FAN_RELAY_GPIO_Port,FAN_RELAY_Pin,RESET);
	}//end else 

}//end FUNC LOGIC_voidControlFan
 80021a4:	e005      	b.n	80021b2 <LOGIC_voidControlFan+0x2e>
		HAL_GPIO_WritePin(FAN_RELAY_GPIO_Port,FAN_RELAY_Pin,RESET);
 80021a6:	2200      	movs	r2, #0
 80021a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021ac:	4803      	ldr	r0, [pc, #12]	; (80021bc <LOGIC_voidControlFan+0x38>)
 80021ae:	f7ff f8c4 	bl	800133a <HAL_GPIO_WritePin>
}//end FUNC LOGIC_voidControlFan
 80021b2:	bf00      	nop
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40010c00 	.word	0x40010c00
 80021bc:	40010800 	.word	0x40010800

080021c0 <LOGIC_voidControlPump>:
 *                     false --------> RESET PUMP_RELAY
 *  Inputs 	   : NONE
 *  Outputs     : NONE
 */
void LOGIC_voidControlPump()
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(IMD_RELAY_FB_GPIO_Port,IMD_RELAY_FB_Pin) > PUMP_THRESHOLD )
 80021c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021c8:	480a      	ldr	r0, [pc, #40]	; (80021f4 <LOGIC_voidControlPump+0x34>)
 80021ca:	f7ff f89f 	bl	800130c <HAL_GPIO_ReadPin>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d006      	beq.n	80021e2 <LOGIC_voidControlPump+0x22>
	{
		HAL_GPIO_WritePin(PUMP_RELAY_GPIO_Port,PUMP_RELAY_Pin,SET);
 80021d4:	2201      	movs	r2, #1
 80021d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021da:	4807      	ldr	r0, [pc, #28]	; (80021f8 <LOGIC_voidControlPump+0x38>)
 80021dc:	f7ff f8ad 	bl	800133a <HAL_GPIO_WritePin>
	else
	{
		HAL_GPIO_WritePin(PUMP_RELAY_GPIO_Port,PUMP_RELAY_Pin,RESET);
	}//end else 

}//end FUNC LOGIC_voidControlPump
 80021e0:	e005      	b.n	80021ee <LOGIC_voidControlPump+0x2e>
		HAL_GPIO_WritePin(PUMP_RELAY_GPIO_Port,PUMP_RELAY_Pin,RESET);
 80021e2:	2200      	movs	r2, #0
 80021e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021e8:	4803      	ldr	r0, [pc, #12]	; (80021f8 <LOGIC_voidControlPump+0x38>)
 80021ea:	f7ff f8a6 	bl	800133a <HAL_GPIO_WritePin>
}//end FUNC LOGIC_voidControlPump
 80021ee:	bf00      	nop
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	40010c00 	.word	0x40010c00
 80021f8:	40010800 	.word	0x40010800

080021fc <LOGIC_voidControlBrakeLight>:
 *                     false --------> RESET BRAKE_LIGHT_RELAY
 *  Inputs 	   : NONE
 *  Outputs     : NONE
 */
void LOGIC_voidControlBrakeLight()
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(BRAKE_LIGHT_RELAY_GPIO_Port,BRAKE_LIGHT_RELAY_Pin,SET);

	if(ADC_uint16ReadBrakes() >= BRAKE_THRESHOLD) //
 8002200:	f7ff ff34 	bl	800206c <ADC_uint16ReadBrakes>
 8002204:	4603      	mov	r3, r0
 8002206:	461a      	mov	r2, r3
 8002208:	f640 53ab 	movw	r3, #3499	; 0xdab
 800220c:	429a      	cmp	r2, r3
 800220e:	d906      	bls.n	800221e <LOGIC_voidControlBrakeLight+0x22>
	{
		HAL_GPIO_WritePin(BRAKE_LIGHT_RELAY_GPIO_Port,BRAKE_LIGHT_RELAY_Pin,SET);
 8002210:	2201      	movs	r2, #1
 8002212:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002216:	4806      	ldr	r0, [pc, #24]	; (8002230 <LOGIC_voidControlBrakeLight+0x34>)
 8002218:	f7ff f88f 	bl	800133a <HAL_GPIO_WritePin>
	}//end if
	else
	{
		HAL_GPIO_WritePin(BRAKE_LIGHT_RELAY_GPIO_Port,BRAKE_LIGHT_RELAY_Pin,RESET);
	}//end else
}//end FUNC LOGIC_voidControlBrakeLight
 800221c:	e005      	b.n	800222a <LOGIC_voidControlBrakeLight+0x2e>
		HAL_GPIO_WritePin(BRAKE_LIGHT_RELAY_GPIO_Port,BRAKE_LIGHT_RELAY_Pin,RESET);
 800221e:	2200      	movs	r2, #0
 8002220:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002224:	4802      	ldr	r0, [pc, #8]	; (8002230 <LOGIC_voidControlBrakeLight+0x34>)
 8002226:	f7ff f888 	bl	800133a <HAL_GPIO_WritePin>
}//end FUNC LOGIC_voidControlBrakeLight
 800222a:	bf00      	nop
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	40010800 	.word	0x40010800

08002234 <Error_Action>:
 *  Discribtion : TO open the shutdown circuit and terminate
 *  Inputs 	   : NONE
 *  Outputs     : NONE
 */
void Error_Action(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
	//It's not sure that ERROR value == 0 or 1
	HAL_GPIO_WritePin(EVMS_RELAY_GPIO_Port,EVMS_RELAY_Pin,ERROR);
 8002238:	2200      	movs	r2, #0
 800223a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800223e:	4802      	ldr	r0, [pc, #8]	; (8002248 <Error_Action+0x14>)
 8002240:	f7ff f87b 	bl	800133a <HAL_GPIO_WritePin>

}//end FUNC Error_Action
 8002244:	bf00      	nop
 8002246:	bd80      	pop	{r7, pc}
 8002248:	40010800 	.word	0x40010800

0800224c <main>:
static void MX_DMA_Init(void);

/****************************************************************************/

int main(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0

/***************************** MCU Configuration  ***************************/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */	
  HAL_Init();
 8002250:	f7fd ff7c 	bl	800014c <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8002254:	f000 f826 	bl	80022a4 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002258:	f000 f904 	bl	8002464 <MX_GPIO_Init>
  MX_ADC1_Init();
 800225c:	f000 f87a 	bl	8002354 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8002260:	f000 f8b8 	bl	80023d4 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8002264:	f000 f8e0 	bl	8002428 <MX_DMA_Init>

/****************************************************************************/

HAL_ADCEx_Calibration_Start(&hadc1);
 8002268:	480c      	ldr	r0, [pc, #48]	; (800229c <main+0x50>)
 800226a:	f7fe fbe1 	bl	8000a30 <HAL_ADCEx_Calibration_Start>

  while(1)
  {
	EVMS2_init();
 800226e:	f7ff fee7 	bl	8002040 <EVMS2_init>
	LOGIC_voidControlBrakeLight();
 8002272:	f7ff ffc3 	bl	80021fc <LOGIC_voidControlBrakeLight>
	LOGIC_voidControlFan();
 8002276:	f7ff ff85 	bl	8002184 <LOGIC_voidControlFan>
	LOGIC_voidControlPump();
 800227a:	f7ff ffa1 	bl	80021c0 <LOGIC_voidControlPump>
	
    if(isError()==ERROR)
 800227e:	f7ff ff59 	bl	8002134 <isError>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d102      	bne.n	800228e <main+0x42>
    {
        Error_Action();
 8002288:	f7ff ffd4 	bl	8002234 <Error_Action>
 800228c:	e7ef      	b.n	800226e <main+0x22>
    }//end if 
    else
    {
    	HAL_GPIO_WritePin(BRAKE_LIGHT_RELAY_GPIO_Port,BRAKE_LIGHT_RELAY_Pin,0);
 800228e:	2200      	movs	r2, #0
 8002290:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002294:	4802      	ldr	r0, [pc, #8]	; (80022a0 <main+0x54>)
 8002296:	f7ff f850 	bl	800133a <HAL_GPIO_WritePin>
	EVMS2_init();
 800229a:	e7e8      	b.n	800226e <main+0x22>
 800229c:	20000034 	.word	0x20000034
 80022a0:	40010800 	.word	0x40010800

080022a4 <SystemClock_Config>:
*  Discribtion : Set the system clock configuration
*  Inputs 	   : NONE
*  Outputs     : NONE
*/
void SystemClock_Config(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b094      	sub	sp, #80	; 0x50
 80022a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022ae:	2228      	movs	r2, #40	; 0x28
 80022b0:	2100      	movs	r1, #0
 80022b2:	4618      	mov	r0, r3
 80022b4:	f000 fab8 	bl	8002828 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022b8:	f107 0314 	add.w	r3, r7, #20
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	605a      	str	r2, [r3, #4]
 80022c2:	609a      	str	r2, [r3, #8]
 80022c4:	60da      	str	r2, [r3, #12]
 80022c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022c8:	1d3b      	adds	r3, r7, #4
 80022ca:	2200      	movs	r2, #0
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	605a      	str	r2, [r3, #4]
 80022d0:	609a      	str	r2, [r3, #8]
 80022d2:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80022d4:	2302      	movs	r3, #2
 80022d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022d8:	2301      	movs	r3, #1
 80022da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022dc:	2310      	movs	r3, #16
 80022de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022e0:	2302      	movs	r3, #2
 80022e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80022e4:	2300      	movs	r3, #0
 80022e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80022e8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80022ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff f83a 	bl	800136c <HAL_RCC_OscConfig>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80022fe:	f000 f925 	bl	800254c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002302:	230f      	movs	r3, #15
 8002304:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002306:	2302      	movs	r3, #2
 8002308:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800230a:	2300      	movs	r3, #0
 800230c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800230e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002312:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002314:	2300      	movs	r3, #0
 8002316:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002318:	f107 0314 	add.w	r3, r7, #20
 800231c:	2101      	movs	r1, #1
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff faa4 	bl	800186c <HAL_RCC_ClockConfig>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800232a:	f000 f90f 	bl	800254c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800232e:	2302      	movs	r3, #2
 8002330:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8002332:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002336:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002338:	1d3b      	adds	r3, r7, #4
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff fc32 	bl	8001ba4 <HAL_RCCEx_PeriphCLKConfig>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002346:	f000 f901 	bl	800254c <Error_Handler>
  }
}
 800234a:	bf00      	nop
 800234c:	3750      	adds	r7, #80	; 0x50
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
	...

08002354 <MX_ADC1_Init>:
*  Discribtion : Initialaize ADC1
*  Inputs 	   : NONE
*  Outputs     : NONE
*/
static void MX_ADC1_Init(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0

  ADC_ChannelConfTypeDef sConfig = {0};
 800235a:	1d3b      	adds	r3, r7, #4
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	605a      	str	r2, [r3, #4]
 8002362:	609a      	str	r2, [r3, #8]

  hadc1.Instance = ADC1;
 8002364:	4b19      	ldr	r3, [pc, #100]	; (80023cc <MX_ADC1_Init+0x78>)
 8002366:	4a1a      	ldr	r2, [pc, #104]	; (80023d0 <MX_ADC1_Init+0x7c>)
 8002368:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800236a:	4b18      	ldr	r3, [pc, #96]	; (80023cc <MX_ADC1_Init+0x78>)
 800236c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002370:	609a      	str	r2, [r3, #8]
  //hadc1.Init.ScanConvMode = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002372:	4b16      	ldr	r3, [pc, #88]	; (80023cc <MX_ADC1_Init+0x78>)
 8002374:	2200      	movs	r2, #0
 8002376:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002378:	4b14      	ldr	r3, [pc, #80]	; (80023cc <MX_ADC1_Init+0x78>)
 800237a:	2200      	movs	r2, #0
 800237c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800237e:	4b13      	ldr	r3, [pc, #76]	; (80023cc <MX_ADC1_Init+0x78>)
 8002380:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002384:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002386:	4b11      	ldr	r3, [pc, #68]	; (80023cc <MX_ADC1_Init+0x78>)
 8002388:	2200      	movs	r2, #0
 800238a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800238c:	4b0f      	ldr	r3, [pc, #60]	; (80023cc <MX_ADC1_Init+0x78>)
 800238e:	2201      	movs	r2, #1
 8002390:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002392:	480e      	ldr	r0, [pc, #56]	; (80023cc <MX_ADC1_Init+0x78>)
 8002394:	f7fd ff3c 	bl	8000210 <HAL_ADC_Init>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800239e:	f000 f8d5 	bl	800254c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80023a2:	2300      	movs	r3, #0
 80023a4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80023a6:	2301      	movs	r3, #1
 80023a8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 80023aa:	2306      	movs	r3, #6
 80023ac:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023ae:	1d3b      	adds	r3, r7, #4
 80023b0:	4619      	mov	r1, r3
 80023b2:	4806      	ldr	r0, [pc, #24]	; (80023cc <MX_ADC1_Init+0x78>)
 80023b4:	f7fe f9b8 	bl	8000728 <HAL_ADC_ConfigChannel>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80023be:	f000 f8c5 	bl	800254c <Error_Handler>
  }

}
 80023c2:	bf00      	nop
 80023c4:	3710      	adds	r7, #16
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	20000034 	.word	0x20000034
 80023d0:	40012400 	.word	0x40012400

080023d4 <MX_USART2_UART_Init>:
*  Discribtion : Initialaize USART2
*  Inputs 	   : NONE
*  Outputs     : NONE
*/
static void MX_USART2_UART_Init(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80023d8:	4b11      	ldr	r3, [pc, #68]	; (8002420 <MX_USART2_UART_Init+0x4c>)
 80023da:	4a12      	ldr	r2, [pc, #72]	; (8002424 <MX_USART2_UART_Init+0x50>)
 80023dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80023de:	4b10      	ldr	r3, [pc, #64]	; (8002420 <MX_USART2_UART_Init+0x4c>)
 80023e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80023e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80023e6:	4b0e      	ldr	r3, [pc, #56]	; (8002420 <MX_USART2_UART_Init+0x4c>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80023ec:	4b0c      	ldr	r3, [pc, #48]	; (8002420 <MX_USART2_UART_Init+0x4c>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80023f2:	4b0b      	ldr	r3, [pc, #44]	; (8002420 <MX_USART2_UART_Init+0x4c>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80023f8:	4b09      	ldr	r3, [pc, #36]	; (8002420 <MX_USART2_UART_Init+0x4c>)
 80023fa:	220c      	movs	r2, #12
 80023fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023fe:	4b08      	ldr	r3, [pc, #32]	; (8002420 <MX_USART2_UART_Init+0x4c>)
 8002400:	2200      	movs	r2, #0
 8002402:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002404:	4b06      	ldr	r3, [pc, #24]	; (8002420 <MX_USART2_UART_Init+0x4c>)
 8002406:	2200      	movs	r2, #0
 8002408:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800240a:	4805      	ldr	r0, [pc, #20]	; (8002420 <MX_USART2_UART_Init+0x4c>)
 800240c:	f7ff fd3c 	bl	8001e88 <HAL_UART_Init>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002416:	f000 f899 	bl	800254c <Error_Handler>
  }

}
 800241a:	bf00      	nop
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	200000a8 	.word	0x200000a8
 8002424:	40004400 	.word	0x40004400

08002428 <MX_DMA_Init>:
*  Discribtion : Enable DMA controller clock
*  Inputs 	   : NONE
*  Outputs     : NONE
*/
static void MX_DMA_Init(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800242e:	4a0c      	ldr	r2, [pc, #48]	; (8002460 <MX_DMA_Init+0x38>)
 8002430:	4b0b      	ldr	r3, [pc, #44]	; (8002460 <MX_DMA_Init+0x38>)
 8002432:	695b      	ldr	r3, [r3, #20]
 8002434:	f043 0301 	orr.w	r3, r3, #1
 8002438:	6153      	str	r3, [r2, #20]
 800243a:	4b09      	ldr	r3, [pc, #36]	; (8002460 <MX_DMA_Init+0x38>)
 800243c:	695b      	ldr	r3, [r3, #20]
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	607b      	str	r3, [r7, #4]
 8002444:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002446:	2200      	movs	r2, #0
 8002448:	2100      	movs	r1, #0
 800244a:	200b      	movs	r0, #11
 800244c:	f7fe fc61 	bl	8000d12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002450:	200b      	movs	r0, #11
 8002452:	f7fe fc7a 	bl	8000d4a <HAL_NVIC_EnableIRQ>

}
 8002456:	bf00      	nop
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	40021000 	.word	0x40021000

08002464 <MX_GPIO_Init>:
*  Discribtion : Initialaize GPIO
*  Inputs 	   : NONE
*  Outputs     : NONE
*/
static void MX_GPIO_Init(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b088      	sub	sp, #32
 8002468:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800246a:	f107 0310 	add.w	r3, r7, #16
 800246e:	2200      	movs	r2, #0
 8002470:	601a      	str	r2, [r3, #0]
 8002472:	605a      	str	r2, [r3, #4]
 8002474:	609a      	str	r2, [r3, #8]
 8002476:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002478:	4a31      	ldr	r2, [pc, #196]	; (8002540 <MX_GPIO_Init+0xdc>)
 800247a:	4b31      	ldr	r3, [pc, #196]	; (8002540 <MX_GPIO_Init+0xdc>)
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	f043 0310 	orr.w	r3, r3, #16
 8002482:	6193      	str	r3, [r2, #24]
 8002484:	4b2e      	ldr	r3, [pc, #184]	; (8002540 <MX_GPIO_Init+0xdc>)
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	f003 0310 	and.w	r3, r3, #16
 800248c:	60fb      	str	r3, [r7, #12]
 800248e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002490:	4a2b      	ldr	r2, [pc, #172]	; (8002540 <MX_GPIO_Init+0xdc>)
 8002492:	4b2b      	ldr	r3, [pc, #172]	; (8002540 <MX_GPIO_Init+0xdc>)
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	f043 0320 	orr.w	r3, r3, #32
 800249a:	6193      	str	r3, [r2, #24]
 800249c:	4b28      	ldr	r3, [pc, #160]	; (8002540 <MX_GPIO_Init+0xdc>)
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	f003 0320 	and.w	r3, r3, #32
 80024a4:	60bb      	str	r3, [r7, #8]
 80024a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024a8:	4a25      	ldr	r2, [pc, #148]	; (8002540 <MX_GPIO_Init+0xdc>)
 80024aa:	4b25      	ldr	r3, [pc, #148]	; (8002540 <MX_GPIO_Init+0xdc>)
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	f043 0304 	orr.w	r3, r3, #4
 80024b2:	6193      	str	r3, [r2, #24]
 80024b4:	4b22      	ldr	r3, [pc, #136]	; (8002540 <MX_GPIO_Init+0xdc>)
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	f003 0304 	and.w	r3, r3, #4
 80024bc:	607b      	str	r3, [r7, #4]
 80024be:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024c0:	4a1f      	ldr	r2, [pc, #124]	; (8002540 <MX_GPIO_Init+0xdc>)
 80024c2:	4b1f      	ldr	r3, [pc, #124]	; (8002540 <MX_GPIO_Init+0xdc>)
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	f043 0308 	orr.w	r3, r3, #8
 80024ca:	6193      	str	r3, [r2, #24]
 80024cc:	4b1c      	ldr	r3, [pc, #112]	; (8002540 <MX_GPIO_Init+0xdc>)
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	f003 0308 	and.w	r3, r3, #8
 80024d4:	603b      	str	r3, [r7, #0]
 80024d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BRAKE_LIGHT_RELAY_Pin|FAN_RELAY_Pin|PUMP_RELAY_Pin|EVMS_RELAY_Pin, GPIO_PIN_RESET);
 80024d8:	2200      	movs	r2, #0
 80024da:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 80024de:	4819      	ldr	r0, [pc, #100]	; (8002544 <MX_GPIO_Init+0xe0>)
 80024e0:	f7fe ff2b 	bl	800133a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BSPD_FB_Pin BSPD_RELAY_FB_Pin IMD_FB_Pin IMD_RELAY_FB_Pin */
  GPIO_InitStruct.Pin = BSPD_FB_Pin|BSPD_RELAY_FB_Pin|IMD_FB_Pin|IMD_RELAY_FB_Pin;
 80024e4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80024e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024ea:	2300      	movs	r3, #0
 80024ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ee:	2300      	movs	r3, #0
 80024f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024f2:	f107 0310 	add.w	r3, r7, #16
 80024f6:	4619      	mov	r1, r3
 80024f8:	4813      	ldr	r0, [pc, #76]	; (8002548 <MX_GPIO_Init+0xe4>)
 80024fa:	f7fe fdad 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pin : BMS_FB_Pin */
  GPIO_InitStruct.Pin = BMS_FB_Pin;
 80024fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002502:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002504:	2300      	movs	r3, #0
 8002506:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002508:	2300      	movs	r3, #0
 800250a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BMS_FB_GPIO_Port, &GPIO_InitStruct);
 800250c:	f107 0310 	add.w	r3, r7, #16
 8002510:	4619      	mov	r1, r3
 8002512:	480c      	ldr	r0, [pc, #48]	; (8002544 <MX_GPIO_Init+0xe0>)
 8002514:	f7fe fda0 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pins : BRAKE_LIGHT_RELAY_Pin FAN_RELAY_Pin PUMP_RELAY_Pin EVMS_RELAY_Pin */
  GPIO_InitStruct.Pin = BRAKE_LIGHT_RELAY_Pin|FAN_RELAY_Pin|PUMP_RELAY_Pin|EVMS_RELAY_Pin;
 8002518:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 800251c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800251e:	2301      	movs	r3, #1
 8002520:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002522:	2300      	movs	r3, #0
 8002524:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002526:	2302      	movs	r3, #2
 8002528:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800252a:	f107 0310 	add.w	r3, r7, #16
 800252e:	4619      	mov	r1, r3
 8002530:	4804      	ldr	r0, [pc, #16]	; (8002544 <MX_GPIO_Init+0xe0>)
 8002532:	f7fe fd91 	bl	8001058 <HAL_GPIO_Init>

}
 8002536:	bf00      	nop
 8002538:	3720      	adds	r7, #32
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40021000 	.word	0x40021000
 8002544:	40010800 	.word	0x40010800
 8002548:	40010c00 	.word	0x40010c00

0800254c <Error_Handler>:
*  Discribtion : This function is executed in case of error occurrence.
*  Inputs 	   : NONE
*  Outputs     : NONE
*/
void Error_Handler(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
 
}
 8002550:	bf00      	nop
 8002552:	46bd      	mov	sp, r7
 8002554:	bc80      	pop	{r7}
 8002556:	4770      	bx	lr

08002558 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800255e:	4a15      	ldr	r2, [pc, #84]	; (80025b4 <HAL_MspInit+0x5c>)
 8002560:	4b14      	ldr	r3, [pc, #80]	; (80025b4 <HAL_MspInit+0x5c>)
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	f043 0301 	orr.w	r3, r3, #1
 8002568:	6193      	str	r3, [r2, #24]
 800256a:	4b12      	ldr	r3, [pc, #72]	; (80025b4 <HAL_MspInit+0x5c>)
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	60bb      	str	r3, [r7, #8]
 8002574:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002576:	4a0f      	ldr	r2, [pc, #60]	; (80025b4 <HAL_MspInit+0x5c>)
 8002578:	4b0e      	ldr	r3, [pc, #56]	; (80025b4 <HAL_MspInit+0x5c>)
 800257a:	69db      	ldr	r3, [r3, #28]
 800257c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002580:	61d3      	str	r3, [r2, #28]
 8002582:	4b0c      	ldr	r3, [pc, #48]	; (80025b4 <HAL_MspInit+0x5c>)
 8002584:	69db      	ldr	r3, [r3, #28]
 8002586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800258a:	607b      	str	r3, [r7, #4]
 800258c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800258e:	4b0a      	ldr	r3, [pc, #40]	; (80025b8 <HAL_MspInit+0x60>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	60fb      	str	r3, [r7, #12]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800259a:	60fb      	str	r3, [r7, #12]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	4a04      	ldr	r2, [pc, #16]	; (80025b8 <HAL_MspInit+0x60>)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025aa:	bf00      	nop
 80025ac:	3714      	adds	r7, #20
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bc80      	pop	{r7}
 80025b2:	4770      	bx	lr
 80025b4:	40021000 	.word	0x40021000
 80025b8:	40010000 	.word	0x40010000

080025bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b088      	sub	sp, #32
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c4:	f107 0310 	add.w	r3, r7, #16
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]
 80025cc:	605a      	str	r2, [r3, #4]
 80025ce:	609a      	str	r2, [r3, #8]
 80025d0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a28      	ldr	r2, [pc, #160]	; (8002678 <HAL_ADC_MspInit+0xbc>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d149      	bne.n	8002670 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80025dc:	4a27      	ldr	r2, [pc, #156]	; (800267c <HAL_ADC_MspInit+0xc0>)
 80025de:	4b27      	ldr	r3, [pc, #156]	; (800267c <HAL_ADC_MspInit+0xc0>)
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025e6:	6193      	str	r3, [r2, #24]
 80025e8:	4b24      	ldr	r3, [pc, #144]	; (800267c <HAL_ADC_MspInit+0xc0>)
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025f0:	60fb      	str	r3, [r7, #12]
 80025f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025f4:	4a21      	ldr	r2, [pc, #132]	; (800267c <HAL_ADC_MspInit+0xc0>)
 80025f6:	4b21      	ldr	r3, [pc, #132]	; (800267c <HAL_ADC_MspInit+0xc0>)
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	f043 0304 	orr.w	r3, r3, #4
 80025fe:	6193      	str	r3, [r2, #24]
 8002600:	4b1e      	ldr	r3, [pc, #120]	; (800267c <HAL_ADC_MspInit+0xc0>)
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	f003 0304 	and.w	r3, r3, #4
 8002608:	60bb      	str	r3, [r7, #8]
 800260a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = BREAKES_ANGLE_Pin|BRAKES_PRESSURE_Pin;
 800260c:	2303      	movs	r3, #3
 800260e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002610:	2303      	movs	r3, #3
 8002612:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002614:	f107 0310 	add.w	r3, r7, #16
 8002618:	4619      	mov	r1, r3
 800261a:	4819      	ldr	r0, [pc, #100]	; (8002680 <HAL_ADC_MspInit+0xc4>)
 800261c:	f7fe fd1c 	bl	8001058 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002620:	4b18      	ldr	r3, [pc, #96]	; (8002684 <HAL_ADC_MspInit+0xc8>)
 8002622:	4a19      	ldr	r2, [pc, #100]	; (8002688 <HAL_ADC_MspInit+0xcc>)
 8002624:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002626:	4b17      	ldr	r3, [pc, #92]	; (8002684 <HAL_ADC_MspInit+0xc8>)
 8002628:	2200      	movs	r2, #0
 800262a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800262c:	4b15      	ldr	r3, [pc, #84]	; (8002684 <HAL_ADC_MspInit+0xc8>)
 800262e:	2200      	movs	r2, #0
 8002630:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002632:	4b14      	ldr	r3, [pc, #80]	; (8002684 <HAL_ADC_MspInit+0xc8>)
 8002634:	2280      	movs	r2, #128	; 0x80
 8002636:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002638:	4b12      	ldr	r3, [pc, #72]	; (8002684 <HAL_ADC_MspInit+0xc8>)
 800263a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800263e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002640:	4b10      	ldr	r3, [pc, #64]	; (8002684 <HAL_ADC_MspInit+0xc8>)
 8002642:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002646:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002648:	4b0e      	ldr	r3, [pc, #56]	; (8002684 <HAL_ADC_MspInit+0xc8>)
 800264a:	2220      	movs	r2, #32
 800264c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800264e:	4b0d      	ldr	r3, [pc, #52]	; (8002684 <HAL_ADC_MspInit+0xc8>)
 8002650:	2200      	movs	r2, #0
 8002652:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002654:	480b      	ldr	r0, [pc, #44]	; (8002684 <HAL_ADC_MspInit+0xc8>)
 8002656:	f7fe fb93 	bl	8000d80 <HAL_DMA_Init>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d001      	beq.n	8002664 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8002660:	f7ff ff74 	bl	800254c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4a07      	ldr	r2, [pc, #28]	; (8002684 <HAL_ADC_MspInit+0xc8>)
 8002668:	621a      	str	r2, [r3, #32]
 800266a:	4a06      	ldr	r2, [pc, #24]	; (8002684 <HAL_ADC_MspInit+0xc8>)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002670:	bf00      	nop
 8002672:	3720      	adds	r7, #32
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	40012400 	.word	0x40012400
 800267c:	40021000 	.word	0x40021000
 8002680:	40010800 	.word	0x40010800
 8002684:	20000064 	.word	0x20000064
 8002688:	40020008 	.word	0x40020008

0800268c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b088      	sub	sp, #32
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002694:	f107 0310 	add.w	r3, r7, #16
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	605a      	str	r2, [r3, #4]
 800269e:	609a      	str	r2, [r3, #8]
 80026a0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a1b      	ldr	r2, [pc, #108]	; (8002714 <HAL_UART_MspInit+0x88>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d12f      	bne.n	800270c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80026ac:	4a1a      	ldr	r2, [pc, #104]	; (8002718 <HAL_UART_MspInit+0x8c>)
 80026ae:	4b1a      	ldr	r3, [pc, #104]	; (8002718 <HAL_UART_MspInit+0x8c>)
 80026b0:	69db      	ldr	r3, [r3, #28]
 80026b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026b6:	61d3      	str	r3, [r2, #28]
 80026b8:	4b17      	ldr	r3, [pc, #92]	; (8002718 <HAL_UART_MspInit+0x8c>)
 80026ba:	69db      	ldr	r3, [r3, #28]
 80026bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c0:	60fb      	str	r3, [r7, #12]
 80026c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c4:	4a14      	ldr	r2, [pc, #80]	; (8002718 <HAL_UART_MspInit+0x8c>)
 80026c6:	4b14      	ldr	r3, [pc, #80]	; (8002718 <HAL_UART_MspInit+0x8c>)
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	f043 0304 	orr.w	r3, r3, #4
 80026ce:	6193      	str	r3, [r2, #24]
 80026d0:	4b11      	ldr	r3, [pc, #68]	; (8002718 <HAL_UART_MspInit+0x8c>)
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	f003 0304 	and.w	r3, r3, #4
 80026d8:	60bb      	str	r3, [r7, #8]
 80026da:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80026dc:	2304      	movs	r3, #4
 80026de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e0:	2302      	movs	r3, #2
 80026e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026e4:	2303      	movs	r3, #3
 80026e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026e8:	f107 0310 	add.w	r3, r7, #16
 80026ec:	4619      	mov	r1, r3
 80026ee:	480b      	ldr	r0, [pc, #44]	; (800271c <HAL_UART_MspInit+0x90>)
 80026f0:	f7fe fcb2 	bl	8001058 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80026f4:	2308      	movs	r3, #8
 80026f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026f8:	2300      	movs	r3, #0
 80026fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fc:	2300      	movs	r3, #0
 80026fe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002700:	f107 0310 	add.w	r3, r7, #16
 8002704:	4619      	mov	r1, r3
 8002706:	4805      	ldr	r0, [pc, #20]	; (800271c <HAL_UART_MspInit+0x90>)
 8002708:	f7fe fca6 	bl	8001058 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800270c:	bf00      	nop
 800270e:	3720      	adds	r7, #32
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	40004400 	.word	0x40004400
 8002718:	40021000 	.word	0x40021000
 800271c:	40010800 	.word	0x40010800

08002720 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002724:	bf00      	nop
 8002726:	46bd      	mov	sp, r7
 8002728:	bc80      	pop	{r7}
 800272a:	4770      	bx	lr

0800272c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002730:	e7fe      	b.n	8002730 <HardFault_Handler+0x4>

08002732 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002732:	b480      	push	{r7}
 8002734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002736:	e7fe      	b.n	8002736 <MemManage_Handler+0x4>

08002738 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800273c:	e7fe      	b.n	800273c <BusFault_Handler+0x4>

0800273e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800273e:	b480      	push	{r7}
 8002740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002742:	e7fe      	b.n	8002742 <UsageFault_Handler+0x4>

08002744 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002748:	bf00      	nop
 800274a:	46bd      	mov	sp, r7
 800274c:	bc80      	pop	{r7}
 800274e:	4770      	bx	lr

08002750 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002754:	bf00      	nop
 8002756:	46bd      	mov	sp, r7
 8002758:	bc80      	pop	{r7}
 800275a:	4770      	bx	lr

0800275c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002760:	bf00      	nop
 8002762:	46bd      	mov	sp, r7
 8002764:	bc80      	pop	{r7}
 8002766:	4770      	bx	lr

08002768 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800276c:	f7fd fd34 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002770:	bf00      	nop
 8002772:	bd80      	pop	{r7, pc}

08002774 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002778:	4802      	ldr	r0, [pc, #8]	; (8002784 <DMA1_Channel1_IRQHandler+0x10>)
 800277a:	f7fe fb5b 	bl	8000e34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800277e:	bf00      	nop
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	20000064 	.word	0x20000064

08002788 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800278c:	bf00      	nop
 800278e:	46bd      	mov	sp, r7
 8002790:	bc80      	pop	{r7}
 8002792:	4770      	bx	lr

08002794 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002794:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002796:	e003      	b.n	80027a0 <LoopCopyDataInit>

08002798 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002798:	4b0b      	ldr	r3, [pc, #44]	; (80027c8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800279a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800279c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800279e:	3104      	adds	r1, #4

080027a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80027a0:	480a      	ldr	r0, [pc, #40]	; (80027cc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80027a2:	4b0b      	ldr	r3, [pc, #44]	; (80027d0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80027a4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80027a6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80027a8:	d3f6      	bcc.n	8002798 <CopyDataInit>
  ldr r2, =_sbss
 80027aa:	4a0a      	ldr	r2, [pc, #40]	; (80027d4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80027ac:	e002      	b.n	80027b4 <LoopFillZerobss>

080027ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80027ae:	2300      	movs	r3, #0
  str r3, [r2], #4
 80027b0:	f842 3b04 	str.w	r3, [r2], #4

080027b4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80027b4:	4b08      	ldr	r3, [pc, #32]	; (80027d8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80027b6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80027b8:	d3f9      	bcc.n	80027ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80027ba:	f7ff ffe5 	bl	8002788 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027be:	f000 f80f 	bl	80027e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80027c2:	f7ff fd43 	bl	800224c <main>
  bx lr
 80027c6:	4770      	bx	lr
  ldr r3, =_sidata
 80027c8:	08002898 	.word	0x08002898
  ldr r0, =_sdata
 80027cc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80027d0:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80027d4:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80027d8:	200000e8 	.word	0x200000e8

080027dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027dc:	e7fe      	b.n	80027dc <ADC1_2_IRQHandler>
	...

080027e0 <__libc_init_array>:
 80027e0:	b570      	push	{r4, r5, r6, lr}
 80027e2:	2500      	movs	r5, #0
 80027e4:	4e0c      	ldr	r6, [pc, #48]	; (8002818 <__libc_init_array+0x38>)
 80027e6:	4c0d      	ldr	r4, [pc, #52]	; (800281c <__libc_init_array+0x3c>)
 80027e8:	1ba4      	subs	r4, r4, r6
 80027ea:	10a4      	asrs	r4, r4, #2
 80027ec:	42a5      	cmp	r5, r4
 80027ee:	d109      	bne.n	8002804 <__libc_init_array+0x24>
 80027f0:	f000 f822 	bl	8002838 <_init>
 80027f4:	2500      	movs	r5, #0
 80027f6:	4e0a      	ldr	r6, [pc, #40]	; (8002820 <__libc_init_array+0x40>)
 80027f8:	4c0a      	ldr	r4, [pc, #40]	; (8002824 <__libc_init_array+0x44>)
 80027fa:	1ba4      	subs	r4, r4, r6
 80027fc:	10a4      	asrs	r4, r4, #2
 80027fe:	42a5      	cmp	r5, r4
 8002800:	d105      	bne.n	800280e <__libc_init_array+0x2e>
 8002802:	bd70      	pop	{r4, r5, r6, pc}
 8002804:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002808:	4798      	blx	r3
 800280a:	3501      	adds	r5, #1
 800280c:	e7ee      	b.n	80027ec <__libc_init_array+0xc>
 800280e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002812:	4798      	blx	r3
 8002814:	3501      	adds	r5, #1
 8002816:	e7f2      	b.n	80027fe <__libc_init_array+0x1e>
 8002818:	08002890 	.word	0x08002890
 800281c:	08002890 	.word	0x08002890
 8002820:	08002890 	.word	0x08002890
 8002824:	08002894 	.word	0x08002894

08002828 <memset>:
 8002828:	4603      	mov	r3, r0
 800282a:	4402      	add	r2, r0
 800282c:	4293      	cmp	r3, r2
 800282e:	d100      	bne.n	8002832 <memset+0xa>
 8002830:	4770      	bx	lr
 8002832:	f803 1b01 	strb.w	r1, [r3], #1
 8002836:	e7f9      	b.n	800282c <memset+0x4>

08002838 <_init>:
 8002838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800283a:	bf00      	nop
 800283c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800283e:	bc08      	pop	{r3}
 8002840:	469e      	mov	lr, r3
 8002842:	4770      	bx	lr

08002844 <_fini>:
 8002844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002846:	bf00      	nop
 8002848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800284a:	bc08      	pop	{r3}
 800284c:	469e      	mov	lr, r3
 800284e:	4770      	bx	lr
